"use strict";var app=angular.module("Application",["ngRoute","ngAnimate","angular-md5"]);app.config(["$routeProvider",function(e){e.when("/",{redirectTo:"/apps"}).when("/userpassword",{controller:"UserPasswordController",templateUrl:"views/userpassword.html"}).when("/users",{controller:"UsersController",templateUrl:"views/users.html"}).when("/appstore",{controller:"AppStoreController",templateUrl:"views/appstore.html"}).when("/apps",{controller:"AppsController",templateUrl:"views/apps.html"}).when("/dns",{controller:"DnsController",templateUrl:"views/dns.html"}).when("/account",{controller:"AccountController",templateUrl:"views/account.html"}).when("/graphs",{controller:"GraphsController",templateUrl:"views/graphs.html"}).when("/security",{controller:"SecurityController",templateUrl:"views/security.html"}).otherwise({redirectTo:"/"})}]),app.filter("installationActive",function(){return function(e){return"error"===e?!1:"installed"===e?!1:!0}}),app.filter("installationStateLabel",function(){return function(e){return"error"===e?"Error":"subdomain_error"===e?"Error":"installed"===e?"Installed":"downloading_image"===e?"Downloading":"pending_install"===e?"Installing":"pending_uninstall"===e?"Uninstalling":"creating_container"===e?"Container":"downloading_manifest"===e?"Manifest":"creating_volume"===e?"Volume":"registering_subdomain"===e?"Subdomain":"allocated_oauth_credentials"===e?"OAuth":e}}),app.filter("accessRestrictionLabel",function(){return function(e){return""===e?"public":"roleUser"===e?"private":"roleAdmin"===e?"private (Admins only)":e}}),app.directive("laterName",function(){return{restrict:"A",require:["?ngModel","^?form"],link:function(e,n,o,t){o.$set("name",o.laterName);var r=t[0],i=t[1];r&&i&&(r.$name=o.name,i.$addControl(r),e.$on("$destroy",function(){i.$removeControl(r)}))}}}),angular.module("Application").service("Client",["$http","md5",function(e,n){function o(e,n){Error.call(this),this.name=this.constructor.name,this.statusCode=e,this.message="string"==typeof n?n:JSON.stringify(n)}function t(e){return function(n,t){return 401===t?i.logout():void e(new o(t,n))}}function r(){this._ready=!1,this._configListener=[],this._readyListener=[],this._userInfo={username:null,email:null,admin:!1},this._token=null,this._clientId="cid-webadmin",this._clientSecret="unused",this._config={apiServerOrigin:null,webServerOrigin:null,fqdn:null,ip:null,revision:null,update:null,isDev:!1,progress:{}},this._installedApps=[],this.setToken(localStorage.token)}var i=null;return r.prototype.setReady=function(){this._ready||(this._ready=!0,this._readyListener.forEach(function(e){e()}))},r.prototype.onReady=function(e){this._ready&&e(),this._readyListener.push(e)},r.prototype.onConfig=function(e){this._configListener.push(e),e(this._config)},r.prototype.setUserInfo=function(e){this._userInfo.username=e.username,this._userInfo.email=e.email,this._userInfo.admin=!!e.admin,this._userInfo.gravatar="https://www.gravatar.com/avatar/"+n.createHash(e.email.toLowerCase())+".jpg?s=24&d=mm",this._userInfo.gravatarHuge="https://www.gravatar.com/avatar/"+n.createHash(e.email.toLowerCase())+".jpg?s=128&d=mm"},r.prototype.setConfig=function(e){this._config.apiServerOrigin=e.apiServerOrigin,this._config.webServerOrigin=e.webServerOrigin,this._config.version=e.version,this._config.fqdn=e.fqdn,this._config.ip=e.ip,this._config.revision=e.revision,this._config.update=e.update,this._config.isDev=e.isDev,this._config.progress=e.progress;var n=this;this._configListener.forEach(function(e){e(n._config)})},r.prototype.getInstalledApps=function(){return this._installedApps},r.prototype.getUserInfo=function(){return this._userInfo},r.prototype.getConfig=function(){return this._config},r.prototype.setToken=function(n){e.defaults.headers.common.Authorization="Bearer "+n,n?localStorage.token=n:localStorage.removeItem("token"),this._token=n},r.prototype.config=function(n){e.get("/api/v1/cloudron/config").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.userInfo=function(n){e.get("/api/v1/profile").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.installApp=function(n,r,i,a,s,l){var p=this,c={appStoreId:n,version:r,password:i,location:s.location,portBindings:s.portBindings,accessRestriction:s.accessRestriction};e.post("/api/v1/apps/install",c).success(function(e,n){return 202!==n||"object"!=typeof e?l(new o(n,e)):(e.manifest={title:a},p._installedApps.push(e),void l(null,e.id))}).error(t(l))},r.prototype.uninstallApp=function(n,r,i){var a={password:r};e.post("/api/v1/apps/"+n+"/uninstall",a).success(function(e,n){return 202!==n?i(new o(n,e)):void i(null)}).error(t(i))},r.prototype.configureApp=function(n,r,i,a){var s={appId:n,password:r,location:i.location,portBindings:i.portBindings,accessRestriction:i.accessRestriction};e.post("/api/v1/apps/"+n+"/configure",s).success(function(e,n){return 202!==n?a(new o(n,e)):void a(null)}).error(t(a))},r.prototype.updateApp=function(n,r,i,a){e.post("/api/v1/apps/"+n+"/update",{version:r,password:i}).success(function(e,n){return 202!==n?a(new o(n,e)):void a(null)}).error(t(a))},r.prototype.startApp=function(n,r){var i={};e.post("/api/v1/apps/"+n+"/start",i).success(function(e,n){return 202!==n?r(new o(n,e)):void r(null)}).error(t(r))},r.prototype.stopApp=function(n,r){var i={};e.post("/api/v1/apps/"+n+"/stop",i).success(function(e,n){return 202!==n?r(new o(n,e)):void r(null)}).error(t(r))},r.prototype.version=function(n){e.get("/api/v1/cloudron/status").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.isServerFirstTime=function(n){e.get("/api/v1/cloudron/status").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,!e.activated)}).error(t(n))},r.prototype.getNakedDomain=function(n){e.get("/api/v1/settings/naked_domain").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e.appid)}).error(t(n))},r.prototype.setNakedDomain=function(n,r){e.post("/api/v1/settings/naked_domain",{appid:n}).success(function(e,n){return 204!==n?r(new o(n)):void r(null)}).error(t(r))},r.prototype.getApps=function(n){e.get("/api/v1/apps").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e.apps)}).error(t(n))},r.prototype.getApp=function(e,n){var o=null;return this._installedApps.some(function(n){return n.id===e?(o=n,!0):!1}),o?n(null,o):n(new Error("App not found"))},r.prototype.getAppLogStream=function(e){var n=new EventSource("/api/v1/apps/"+e+"/logstream");return n},r.prototype.getAppLogUrl=function(e){return"/api/v1/apps/"+e+"/logs?access_token="+this._token},r.prototype.setAdmin=function(n,r,i){var a={username:n,admin:r};e.post("/api/v1/users/"+n+"/admin",a).success(function(e,n){return 204!==n?i(new o(n,e)):void i(null)}).error(t(i))},r.prototype.createAdmin=function(n,r,i,a,s){var l={username:n,password:r,email:i},p=this;e.post("/api/v1/cloudron/activate?setupToken="+a,l).success(function(e,t){return 201!==t||"object"!=typeof e?s(new o(t,e)):(p.setToken(e.token),p.setUserInfo({username:n,email:i,admin:!0}),void s(null,e.activated))}).error(t(s))},r.prototype.listUsers=function(n){e.get("/api/v1/users").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.getOAuthClients=function(n){e.get("/api/v1/oauth/clients").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e.clients)}).error(t(n))},r.prototype.delTokensByClientId=function(n,r){e["delete"]("/api/v1/oauth/clients/"+n+"/tokens").success(function(e,n){return 204!==n?r(new o(n,e)):void r(null)}).error(t(r))},r.prototype.update=function(n){e.get("/api/v1/cloudron/update").success(function(e,t){return 202!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.reboot=function(n){e.get("/api/v1/cloudron/reboot").success(function(e,t){return 202!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.backup=function(n){e.post("/api/v1/cloudron/backups").success(function(e,t){return 202!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.setCertificate=function(n,r,i){console.log("will set certificate");var a=new FormData;a.append("certificate",n),a.append("key",r),e.post("/api/v1/cloudron/certificate",a,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).success(function(e,n){return 202!==n?i(new o(n,e)):void i(null)}).error(t(i))},r.prototype.graphs=function(n,r,i){var a={params:{target:n,format:"json",from:r}};e.get("/api/v1/cloudron/graphs",a).success(function(e,n){return 200!==n||"object"!=typeof e?i(new o(n,e)):void i(null,e)}).error(t(i))},r.prototype.createUser=function(n,r,i){var a={username:n,email:r};e.post("/api/v1/users",a).success(function(e,n){return 201!==n||"object"!=typeof e?i(new o(n,e)):void i(null,e)}).error(t(i))},r.prototype.removeUser=function(n,r,i){var a={username:n,password:r};e({method:"DELETE",url:"/api/v1/users/"+n,data:a,headers:{"Content-Type":"application/json"}}).success(function(e,n){return 204!==n?i(new o(n,e)):void i(null)}).error(t(i))},r.prototype.changePassword=function(n,r,i){var a={password:n,newPassword:r};e.post("/api/v1/users/"+this._userInfo.username+"/password",a).success(function(e,n){return 204!==n||"object"!=typeof e?i(new o(n,e)):void i(null,e)}).error(t(i))},r.prototype.refreshConfig=function(e){var n=this;e="function"==typeof e?e:function(){},this.config(function(o,t){return o?e(o):(n.setConfig(t),void e(null))})},r.prototype.refreshInstalledApps=function(e){var n=this;e="function"==typeof e?e:function(){},this.getApps(function(o,t){if(o)return e(o);t.forEach(function(e){for(var o=!1,t=0;t<n._installedApps.length;++t)if(n._installedApps[t].id===e.id){o=t;break}o!==!1?angular.copy(e,n._installedApps[o]):n._installedApps.push(e)});for(var r=n._installedApps.length-1;r>=0;--r)t.some(function(e){return e.id===n._installedApps[r].id})||n._installedApps.splice(r,1);e(null)})},r.prototype.logout=function(){this.setToken(null),this._userInfo={},window.location.href="/api/v1/session/logout"},r.prototype.exchangeCodeForToken=function(n,r){var i={grant_type:"authorization_code",code:n,redirect_uri:window.location.origin,client_id:this._clientId,client_secret:this._clientSecret};e.post("/api/v1/oauth/token?response_type=token&client_id="+this._clientId,i).success(function(e,n){return 200!==n||"object"!=typeof e?r(new o(n,e)):void r(null,e.access_token)}).error(t(r))},i=new r}]),angular.module("Application").service("AppStore",["$http","Client",function(e,n){function o(e,n){Error.call(this),this.name=this.constructor.name,this.statusCode=e,this.message="string"==typeof n?n:JSON.stringify(n)}function t(){this._appsCache={}}return t.prototype.getApps=function(t){if(null===n.getConfig().apiServerOrigin)return t(new o(420,"Enhance Your Calm"));var r=this;e.get(n.getConfig().apiServerOrigin+"/api/v1/appstore/apps",{params:{boxVersion:n.getConfig().version}}).success(function(e,n){return 200!==n?t(new o(n,e)):(e.apps.forEach(function(e){r._appsCache[e.id]||(r._appsCache[e.id]=e)}),t(null,r._appsCache))}).error(function(e,n){return t(new o(n,e))})},t.prototype.getAppById=function(e,n){if(e in this._appsCache)return n(null,this._appsCache[e]);var t=this;this.getApps(function(r){return r?n(r):e in t._appsCache?n(null,t._appsCache[e]):void n(new o(404,"Not found"))})},t.prototype.getManifest=function(t,r){if(null===n.getConfig().apiServerOrigin)return r(new o(420,"Enhance Your Calm"));var i=n.getConfig().apiServerOrigin+"/api/v1/appstore/apps/"+t+"/manifest";console.log("Getting the manifest of ",t,i),e.get(i).success(function(e,n){return 200!==n?r(new o(n,e)):r(null,e)}).error(function(e,n){return r(new o(n,e))})},new t}]),angular.module("Application").controller("MainController",["$scope","$route","$interval","Client",function(e,n,o,t){e.initialized=!1,e.userInfo=t.getUserInfo(),e.config={},e.isActive=function(e){return n.current?0===n.current.$$route.originalPath.indexOf(e):!1},e.logout=function(n){n.stopPropagation(),e.initialized=!1,t.logout()},e.login=function(){var e=window.location.origin+"/login_callback.html",n="root,profile,apps,roleAdmin";window.location.href="/api/v1/oauth/dialog/authorize?response_type=code&client_id="+t._clientId+"&redirect_uri="+e+"&scope="+n},e.setup=function(){window.location.href="/error.html?errorCode=1"},e.error=function(e){console.error(e),window.location.href="/error.html"},e.update=function(){$("#updateModal").modal("hide"),e.initialized=!1,t.update(function(e){e&&console.error(e),window.location.href="/update.html"})},e.backup=function(){$("#backupProgressModal").modal("show"),e.initialized=!1,t.backup(function(n){function o(){t.version(function(n){return n?window.setTimeout(o,1e3):($("#backupProgressModal").modal("hide"),void(e.initialized=!0))})}n&&console.error(n),window.setTimeout(o,5e3)})},t.isServerFirstTime(function(n,r){return n?e.error(n):r?e.setup():void(localStorage.token?t.refreshConfig(function(n){return n&&401===n.statusCode?e.login():n?e.error(n):(t.getConfig().progress.update&&(window.location.href="/update.html"),void t.userInfo(function(n,r){return n?e.error(n):(t.setUserInfo(r),void t.refreshInstalledApps(function(n){if(n)return e.error(n);var r=o(t.refreshInstalledApps.bind(t),2e3),i=o(t.refreshConfig.bind(t),5e3);e.$on("$destroy",function(){o.cancel(r),o.cancel(i)}),t.setReady(),e.config=t.getConfig(),e.initialized=!0}))}))}):e.login())}),t.onConfig(function(e){e.progress.update&&(window.location.href="/update.html")})}]),angular.module("Application").controller("AccountController",["$scope","$location","Client",function(e,n,o){e.user=o.getUserInfo(),e.config=o.getConfig(),e.changePassword=function(){n.path("/userpassword")}}]),angular.module("Application").controller("AppsController",["$scope","$location","Client",function(e,n,o){e.installedApps=o.getInstalledApps(),e.config=o.getConfig(),e.appconfigure={busy:!1,error:{},app:{},location:"",password:"",portBindings:{},accessRestriction:""},e.appuninstall={error:{},app:{},password:""},e.showConfigure=function(n){e.appconfigure.app=n,e.appconfigure.location=n.location,e.appconfigure.portBindings=n.manifest.tcpPorts,e.appconfigure.accessRestriction=n.accessRestriction;for(var o in e.appconfigure.portBindings)e.appconfigure.portBindings[o].hostPort=n.portBindings[o];$("#appConfigureModal").modal("show")},e.doConfigure=function(n){e.appconfigure.busy=!0,e.appconfigure.error.name=null,e.appconfigure.error.password=null;var t={};for(var r in e.appconfigure.portBindings)t[r]=e.appconfigure.portBindings[r].hostPort;o.configureApp(e.appconfigure.app.id,e.appconfigure.password,{location:e.appconfigure.location,portBindings:t,accessRestriction:e.appconfigure.accessRestriction},function(o){return o?(403===o.statusCode?(e.appconfigure.error.password="Wrong password provided.",e.appconfigure.password=""):e.appconfigure.error.name="App with the name "+e.appconfigure.app.name+" cannot be configured.",void(e.appconfigure.busy=!1)):(e.appconfigure.busy=!1,e.appconfigure.error={},e.appconfigure.app={},e.appconfigure.location="",e.appconfigure.password="",e.appconfigure.portBindings={},e.appconfigure.accessRestriction="",n.$setPristine(),n.$setUntouched(),void $("#appConfigureModal").modal("hide"))})},e.showUninstall=function(n){e.appuninstall.app=n,e.appuninstall.error.password=null,$("#appUninstallModal").modal("show")},e.doUninstall=function(n){e.appuninstall.error.password=null,o.uninstallApp(e.appuninstall.app.id,e.appuninstall.password,function(o){return o?void(403===o.statusCode?(e.appuninstall.password="",e.appuninstall.error.password=!0):console.error(o)):(e.appuninstall.app={},e.appuninstall.password="",n.$setPristine(),n.$setUntouched(),void $("#appUninstallModal").modal("hide"))})},e.cancel=function(){window.history.back()}}]),angular.module("Application").controller("AppStoreController",["$scope","$location","$timeout","Client","AppStore",function(e,n,o,t,r){function i(){e.ready=!1,r.getApps(function(n,t){return n?(console.error(n),o(i,1e3)):(e.apps=t,void(e.ready=!0))})}t.getUserInfo().admin||n.path("/"),e.ready=!1,e.apps=[],e.config=t.getConfig(),e.appinstall={busy:!1,error:{},app:{},location:"",password:"",portBindings:{},accessRestriction:""},e.showInstall=function(n){r.getManifest(n.id,function(o,t){if(o)return console.error(o);n.manifest=t,e.appinstall.app=n,e.appinstall.location=n.location,e.appinstall.portBindings=t.tcpPorts,e.appinstall.accessRestriction=n.accessRestriction||"";for(var r in e.appinstall.portBindings)e.appinstall.portBindings[r].hostPort=parseInt(r);$("#appInstallModal").modal("show")})},e.doInstall=function(o){e.appinstall.busy=!0,e.appinstall.error.name=null,e.appinstall.error.password=null;var r={};for(var i in e.appinstall.portBindings)r[i]=e.appinstall.portBindings[i].hostPort;t.installApp(e.appinstall.app.id,e.appinstall.app.manifest.version,e.appinstall.password,e.appinstall.app.title,{location:e.appinstall.location,portBindings:r,accessRestriction:e.appinstall.accessRestriction},function(t){return t?(409===t.statusCode?e.appinstall.error.name="Application already exists.":403===t.statusCode?(e.appinstall.error.password="Wrong password provided.",e.appinstall.password=""):e.appinstall.error.name="App with the name "+e.appinstall.app.name+" cannot be installed.",void(e.appinstall.busy=!1)):(e.appinstall.busy=!1,e.appinstall.error={},e.appinstall.app={},e.appinstall.location="",e.appinstall.password="",e.appinstall.portBindings={},e.appinstall.accessRestriction="",o.$setPristine(),o.$setUntouched(),$("#appInstallModal").modal("hide"),void n.path("/apps"))})},i()}]),angular.module("Application").controller("DnsController",["$scope","$location","Client",function(e,n,o){o.getUserInfo().admin||n.path("/"),e.ready=!1,e.user=o.getUserInfo(),e.config=o.getConfig(),e.nakedDomainApp=null,e.certificateFile=null,e.certificateFileName="",e.keyFile=null,e.keyFileName="",e.setNakedDomain=function(){var n=e.nakedDomainApp?e.nakedDomainApp.id:"admin";o.setNakedDomain(n,function(e){return e?console.error("Error setting naked domain",e):void 0})},e.backup=function(){$("#backupProgressModal").modal("show"),e.$parent.initialized=!1,o.backup(function(n){function t(){o.version(function(n){return n?window.setTimeout(t,1e3):($("#backupProgressModal").modal("hide"),void(e.$parent.initialized=!0))})}n&&console.error(n),window.setTimeout(t,5e3)})},e.update=function(){$("#updateModal").modal("hide"),e.$parent.initialized=!1,o.update(function(e){e&&console.error(e),window.location.href="/update.html"})},document.getElementById("idCertificate").onchange=function(n){e.$apply(function(){e.certificateFile=n.target.files[0],e.certificateFileName=n.target.files[0].name})},document.getElementById("idKey").onchange=function(n){e.$apply(function(){e.keyFile=n.target.files[0],e.keyFileName=n.target.files[0].name})},e.setCertificate=function(){return console.log("Will set the certificate"),e.certificateFile?e.keyFile?void o.setCertificate(e.certificateFile,e.keyFile,function(e){return e?console.log(e):void window.setTimeout(window.location.reload.bind(window.location,!0),3e3)}):console.log("Key not set"):console.log("Certificate not set")},o.onConfig(function(){e.tokenInUse=o._token,o.getApps(function(n,t){n&&console.error("Error loading app list"),e.apps=t,o.getNakedDomain(function(n,o){if(n)return console.error(n);e.nakedDomainApp=null;for(var t=0;t<e.apps.length;t++)if(e.apps[t].id===o){e.nakedDomainApp=e.apps[t];break}e.ready=!0})})})}]),angular.module("Application").controller("GraphsController",["$scope","$location","Client",function(e,n,o){function t(e,n){var o=[];n&&n.datapoints&&(o=n.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var t=new Rickshaw.Graph({element:document.querySelector("#"+e+"CpuChart"),renderer:"area",width:580,height:250,min:0,max:100,series:[{color:"steelblue",data:o,name:"cpu"}]});new Rickshaw.Graph.Axis.Time({graph:t}),new Rickshaw.Graph.Axis.Y({graph:t,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"CpuYAxis")}),new Rickshaw.Graph.HoverDetail({graph:t,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o).toFixed(2)+"%<br>";return r}})}t.render()}function r(e,n,o){var t=[],r=[];n&&n.datapoints&&(t=n.datapoints.map(function(e){return{y:e[0],x:e[1]}})),o&&o.datapoints&&(r=o.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var i=new Rickshaw.Graph({element:document.querySelector("#"+e+"NetworkChart"),renderer:"area",width:580,height:250,series:[{color:"steelblue",data:t,name:"tx"},{color:"green",data:r,name:"rx"}]});new Rickshaw.Graph.Axis.Time({graph:i}),new Rickshaw.Graph.Axis.Y({graph:i,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"NetworkYAxis")}),new Rickshaw.Graph.HoverDetail({graph:i,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o/1024).toFixed(2)+"KB<br>";return r}})}i.render()}function i(e,n,o){var t=[],r=[];n&&n.datapoints&&(t=n.datapoints.map(function(e){return{y:e[0],x:e[1]}})),o&&o.datapoints&&(r=o.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var i=new Rickshaw.Graph({element:document.querySelector("#"+e+"DiskChart"),renderer:"area",width:580,height:250,min:0,max:32212254720,series:[{color:"steelblue",data:t,name:"apps"},{color:"green",data:r,name:"data"}]});new Rickshaw.Graph.Axis.Time({graph:i}),new Rickshaw.Graph.Axis.Y({graph:i,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"DiskYAxis")}),new Rickshaw.Graph.HoverDetail({graph:i,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o/1073741824).toFixed(2)+"GB<br>";return r}}),new Rickshaw.Graph.Legend({graph:i,element:document.getElementById(e+"DiskLegend")})}i.render()}o.getUserInfo().admin||n.path("/"),e.activeTab="day";var a="transformNull(scale(divideSeries(sumSeries(collectd.localhost.cpu-0.cpu-system,collectd.localhost.cpu-0.cpu-nice,collectd.localhost.cpu-0.cpu-user),sumSeries(collectd.localhost.cpu-0.cpu-idle,collectd.localhost.cpu-0.cpu-system,collectd.localhost.cpu-0.cpu-nice,collectd.localhost.cpu-0.cpu-user,collectd.localhost.cpu-0.cpu-wait)), 100), 0)",s="transformNull(collectd.localhost.interface-eth0.if_octets.tx, 0)",l="transformNull(collectd.localhost.interface-eth0.if_octets.rx, 0)",p="transformNull(collectd.localhost.df-loop0.df_complex-used, 0)",c="transformNull(collectd.localhost.df-loop1.df_complex-used, 0)";e.updateGraphs=function(){var n=e.activeTab,u="-24hours";switch(n){case"day":u="-24hours";break;case"month":u="-1month";break;case"year":u="-1year";break;default:console.log("internal errror")}o.graphs([a,s,l,p,c],u,function(e,o){return e?console.log(e):(t(n,o[0]),r(n,o[1],o[2]),void i(n,o[3],o[4]))})},o.onReady(e.updateGraphs)}]),angular.module("Application").controller("SecurityController",["$scope","Client",function(e,n){e.activeClients=[],e.tokenInUse=null,e.ready=!1,e.removeAccessTokens=function(e,o){e._busy=!0,n.delTokensByClientId(e.id,function(n){return n?console.error(n):($(o.target).addClass("disabled"),void(e._busy=!1))})},n.onReady(function(){e.tokenInUse=n._token,n.getOAuthClients(function(n,o){return n?console.error(n):(e.activeClients=o,void(e.ready=!0))})})}]),angular.module("Application").controller("UserPasswordController",["$scope","$routeParams","$location","Client",function(e,n,o,t){t.getUserInfo().admin||o.path("/"),e.active=!1,e.currentPassword="",e.newPassword="",e.repeatPassword="",e.validationClass={},e.submit=function(){return e.validationClass.currentPassword="",e.validationClass.newPassword="",e.validationClass.repeatPassword="",e.newPassword!==e.repeatPassword?(document.getElementById("inputRepeatPassword").focus(),e.validationClass.repeatPassword="has-error",void(e.repeatPassword="")):(e.active=!0,void t.changePassword(e.currentPassword,e.newPassword,function(n){n&&403===n.statusCode?(document.getElementById("inputCurrentPassword").focus(),e.validationClass.currentPassword="has-error",e.currentPassword="",e.newPassword="",e.repeatPassword=""):n?console.error("Unable to change password.",n):window.history.back(),e.active=!1}))},e.cancel=function(){window.history.back()},document.getElementById("inputCurrentPassword").focus()}]),angular.module("Application").controller("UsersController",["$scope","$location","Client",function(e,n,o){function t(){o.listUsers(function(n,o){return n?console.error("Unable to get user listing.",n):(e.users=o.users,void(e.ready=!0))})}o.getUserInfo().admin||n.path("/"),e.ready=!1,e.users=[],e.userInfo=o.getUserInfo(),e.userremove={busy:!1,error:{},userInfo:{},username:"",password:""},e.useradd={busy:!1,alreadyTaken:!1,error:{},username:"",email:""},e.isMe=function(e){return e.username===o.getUserInfo().username},e.isAdmin=function(e){return!!e.admin},e.toggleAdmin=function(e){o.setAdmin(e.username,!e.admin,function(n){return n?console.error(n):void(e.admin=!e.admin)})},e.doAdd=function(){e.useradd.alreadyTaken="",e.useradd.error.username=null,e.useradd.error.email=null,o.createUser(e.useradd.username,e.useradd.email,function(n){if(n&&409===n.statusCode)return e.useradd.alreadyTaken=e.username,console.error("Username already taken");if(n&&400===n.statusCode){if(-1!==n.message.indexOf("email"))return e.useradd.error.email="Invalid Email",void(e.useradd.email="");if(-1!==n.message.indexOf("username"))return e.useradd.error.username="Invalid Username",void(e.useradd.username="")}else n&&console.error("Unable to create user.",n),t(),$("#userAddModal").modal("hide")})},e.showUserRemove=function(n){e.userremove.error.username=null,e.userremove.error.password=null,e.userremove.userInfo=n,$("#userRemoveModal").modal("show")},e.doUserRemove=function(n){return e.userremove.error.username=null,e.userremove.error.password=null,e.userremove.username!==e.userremove.userInfo.username?(e.userremove.error.username="Username does not match",void(e.userremove.username="")):void o.removeUser(e.userremove.username,e.userremove.password,function(o){return o&&403===o.statusCode?(e.userremove.error.password="Incorrect password",void(e.userremove.password="")):o?console.error("Unable to delete user.",o):(e.userremove.userInfo={},e.userremove.username="",e.userremove.password="",n.$setPristine(),n.$setUntouched(),$("#userRemoveModal").modal("hide"),void t())})},t()}]);
//# sourceMappingURL=data:application/json;base64,