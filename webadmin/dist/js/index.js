"use strict";var app=angular.module("Application",["ngRoute","ngAnimate","angular-md5"]);app.config(["$routeProvider",function(e){e.when("/",{redirectTo:"/apps"}).when("/dashboard",{controller:"DashboardController",templateUrl:"views/dashboard.html"}).when("/usercreate",{controller:"UserCreateController",templateUrl:"views/usercreate.html"}).when("/userpassword",{controller:"UserPasswordController",templateUrl:"views/userpassword.html"}).when("/userlist",{controller:"UserListController",templateUrl:"views/userlist.html"}).when("/appstore",{controller:"AppStoreController",templateUrl:"views/appstore.html"}).when("/apps",{controller:"AppListController",templateUrl:"views/applist.html"}).when("/app/:appStoreId/install",{controller:"AppInstallController",templateUrl:"views/appinstall.html"}).when("/app/:appId/configure",{controller:"AppConfigureController",templateUrl:"views/appconfigure.html"}).when("/app/:appId/details",{controller:"AppDetailsController",templateUrl:"views/appdetails.html"}).when("/dns",{controller:"DnsController",templateUrl:"views/dns.html"}).when("/account",{controller:"AccountController",templateUrl:"views/account.html"}).when("/graphs",{controller:"GraphsController",templateUrl:"views/graphs.html"}).when("/security",{controller:"SecurityController",templateUrl:"views/security.html"}).otherwise({redirectTo:"/"})}]),app.filter("installationActive",function(){return function(e){return"error"===e?!1:"installed"===e?!1:!0}}),app.filter("installationStateLabel",function(){return function(e){return"error"===e?"Error":"subdomain_error"===e?"Error":"installed"===e?"Installed":"downloading_image"===e?"Downloading":"pending_install"===e?"Installing":"pending_uninstall"===e?"Uninstalling":"creating_container"===e?"Container":"downloading_manifest"===e?"Manifest":"creating_volume"===e?"Volume":"registering_subdomain"===e?"Subdomain":"allocated_oauth_credentials"===e?"OAuth":e}}),app.filter("accessRestrictionLabel",function(){return function(e){return""===e?"public":"roleUser"===e?"private":"roleAdmin"===e?"private (Admins only)":e}}),app.directive("laterName",function(){return{restrict:"A",require:["?ngModel","^?form"],link:function(e,n,o,t){o.$set("name",o.laterName);var r=t[0],i=t[1];r&&i&&(r.$name=o.name,i.$addControl(r),e.$on("$destroy",function(){i.$removeControl(r)}))}}}),angular.module("Application").service("Client",["$http","md5",function(e,n){function o(e,n){Error.call(this),this.name=this.constructor.name,this.statusCode=e,this.message="string"==typeof n?n:JSON.stringify(n)}function t(e){return function(n,t){return 401===t?i.logout():void e(new o(t,n))}}function r(){this._ready=!1,this._configListener=[],this._readyListener=[],this._userInfo={username:null,email:null,admin:!1},this._token=null,this._clientId="cid-webadmin",this._clientSecret="unused",this._config={apiServerOrigin:null,webServerOrigin:null,fqdn:null,ip:null,revision:null,update:null,isDev:!1,progress:{}},this._installedApps=[],this.setToken(localStorage.token)}var i=null;return r.prototype.setReady=function(){this._ready||(this._ready=!0,this._readyListener.forEach(function(e){e()}))},r.prototype.onReady=function(e){this._ready&&e(),this._readyListener.push(e)},r.prototype.onConfig=function(e){this._configListener.push(e),e(this._config)},r.prototype.setUserInfo=function(e){this._userInfo.username=e.username,this._userInfo.email=e.email,this._userInfo.admin=!!e.admin,this._userInfo.gravatar="https://www.gravatar.com/avatar/"+n.createHash(e.email.toLowerCase())+".jpg?s=24&d=mm",this._userInfo.gravatarHuge="https://www.gravatar.com/avatar/"+n.createHash(e.email.toLowerCase())+".jpg?s=128&d=mm"},r.prototype.setConfig=function(e){this._config.apiServerOrigin=e.apiServerOrigin,this._config.webServerOrigin=e.webServerOrigin,this._config.version=e.version,this._config.fqdn=e.fqdn,this._config.ip=e.ip,this._config.revision=e.revision,this._config.update=e.update,this._config.isDev=e.isDev,this._config.progress=e.progress;var n=this;this._configListener.forEach(function(e){e(n._config)})},r.prototype.getInstalledApps=function(){return this._installedApps},r.prototype.getUserInfo=function(){return this._userInfo},r.prototype.getConfig=function(){return this._config},r.prototype.setToken=function(n){e.defaults.headers.common.Authorization="Bearer "+n,n?localStorage.token=n:localStorage.removeItem("token"),this._token=n},r.prototype.config=function(n){e.get("/api/v1/cloudron/config").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.userInfo=function(n){e.get("/api/v1/profile").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.installApp=function(n,r,i,a,s,p){var l=this,c={appStoreId:n,version:r,password:i,location:s.location,portBindings:s.portBindings,accessRestriction:s.accessRestriction};e.post("/api/v1/apps/install",c).success(function(e,n){return 202!==n||"object"!=typeof e?p(new o(n,e)):(e.manifest={title:a},l._installedApps.push(e),void p(null,e.id))}).error(t(p))},r.prototype.uninstallApp=function(n,r,i){var a={password:r};e.post("/api/v1/apps/"+n+"/uninstall",a).success(function(e,n){return 202!==n?i(new o(n,e)):void i(null)}).error(t(i))},r.prototype.configureApp=function(n,r,i,a){var s={appId:n,password:r,location:i.location,portBindings:i.portBindings,accessRestriction:i.accessRestriction};e.post("/api/v1/apps/"+n+"/configure",s).success(function(e,n){return 202!==n?a(new o(n,e)):void a(null)}).error(t(a))},r.prototype.updateApp=function(n,r,i,a){e.post("/api/v1/apps/"+n+"/update",{version:r,password:i}).success(function(e,n){return 202!==n?a(new o(n,e)):void a(null)}).error(t(a))},r.prototype.startApp=function(n,r){var i={};e.post("/api/v1/apps/"+n+"/start",i).success(function(e,n){return 202!==n?r(new o(n,e)):void r(null)}).error(t(r))},r.prototype.stopApp=function(n,r){var i={};e.post("/api/v1/apps/"+n+"/stop",i).success(function(e,n){return 202!==n?r(new o(n,e)):void r(null)}).error(t(r))},r.prototype.version=function(n){e.get("/api/v1/cloudron/status").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.isServerFirstTime=function(n){e.get("/api/v1/cloudron/status").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,!e.activated)}).error(t(n))},r.prototype.getNakedDomain=function(n){e.get("/api/v1/settings/naked_domain").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e.appid)}).error(t(n))},r.prototype.setNakedDomain=function(n,r){e.post("/api/v1/settings/naked_domain",{appid:n}).success(function(e,n){return 204!==n?r(new o(n)):void r(null)}).error(t(r))},r.prototype.getApps=function(n){e.get("/api/v1/apps").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e.apps)}).error(t(n))},r.prototype.getApp=function(e,n){var o=null;return this._installedApps.some(function(n){return n.id===e?(o=n,!0):!1}),o?n(null,o):n(new Error("App not found"))},r.prototype.getAppLogStream=function(e){var n=new EventSource("/api/v1/apps/"+e+"/logstream");return n},r.prototype.getAppLogUrl=function(e){return"/api/v1/apps/"+e+"/logs?access_token="+this._token},r.prototype.setAdmin=function(n,r,i){var a={username:n,admin:r};e.post("/api/v1/users/"+n+"/admin",a).success(function(e,n){return 204!==n?i(new o(n,e)):void i(null)}).error(t(i))},r.prototype.createAdmin=function(n,r,i,a,s){var p={username:n,password:r,email:i},l=this;e.post("/api/v1/cloudron/activate?setupToken="+a,p).success(function(e,t){return 201!==t||"object"!=typeof e?s(new o(t,e)):(l.setToken(e.token),l.setUserInfo({username:n,email:i,admin:!0}),void s(null,e.activated))}).error(t(s))},r.prototype.listUsers=function(n){e.get("/api/v1/users").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.getOAuthClients=function(n){e.get("/api/v1/oauth/clients").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e.clients)}).error(t(n))},r.prototype.delTokensByClientId=function(n,r){e["delete"]("/api/v1/oauth/clients/"+n+"/tokens").success(function(e,n){return 204!==n?r(new o(n,e)):void r(null)}).error(t(r))},r.prototype.update=function(n){e.get("/api/v1/cloudron/update").success(function(e,t){return 202!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.reboot=function(n){e.get("/api/v1/cloudron/reboot").success(function(e,t){return 202!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.backup=function(n){e.post("/api/v1/cloudron/backups").success(function(e,t){return 202!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.setCertificate=function(n,r,i){console.log("will set certificate");var a=new FormData;a.append("certificate",n),a.append("key",r),e.post("/api/v1/cloudron/certificate",a,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).success(function(e,n){return 202!==n?i(new o(n,e)):void i(null)}).error(t(i))},r.prototype.graphs=function(n,r,i){var a={params:{target:n,format:"json",from:r}};e.get("/api/v1/cloudron/graphs",a).success(function(e,n){return 200!==n||"object"!=typeof e?i(new o(n,e)):void i(null,e)}).error(t(i))},r.prototype.createUser=function(n,r,i){var a={username:n,email:r};e.post("/api/v1/users",a).success(function(e,n){return 201!==n||"object"!=typeof e?i(new o(n,e)):void i(null,e)}).error(t(i))},r.prototype.removeUser=function(n,r,i){var a={username:n,password:r};e({method:"DELETE",url:"/api/v1/users/"+n,data:a,headers:{"Content-Type":"application/json"}}).success(function(e,n){return 204!==n?i(new o(n,e)):void i(null)}).error(t(i))},r.prototype.changePassword=function(n,r,i){var a={password:n,newPassword:r};e.post("/api/v1/users/"+this._userInfo.username+"/password",a).success(function(e,n){return 204!==n||"object"!=typeof e?i(new o(n,e)):void i(null,e)}).error(t(i))},r.prototype.refreshConfig=function(e){var n=this;e="function"==typeof e?e:function(){},this.config(function(o,t){return o?e(o):(n.setConfig(t),void e(null))})},r.prototype.refreshInstalledApps=function(e){var n=this;e="function"==typeof e?e:function(){},this.getApps(function(o,t){if(o)return e(o);t.forEach(function(e){for(var o=!1,t=0;t<n._installedApps.length;++t)if(n._installedApps[t].id===e.id){o=t;break}o!==!1?angular.copy(e,n._installedApps[o]):n._installedApps.push(e)});for(var r=n._installedApps.length-1;r>=0;--r)t.some(function(e){return e.id===n._installedApps[r].id})||n._installedApps.splice(r,1);e(null)})},r.prototype.logout=function(){this.setToken(null),this._userInfo={},window.location.href="/api/v1/session/logout"},r.prototype.exchangeCodeForToken=function(n,r){var i={grant_type:"authorization_code",code:n,redirect_uri:window.location.origin,client_id:this._clientId,client_secret:this._clientSecret};e.post("/api/v1/oauth/token?response_type=token&client_id="+this._clientId,i).success(function(e,n){return 200!==n||"object"!=typeof e?r(new o(n,e)):void r(null,e.access_token)}).error(t(r))},i=new r}]),angular.module("Application").service("AppStore",["$http","Client",function(e,n){function o(e,n){Error.call(this),this.name=this.constructor.name,this.statusCode=e,this.message="string"==typeof n?n:JSON.stringify(n)}function t(){this._appsCache={}}return t.prototype.getApps=function(t){if(null===n.getConfig().apiServerOrigin)return t(new o(420,"Enhance Your Calm"));var r=this;e.get(n.getConfig().apiServerOrigin+"/api/v1/appstore/apps",{params:{boxVersion:n.getConfig().version}}).success(function(e,n){return 200!==n?t(new o(n,e)):(e.apps.forEach(function(e){r._appsCache[e.id]||(r._appsCache[e.id]=e)}),t(null,r._appsCache))}).error(function(e,n){return t(new o(n,e))})},t.prototype.getAppById=function(e,n){if(e in this._appsCache)return n(null,this._appsCache[e]);var t=this;this.getApps(function(r){return r?n(r):e in t._appsCache?n(null,t._appsCache[e]):void n(new o(404,"Not found"))})},t.prototype.getManifest=function(t,r){if(null===n.getConfig().apiServerOrigin)return r(new o(420,"Enhance Your Calm"));var i=n.getConfig().apiServerOrigin+"/api/v1/appstore/apps/"+t+"/manifest";console.log("Getting the manifest of ",t,i),e.get(i).success(function(e,n){return 200!==n?r(new o(n,e)):r(null,e)}).error(function(e,n){return r(new o(n,e))})},new t}]),angular.module("Application").controller("MainController",["$scope","$route","$interval","Client",function(e,n,o,t){e.initialized=!1,e.userInfo=t.getUserInfo(),e.config={},e.isActive=function(e){return n.current?0===n.current.$$route.originalPath.indexOf(e):!1},e.logout=function(n){n.stopPropagation(),e.initialized=!1,t.logout()},e.login=function(){var e=window.location.origin+"/login_callback.html",n="root,profile,apps,roleAdmin";window.location.href="/api/v1/oauth/dialog/authorize?response_type=code&client_id="+t._clientId+"&redirect_uri="+e+"&scope="+n},e.setup=function(){window.location.href="/error.html?errorCode=1"},e.error=function(e){console.error(e),window.location.href="/error.html"},e.update=function(){$("#updateModal").modal("hide"),e.initialized=!1,t.update(function(e){e&&console.error(e),window.location.href="/update.html"})},e.backup=function(){$("#backupProgressModal").modal("show"),e.initialized=!1,t.backup(function(n){function o(){t.version(function(n){return n?window.setTimeout(o,1e3):($("#backupProgressModal").modal("hide"),void(e.initialized=!0))})}n&&console.error(n),window.setTimeout(o,5e3)})},t.isServerFirstTime(function(n,r){return n?e.error(n):r?e.setup():void(localStorage.token?t.refreshConfig(function(n){return n&&401===n.statusCode?e.login():n?e.error(n):(t.getConfig().progress.update&&(window.location.href="/update.html"),void t.userInfo(function(n,r){return n?e.error(n):(t.setUserInfo(r),void t.refreshInstalledApps(function(n){if(n)return e.error(n);var r=o(t.refreshInstalledApps.bind(t),2e3),i=o(t.refreshConfig.bind(t),5e3);e.$on("$destroy",function(){o.cancel(r),o.cancel(i)}),t.setReady(),e.config=t.getConfig(),e.initialized=!0}))}))}):e.login())}),t.onConfig(function(e){e.progress.update&&(window.location.href="/update.html")})}]),angular.module("Application").controller("AccountController",["$scope","$location","Client",function(e,n,o){e.user=o.getUserInfo(),e.config=o.getConfig(),e.changePassword=function(){n.path("/userpassword")}}]),angular.module("Application").controller("AppConfigureController",["$scope","$routeParams","$location","Client",function(e,n,o,t){t.getUserInfo().admin||o.path("/"),e.app=null,e.password="",e.location="",e.accessRestriction="",e.disabled=!1,e.error={},e.domain="",e.portBindings={},e.configureApp=function(){e.error.name=null,e.error.password=null;var o={};for(var r in e.portBindings)o[r]=e.portBindings[r].hostPort;t.configureApp(n.appId,e.password,{location:e.location,portBindings:o,accessRestriction:e.accessRestriction},function(o){return o?(403===o.statusCode?(e.error.password="Wrong password provided.",e.password=""):e.error.name="App with the name "+e.app.name+" cannot be configured.",void(e.disabled=!1)):void window.location.replace("#/app/"+n.appId+"/details")})},e.cancel=function(){window.history.back()},t.onReady(function(){e.domain=t.getConfig().fqdn,t.getApp(n.appId,function(n,o){if(e.error=n||{},!n){e.app=o,e.location=o.location,e.portBindings=o.manifest.tcpPorts,e.accessRestriction=o.accessRestriction;for(var t in e.portBindings)e.portBindings[t].hostPort=o.portBindings[t]}})}),document.getElementById("inputLocation").focus()}]),angular.module("Application").controller("AppDetailsController",["$scope","$http","$routeParams","$location","Client",function(e,n,o,t,r){function i(e,n){var o=[];n&&n.datapoints&&(o=n.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var t=new Rickshaw.Graph({element:document.querySelector("#"+e+"CpuChart"),renderer:"area",width:580,height:250,min:0,max:100,series:[{color:"steelblue",data:o||[],name:"cpu"}]});new Rickshaw.Graph.Axis.Time({graph:t}),new Rickshaw.Graph.Axis.Y({graph:t,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"CpuYAxis")}),new Rickshaw.Graph.HoverDetail({graph:t,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o).toFixed(2)+"%<br>";return r}})}t.render()}function a(e,n){var o=[];n&&n.datapoints&&(o=n.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var t=new Rickshaw.Graph({element:document.querySelector("#"+e+"MemoryChart"),renderer:"area",width:580,height:250,min:0,max:2147483648,series:[{color:"steelblue",data:o||[],name:"memory"}]});new Rickshaw.Graph.Axis.Time({graph:t}),new Rickshaw.Graph.Axis.Y({graph:t,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"MemoryYAxis")}),new Rickshaw.Graph.HoverDetail({graph:t,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o/1048576).toFixed(2)+"MB<br>";return r}})}t.render()}function s(e,n){var o=[];n&&n.datapoints&&(o=n.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var t=new Rickshaw.Graph({element:document.querySelector("#"+e+"DiskChart"),renderer:"area",width:580,height:250,min:0,max:32212254720,series:[{color:"steelblue",data:o||[],name:"apps"}]});new Rickshaw.Graph.Axis.Time({graph:t}),new Rickshaw.Graph.Axis.Y({graph:t,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"DiskYAxis")}),new Rickshaw.Graph.HoverDetail({graph:t,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o/1048576).toFixed(2)+"MB<br>";return r}}),new Rickshaw.Graph.Legend({graph:t,element:document.getElementById(e+"DiskLegend")})}t.render()}r.getUserInfo().admin||t.path("/"),e.app={},e.initialized=!1,e.updateAvailable=!1,e.activeTab="day",e.updateVersion=null,e.password="",e.passwordWrong=!1,e.startApp=function(){r.startApp(o.appId,function(e){e&&console.error(e)})},e.stopApp=function(){r.stopApp(o.appId,function(e){e&&console.error(e)})},e.updateApp=function(){e.passwordWrong=!1,r.updateApp(o.appId,e.updateVersion,e.password,function(n){n&&403===n.statusCode?(e.password="",e.passwordWrong=!0,$("#inputPasswordUpdate").focus()):n?console.error(n):($("#updateAppModal").modal("hide"),e.updateAvailable=!1,e.updateVersion=null,e.password="")})},e.uninstallApp=function(){e.passwordWrong=!1,r.uninstallApp(o.appId,e.password,function(n){n&&403===n.statusCode?(e.password="",e.passwordWrong=!0,$("#inputPasswordUninstall").focus()):n?console.error(n):($("#uninstallAppModal").modal("hide"),e.password="",window.location.href="#/")})},e.updateGraphs=function(){var n="nonNegativeDerivative(sumSeries(collectd.localhost.table-"+e.app.id+"-cpu.gauge-user,collectd.localhost.table-"+e.app.id+"-cpu.gauge-system))",o="collectd.localhost.table-"+e.app.id+"-memory.gauge-max_usage_in_bytes",t="collectd.localhost.filecount-"+e.app.id+"-appdata.bytes",p=e.activeTab,l="-24hours";switch(p){case"day":l="-24hours";break;case"month":l="-1month";break;case"year":l="-1year";break;default:console.log("internal errror")}r.graphs([n,o,t],l,function(e,n){return e?console.log(e):(i(p,n[0]),a(p,n[1]),void s(p,n[2]))})},r.onReady(function(){r.getApp(o.appId,function(n,o){if(n)return console.error(n),void(window.location.href="#/");if(e.app=o,e.appLogUrl=r.getAppLogUrl(o.id),r.getConfig().update&&r.getConfig().update.apps)for(var t=r.getConfig().update.apps,i=0;i<t.length;i++)t[i].appId===e.app.appStoreId&&t[i].version!==e.app.version&&(e.updateAvailable=!0,e.updateVersion=t[i].version);e.updateGraphs(),e.initialized=!0})})}]),angular.module("Application").controller("AppInstallController",["$scope","$routeParams","$location","Client","AppStore","$timeout",function(e,n,o,t,r,i){t.getUserInfo().admin||o.path("/"),e.app=null,e.password="",e.location="",e.accessRestriction="",e.disabled=!1,e.error={},e.domain="",e.version=null,e.portBindings={},e.hostPortMin=1025,e.hostPortMax=9999,t.onReady(function(){e.domain=t.getConfig().fqdn,r.getAppById(n.appStoreId,function(n,o){e.error=n||{},n||(e.app=o)}),r.getManifest(n.appStoreId,function(n,o){if(e.error=n||{},!n){e.version=o.version,e.portBindings=o.tcpPorts,e.accessRestriction=o.accessRestriction||"";for(var t in e.portBindings)e.portBindings[t].hostPort=parseInt(t)}})}),e.installApp=function(){e.error.name=null,e.error.password=null;var o={};for(var r in e.portBindings)o[r]=e.portBindings[r].hostPort;t.installApp(n.appStoreId,e.version,e.password,e.app.title,{location:e.location,portBindings:o,accessRestriction:e.accessRestriction},function(n,o){return n?(409===n.statusCode?e.error.name="Application already exists.":403===n.statusCode?(e.error.password="Wrong password provided.",e.password=""):e.error.name="App with the name "+e.app.name+" cannot be installed.",void(e.disabled=!1)):void window.location.replace("#/app/"+o+"/details")})},e.cancel=function(){window.history.back()},e.$on("$viewContentLoaded",function(){i(function(){$("input[autofocus]:visible:first").focus()},1e3)})}]),angular.module("Application").controller("AppListController",["$scope","$location","Client",function(e,n,o){e.installedApps=o.getInstalledApps(),e.config=o.getConfig(),e.appconfigure={busy:!1,error:{},app:{},location:"",password:"",portBindings:{},accessRestriction:""},e.showConfigure=function(n){e.appconfigure.app=n,e.appconfigure.location=n.location,e.appconfigure.portBindings=n.manifest.tcpPorts,e.appconfigure.accessRestriction=n.accessRestriction;for(var o in e.appconfigure.portBindings)e.appconfigure.portBindings[o].hostPort=n.portBindings[o];$("#appConfigureModal").modal("show")},e.doConfigure=function(){e.appconfigure.busy=!0,e.appconfigure.error.name=null,e.appconfigure.error.password=null;var n={};for(var t in e.appconfigure.portBindings)n[t]=e.appconfigure.portBindings[t].hostPort;o.configureApp(e.appconfigure.app.id,e.appconfigure.password,{location:e.appconfigure.location,portBindings:n,accessRestriction:e.appconfigure.accessRestriction},function(n){return n?(403===n.statusCode?(e.appconfigure.error.password="Wrong password provided.",e.appconfigure.password=""):e.appconfigure.error.name="App with the name "+e.appconfigure.app.name+" cannot be configured.",void(e.appconfigure.busy=!1)):(e.appconfigure.password="",e.appconfigure.busy=!1,void $("#appConfigureModal").modal("hide"))})},e.cancel=function(){window.history.back()}}]),angular.module("Application").controller("AppStoreController",["$scope","$location","$timeout","Client","AppStore",function(e,n,o,t,r){function i(){e.ready=!1,r.getApps(function(n,t){return n?(console.error(n),o(i,1e3)):(e.apps=t,void(e.ready=!0))})}t.getUserInfo().admin||n.path("/"),e.ready=!1,e.apps=[],e.config=t.getConfig(),e.appinstall={busy:!1,error:{},app:{},location:"",password:"",portBindings:{},accessRestriction:""},e.showInstall=function(n){e.appinstall.app=n,e.appinstall.location=n.location,e.appinstall.portBindings=n.manifest.tcpPorts,e.appinstall.accessRestriction=n.accessRestriction;for(var o in e.appinstall.portBindings)e.appinstall.portBindings[o].hostPort=n.portBindings[o];$("#appInstallModal").modal("show")},e.doInstall=function(){e.appinstall.busy=!0,e.appinstall.error.name=null,e.appinstall.error.password=null;var n={};for(var o in e.appinstall.portBindings)n[o]=e.appinstall.portBindings[o].hostPort;t.installApp(e.appinstall.app.id,e.app.version,e.appinstall.password,e.appinstall.app.title,{location:e.appinstall.location,portBindings:n,accessRestriction:e.appinstall.accessRestriction},function(n){return n?(409===n.statusCode?e.appinstall.error.name="Application already exists.":403===n.statusCode?(e.appinstall.error.password="Wrong password provided.",e.appinstall.password=""):e.appinstall.error.name="App with the name "+e.appinstall.app.name+" cannot be installed.",void(e.appinstall.busy=!1)):(e.appinstall.password="",e.appinstall.busy=!1,void $("#appInstallModal").modal("hide"))})},i()}]),angular.module("Application").controller("DashboardController",function(){}),angular.module("Application").controller("DnsController",["$scope","$location","Client",function(e,n,o){o.getUserInfo().admin||n.path("/"),e.ready=!1,e.user=o.getUserInfo(),e.config=o.getConfig(),e.nakedDomainApp=null,e.certificateFile=null,e.certificateFileName="",e.keyFile=null,e.keyFileName="",e.setNakedDomain=function(){var n=e.nakedDomainApp?e.nakedDomainApp.id:"admin";o.setNakedDomain(n,function(e){return e?console.error("Error setting naked domain",e):void 0})},e.backup=function(){$("#backupProgressModal").modal("show"),e.$parent.initialized=!1,o.backup(function(n){function t(){o.version(function(n){return n?window.setTimeout(t,1e3):($("#backupProgressModal").modal("hide"),void(e.$parent.initialized=!0))})}n&&console.error(n),window.setTimeout(t,5e3)})},e.update=function(){$("#updateModal").modal("hide"),e.$parent.initialized=!1,o.update(function(e){e&&console.error(e),window.location.href="/update.html"})},document.getElementById("idCertificate").onchange=function(n){e.$apply(function(){e.certificateFile=n.target.files[0],e.certificateFileName=n.target.files[0].name})},document.getElementById("idKey").onchange=function(n){e.$apply(function(){e.keyFile=n.target.files[0],e.keyFileName=n.target.files[0].name})},e.setCertificate=function(){return console.log("Will set the certificate"),e.certificateFile?e.keyFile?void o.setCertificate(e.certificateFile,e.keyFile,function(e){return e?console.log(e):void window.setTimeout(window.location.reload.bind(window.location,!0),3e3)}):console.log("Key not set"):console.log("Certificate not set")},o.onConfig(function(){e.tokenInUse=o._token,o.getApps(function(n,t){n&&console.error("Error loading app list"),e.apps=t,o.getNakedDomain(function(n,o){if(n)return console.error(n);e.nakedDomainApp=null;for(var t=0;t<e.apps.length;t++)if(e.apps[t].id===o){e.nakedDomainApp=e.apps[t];break}e.ready=!0})})})}]),angular.module("Application").controller("GraphsController",["$scope","$location","Client",function(e,n,o){function t(e,n){var o=[];n&&n.datapoints&&(o=n.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var t=new Rickshaw.Graph({element:document.querySelector("#"+e+"CpuChart"),renderer:"area",width:580,height:250,min:0,max:100,series:[{color:"steelblue",data:o,name:"cpu"}]});new Rickshaw.Graph.Axis.Time({graph:t}),new Rickshaw.Graph.Axis.Y({graph:t,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"CpuYAxis")}),new Rickshaw.Graph.HoverDetail({graph:t,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o).toFixed(2)+"%<br>";return r}})}t.render()}function r(e,n,o){var t=[],r=[];n&&n.datapoints&&(t=n.datapoints.map(function(e){return{y:e[0],x:e[1]}})),o&&o.datapoints&&(r=o.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var i=new Rickshaw.Graph({element:document.querySelector("#"+e+"NetworkChart"),renderer:"area",width:580,height:250,series:[{color:"steelblue",data:t,name:"tx"},{color:"green",data:r,name:"rx"}]});new Rickshaw.Graph.Axis.Time({graph:i}),new Rickshaw.Graph.Axis.Y({graph:i,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"NetworkYAxis")}),new Rickshaw.Graph.HoverDetail({graph:i,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o/1024).toFixed(2)+"KB<br>";return r}})}i.render()}function i(e,n,o){var t=[],r=[];n&&n.datapoints&&(t=n.datapoints.map(function(e){return{y:e[0],x:e[1]}})),o&&o.datapoints&&(r=o.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var i=new Rickshaw.Graph({element:document.querySelector("#"+e+"DiskChart"),renderer:"area",width:580,height:250,min:0,max:32212254720,series:[{color:"steelblue",data:t,name:"apps"},{color:"green",data:r,name:"data"}]});new Rickshaw.Graph.Axis.Time({graph:i}),new Rickshaw.Graph.Axis.Y({graph:i,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"DiskYAxis")}),new Rickshaw.Graph.HoverDetail({graph:i,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o/1073741824).toFixed(2)+"GB<br>";return r}}),new Rickshaw.Graph.Legend({graph:i,element:document.getElementById(e+"DiskLegend")})}i.render()}o.getUserInfo().admin||n.path("/"),e.activeTab="day";var a="transformNull(scale(divideSeries(sumSeries(collectd.localhost.cpu-0.cpu-system,collectd.localhost.cpu-0.cpu-nice,collectd.localhost.cpu-0.cpu-user),sumSeries(collectd.localhost.cpu-0.cpu-idle,collectd.localhost.cpu-0.cpu-system,collectd.localhost.cpu-0.cpu-nice,collectd.localhost.cpu-0.cpu-user,collectd.localhost.cpu-0.cpu-wait)), 100), 0)",s="transformNull(collectd.localhost.interface-eth0.if_octets.tx, 0)",p="transformNull(collectd.localhost.interface-eth0.if_octets.rx, 0)",l="transformNull(collectd.localhost.df-loop0.df_complex-used, 0)",c="transformNull(collectd.localhost.df-loop1.df_complex-used, 0)";e.updateGraphs=function(){var n=e.activeTab,u="-24hours";switch(n){case"day":u="-24hours";break;case"month":u="-1month";break;case"year":u="-1year";break;default:console.log("internal errror")}o.graphs([a,s,p,l,c],u,function(e,o){return e?console.log(e):(t(n,o[0]),r(n,o[1],o[2]),void i(n,o[3],o[4]))})},o.onReady(e.updateGraphs)}]),angular.module("Application").controller("SecurityController",["$scope","Client",function(e,n){e.activeClients=[],e.tokenInUse=null,e.ready=!1,e.removeAccessTokens=function(e,o){e._busy=!0,n.delTokensByClientId(e.id,function(n){return n?console.error(n):($(o.target).addClass("disabled"),void(e._busy=!1))})},n.onReady(function(){e.tokenInUse=n._token,n.getOAuthClients(function(n,o){return n?console.error(n):(e.activeClients=o,void(e.ready=!0))})})}]),angular.module("Application").controller("UserCreateController",["$scope","$routeParams","$location","Client",function(e,n,o,t){t.getUserInfo().admin||o.path("/"),e.disabled=!1,e.username="",e.email="",e.alreadyTaken="",e.submit=function(){e.alreadyTaken="",e.disabled=!0,t.createUser(e.username,e.email,function(n){return n&&409===n.statusCode?(e.alreadyTaken=e.username,console.error("Username already taken")):(n&&console.error("Unable to create user.",n),void(window.location.href="#/userlist"))})},e.cancel=function(){window.history.back()}}]),angular.module("Application").controller("UserListController",["$scope","$location","Client",function(e,n,o){function t(){o.listUsers(function(n,o){return n?console.error("Unable to get user listing.",n):(e.users=o.users,void(e.ready=!0))})}o.getUserInfo().admin||n.path("/"),e.ready=!1,e.users=[],e.userInfo=o.getUserInfo(),e.userDeleteForm={username:"",password:""},e.isMe=function(e){return e.username===o.getUserInfo().username},e.isAdmin=function(e){return!!e.admin},e.toggleAdmin=function(e){o.setAdmin(e.username,!e.admin,function(n){return n?console.error(n):void(e.admin=!e.admin)})},e.deleteUser=function(n){return e.userDeleteForm.username!==n.username?console.error("Username does not match"):void o.removeUser(n.username,e.userDeleteForm.password,function(e){return e&&401===e.statusCode?console.error("Wrong password"):e?console.error("Unable to delete user.",e):($("#userDeleteModal-"+n.username).modal("hide"),void t())})},e.addUser=function(){window.location.href="#/usercreate"},t()}]),angular.module("Application").controller("UserPasswordController",["$scope","$routeParams","$location","Client",function(e,n,o,t){t.getUserInfo().admin||o.path("/"),e.active=!1,e.currentPassword="",e.newPassword="",e.repeatPassword="",e.validationClass={},e.submit=function(){return e.validationClass.currentPassword="",e.validationClass.newPassword="",e.validationClass.repeatPassword="",e.newPassword!==e.repeatPassword?(document.getElementById("inputRepeatPassword").focus(),e.validationClass.repeatPassword="has-error",void(e.repeatPassword="")):(e.active=!0,void t.changePassword(e.currentPassword,e.newPassword,function(n){n&&403===n.statusCode?(document.getElementById("inputCurrentPassword").focus(),e.validationClass.currentPassword="has-error",e.currentPassword="",e.newPassword="",e.repeatPassword=""):n?console.error("Unable to change password.",n):window.history.back(),e.active=!1
}))},e.cancel=function(){window.history.back()},document.getElementById("inputCurrentPassword").focus()}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiY2xpZW50LmpzIiwiYXBwc3RvcmUuanMiLCJtYWluLmpzIiwiYWNjb3VudC5qcyIsImFwcGNvbmZpZ3VyZS5qcyIsImFwcGRldGFpbHMuanMiLCJhcHBpbnN0YWxsLmpzIiwiYXBwbGlzdC5qcyIsImRhc2hib2FyZC5qcyIsImRucy5qcyIsImdyYXBocy5qcyIsInNlY3VyaXR5LmpzIiwidXNlcmNyZWF0ZS5qcyIsInVzZXJsaXN0LmpzIiwidXNlcnBhc3N3b3JkLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJyZWRpcmVjdFRvIiwiY29udHJvbGxlciIsInRlbXBsYXRlVXJsIiwib3RoZXJ3aXNlIiwiZmlsdGVyIiwiaW5wdXQiLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInJlcXVpcmUiLCJsaW5rIiwic2NvcGUiLCJlbGVtIiwiYXR0cnMiLCJjdHJscyIsIiRzZXQiLCJsYXRlck5hbWUiLCJtb2RlbEN0cmwiLCJmb3JtQ3RybCIsIiRuYW1lIiwibmFtZSIsIiRhZGRDb250cm9sIiwiJG9uIiwiJHJlbW92ZUNvbnRyb2wiLCJzZXJ2aWNlIiwiJGh0dHAiLCJtZDUiLCJDbGllbnRFcnJvciIsInN0YXR1c0NvZGUiLCJtZXNzYWdlIiwiRXJyb3IiLCJjYWxsIiwidGhpcyIsImNvbnN0cnVjdG9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlZmF1bHRFcnJvckhhbmRsZXIiLCJjYWxsYmFjayIsImRhdGEiLCJzdGF0dXMiLCJjbGllbnQiLCJsb2dvdXQiLCJDbGllbnQiLCJfcmVhZHkiLCJfY29uZmlnTGlzdGVuZXIiLCJfcmVhZHlMaXN0ZW5lciIsIl91c2VySW5mbyIsInVzZXJuYW1lIiwiZW1haWwiLCJhZG1pbiIsIl90b2tlbiIsIl9jbGllbnRJZCIsIl9jbGllbnRTZWNyZXQiLCJfY29uZmlnIiwiYXBpU2VydmVyT3JpZ2luIiwid2ViU2VydmVyT3JpZ2luIiwiZnFkbiIsImlwIiwicmV2aXNpb24iLCJ1cGRhdGUiLCJpc0RldiIsInByb2dyZXNzIiwiX2luc3RhbGxlZEFwcHMiLCJzZXRUb2tlbiIsImxvY2FsU3RvcmFnZSIsInRva2VuIiwicHJvdG90eXBlIiwic2V0UmVhZHkiLCJmb3JFYWNoIiwib25SZWFkeSIsInB1c2giLCJvbkNvbmZpZyIsInNldFVzZXJJbmZvIiwidXNlckluZm8iLCJncmF2YXRhciIsImNyZWF0ZUhhc2giLCJ0b0xvd2VyQ2FzZSIsImdyYXZhdGFySHVnZSIsInNldENvbmZpZyIsInZlcnNpb24iLCJ0aGF0IiwiZ2V0SW5zdGFsbGVkQXBwcyIsImdldFVzZXJJbmZvIiwiZ2V0Q29uZmlnIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwiQXV0aG9yaXphdGlvbiIsInJlbW92ZUl0ZW0iLCJnZXQiLCJzdWNjZXNzIiwiZXJyb3IiLCJpbnN0YWxsQXBwIiwiaWQiLCJwYXNzd29yZCIsInRpdGxlIiwiYXBwU3RvcmVJZCIsImxvY2F0aW9uIiwicG9ydEJpbmRpbmdzIiwiYWNjZXNzUmVzdHJpY3Rpb24iLCJwb3N0IiwibWFuaWZlc3QiLCJ1bmluc3RhbGxBcHAiLCJhcHBJZCIsImNvbmZpZ3VyZUFwcCIsInVwZGF0ZUFwcCIsInN0YXJ0QXBwIiwic3RvcEFwcCIsImlzU2VydmVyRmlyc3RUaW1lIiwiYWN0aXZhdGVkIiwiZ2V0TmFrZWREb21haW4iLCJhcHBpZCIsInNldE5ha2VkRG9tYWluIiwiZ2V0QXBwcyIsImFwcHMiLCJnZXRBcHAiLCJhcHBGb3VuZCIsInNvbWUiLCJnZXRBcHBMb2dTdHJlYW0iLCJzb3VyY2UiLCJFdmVudFNvdXJjZSIsImdldEFwcExvZ1VybCIsInNldEFkbWluIiwicGF5bG9hZCIsImNyZWF0ZUFkbWluIiwic2V0dXBUb2tlbiIsImxpc3RVc2VycyIsImdldE9BdXRoQ2xpZW50cyIsImNsaWVudHMiLCJkZWxUb2tlbnNCeUNsaWVudElkIiwicmVib290IiwiYmFja3VwIiwic2V0Q2VydGlmaWNhdGUiLCJjZXJ0aWZpY2F0ZUZpbGUiLCJrZXlGaWxlIiwiY29uc29sZSIsImxvZyIsImZkIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJDb250ZW50LVR5cGUiLCJ1bmRlZmluZWQiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiaWRlbnRpdHkiLCJncmFwaHMiLCJ0YXJnZXRzIiwiZnJvbSIsInBhcmFtcyIsInRhcmdldCIsImZvcm1hdCIsImNyZWF0ZVVzZXIiLCJyZW1vdmVVc2VyIiwibWV0aG9kIiwidXJsIiwiY2hhbmdlUGFzc3dvcmQiLCJjdXJyZW50UGFzc3dvcmQiLCJuZXdQYXNzd29yZCIsInJlZnJlc2hDb25maWciLCJyZXN1bHQiLCJyZWZyZXNoSW5zdGFsbGVkQXBwcyIsImZvdW5kIiwiaSIsImxlbmd0aCIsImNvcHkiLCJzcGxpY2UiLCJ3aW5kb3ciLCJocmVmIiwiZXhjaGFuZ2VDb2RlRm9yVG9rZW4iLCJhdXRoQ29kZSIsImdyYW50X3R5cGUiLCJjb2RlIiwicmVkaXJlY3RfdXJpIiwib3JpZ2luIiwiY2xpZW50X2lkIiwiY2xpZW50X3NlY3JldCIsImFjY2Vzc190b2tlbiIsIkFwcFN0b3JlRXJyb3IiLCJBcHBTdG9yZSIsIl9hcHBzQ2FjaGUiLCJib3hWZXJzaW9uIiwiZ2V0QXBwQnlJZCIsImdldE1hbmlmZXN0IiwibWFuaWZlc3RVcmwiLCIkc2NvcGUiLCIkcm91dGUiLCIkaW50ZXJ2YWwiLCJpbml0aWFsaXplZCIsImlzQWN0aXZlIiwiY3VycmVudCIsIiQkcm91dGUiLCJvcmlnaW5hbFBhdGgiLCJpbmRleE9mIiwiZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJsb2dpbiIsImNhbGxiYWNrVVJMIiwic2V0dXAiLCIkIiwibW9kYWwiLCJjaGVja0lmRG9uZSIsInNldFRpbWVvdXQiLCJpc0ZpcnN0VGltZSIsInJlZnJlc2hBcHBzVGltZXIiLCJiaW5kIiwicmVmcmVzaENvbmZpZ1RpbWVyIiwiY2FuY2VsIiwiJGxvY2F0aW9uIiwidXNlciIsInBhdGgiLCIkcm91dGVQYXJhbXMiLCJkaXNhYmxlZCIsImRvbWFpbiIsImNvbnRhaW5lclBvcnQiLCJob3N0UG9ydCIsInJlcGxhY2UiLCJoaXN0b3J5IiwiYmFjayIsInRjcFBvcnRzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImZvY3VzIiwicmVuZGVyQ3B1IiwiYWN0aXZlVGFiIiwiY3B1RGF0YSIsInRyYW5zZm9ybWVkQ3B1IiwiZGF0YXBvaW50cyIsIm1hcCIsInBvaW50IiwieSIsIngiLCJjcHVHcmFwaCIsIlJpY2tzaGF3IiwiR3JhcGgiLCJlbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInJlbmRlcmVyIiwid2lkdGgiLCJoZWlnaHQiLCJtaW4iLCJtYXgiLCJzZXJpZXMiLCJjb2xvciIsIkF4aXMiLCJUaW1lIiwiZ3JhcGgiLCJZIiwib3JpZW50YXRpb24iLCJ0aWNrRm9ybWF0IiwiRml4dHVyZXMiLCJOdW1iZXIiLCJmb3JtYXRLTUJUIiwiSG92ZXJEZXRhaWwiLCJmb3JtYXR0ZXIiLCJzd2F0Y2giLCJjb250ZW50IiwidG9GaXhlZCIsInJlbmRlciIsInJlbmRlck1lbW9yeSIsIm1lbW9yeURhdGEiLCJ0cmFuc2Zvcm1lZE1lbW9yeSIsIm1lbW9yeUdyYXBoIiwicmVuZGVyRGlzayIsImRpc2tEYXRhIiwidHJhbnNmb3JtZWREaXNrIiwiZGlza0dyYXBoIiwiTGVnZW5kIiwidXBkYXRlQXZhaWxhYmxlIiwidXBkYXRlVmVyc2lvbiIsInBhc3N3b3JkV3JvbmciLCJ1cGRhdGVHcmFwaHMiLCJjcHVVc2FnZVRhcmdldCIsIm1lbW9yeVVzYWdlVGFyZ2V0IiwiZGlza1VzYWdlVGFyZ2V0IiwiYXBwTG9nVXJsIiwiYXBwVXBkYXRlcyIsIiR0aW1lb3V0IiwiaG9zdFBvcnRNaW4iLCJob3N0UG9ydE1heCIsInBvcnQiLCJwYXJzZUludCIsImluc3RhbGxlZEFwcHMiLCJhcHBjb25maWd1cmUiLCJidXN5Iiwic2hvd0NvbmZpZ3VyZSIsImRvQ29uZmlndXJlIiwicmVmcmVzaCIsInJlYWR5IiwiYXBwaW5zdGFsbCIsInNob3dJbnN0YWxsIiwiZG9JbnN0YWxsIiwibmFrZWREb21haW5BcHAiLCJjZXJ0aWZpY2F0ZUZpbGVOYW1lIiwia2V5RmlsZU5hbWUiLCIkcGFyZW50Iiwib25jaGFuZ2UiLCIkYXBwbHkiLCJmaWxlcyIsInJlbG9hZCIsInRva2VuSW5Vc2UiLCJyZW5kZXJOZXR3b3JrIiwidHhEYXRhIiwicnhEYXRhIiwidHJhbnNmb3JtZWRUeCIsInRyYW5zZm9ybWVkUngiLCJuZXR3b3JrR3JhcGgiLCJhcHBzVXNlZERhdGEiLCJkYXRhVXNlZERhdGEiLCJ0cmFuc2Zvcm1lZEFwcHNVc2VkIiwidHJhbnNmb3JtZWREYXRhVXNlZCIsIm5ldHdvcmtVc2FnZVR4VGFyZ2V0IiwibmV0d29ya1VzYWdlUnhUYXJnZXQiLCJkaXNrVXNhZ2VBcHBzVXNlZFRhcmdldCIsImRpc2tVc2FnZURhdGFVc2VkVGFyZ2V0IiwiYWN0aXZlQ2xpZW50cyIsInJlbW92ZUFjY2Vzc1Rva2VucyIsIl9idXN5IiwiYWRkQ2xhc3MiLCJhbHJlYWR5VGFrZW4iLCJzdWJtaXQiLCJ1c2VycyIsInVzZXJEZWxldGVGb3JtIiwiaXNNZSIsImlzQWRtaW4iLCJ0b2dnbGVBZG1pbiIsImRlbGV0ZVVzZXIiLCJhZGRVc2VyIiwiYWN0aXZlIiwicmVwZWF0UGFzc3dvcmQiLCJ2YWxpZGF0aW9uQ2xhc3MiXSwibWFwcGluZ3MiOiJBQUFBLFlBS0EsSUFBQUEsS0FBQUMsUUFBQUMsT0FBQSxlQUFBLFVBQUEsWUFBQSxlQUdBRixLQUFBRyxRQUFBLGlCQUFBLFNBQUFDLEdBQ0FBLEVBQUFDLEtBQUEsS0FDQUMsV0FBQSxVQUNBRCxLQUFBLGNBQ0FFLFdBQUEsc0JBQ0FDLFlBQUEseUJBQ0FILEtBQUEsZUFDQUUsV0FBQSx1QkFDQUMsWUFBQSwwQkFDQUgsS0FBQSxpQkFDQUUsV0FBQSx5QkFDQUMsWUFBQSw0QkFDQUgsS0FBQSxhQUNBRSxXQUFBLHFCQUNBQyxZQUFBLHdCQUNBSCxLQUFBLGFBQ0FFLFdBQUEscUJBQ0FDLFlBQUEsd0JBQ0FILEtBQUEsU0FDQUUs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QkFBQUMsUUFDQXJDLEVBQUFpSixnQkFBQUQsZUFBQSxpQkFDQWhKLEVBQUFnSixlQUFBLE1BSUFoSixFQUFBK0ksUUFBQSxNQUNBNVIsR0FBQWdILGVBQUE2QixFQUFBNUIsZ0JBQUE0QixFQUFBM0IsWUFBQSxTQUFBakUsR0FDQUEsR0FBQSxNQUFBQSxFQUFBL0QsWUFDQThMLFNBQUFDLGVBQUEsd0JBQUFDLFFBQ0FyQyxFQUFBaUosZ0JBQUE3SyxnQkFBQSxZQUNBNEIsRUFBQTVCLGdCQUFBLEdBQ0E0QixFQUFBM0IsWUFBQSxHQUNBMkIsRUFBQWdKLGVBQUEsSUFDQTVPLEVBQ0E0QyxRQUFBNUMsTUFBQSw2QkFBQUEsR0FFQTBFLE9BQUFrRCxRQUFBQyxPQUdBakMsRUFBQStJLFFBQUE7S0FJQS9JLEVBQUFzQixPQUFBLFdBQ0F4QyxPQUFBa0QsUUFBQUMsUUFHQUUsU0FBQUMsZUFBQSx3QkFBQUMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbCBhbmd1bGFyOmZhbHNlICovXG5cbi8vIGNyZWF0ZSBtYWluIGFwcGxpY2F0aW9uIG1vZHVsZVxudmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicsIFsnbmdSb3V0ZScsICduZ0FuaW1hdGUnLCAnYW5ndWxhci1tZDUnXSk7XG5cbi8vIHNldHVwIGFsbCBtYWpvciBhcHBsaWNhdGlvbiByb3V0ZXNcbmFwcC5jb25maWcoWyckcm91dGVQcm92aWRlcicsIGZ1bmN0aW9uICgkcm91dGVQcm92aWRlcikge1xuICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy8nLCB7XG4gICAgICAgIHJlZGlyZWN0VG86ICcvYXBwcydcbiAgICB9KS53aGVuKCcvZGFzaGJvYXJkJywge1xuICAgICAgICBjb250cm9sbGVyOiAnRGFzaGJvYXJkQ29udHJvbGxlcicsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvZGFzaGJvYXJkLmh0bWwnXG4gICAgfSkud2hlbignL3VzZXJjcmVhdGUnLCB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdVc2VyQ3JlYXRlQ29udHJvbGxlcicsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvdXNlcmNyZWF0ZS5odG1sJ1xuICAgIH0pLndoZW4oJy91c2VycGFzc3dvcmQnLCB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdVc2VyUGFzc3dvcmRDb250cm9sbGVyJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy91c2VycGFzc3dvcmQuaHRtbCdcbiAgICB9KS53aGVuKCcvdXNlcmxpc3QnLCB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdVc2VyTGlzdENvbnRyb2xsZXInLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3VzZXJsaXN0Lmh0bWwnXG4gICAgfSkud2hlbignL2FwcHN0b3JlJywge1xuICAgICAgICBjb250cm9sbGVyOiAnQXBwU3RvcmVDb250cm9sbGVyJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9hcHBzdG9yZS5odG1sJ1xuICAgIH0pLndoZW4oJy9hcHBzJywge1xuICAgICAgICBjb250cm9sbGVyOiAnQXBwTGlzdENvbnRyb2xsZXInLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2FwcGxpc3QuaHRtbCdcbiAgICB9KS53aGVuKCcvYXBwLzphcHBTdG9yZUlkL2luc3RhbGwnLCB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdBcHBJbnN0YWxsQ29udHJvbGxlcicsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvYXBwaW5zdGFsbC5odG1sJ1xuICAgIH0pLndoZW4oJy9hcHAvOmFwcElkL2NvbmZpZ3VyZScsIHtcbiAgICAgICAgY29udHJvbGxlcjogJ0FwcENvbmZpZ3VyZUNvbnRyb2xsZXInLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2FwcGNvbmZpZ3VyZS5odG1sJ1xuICAgIH0pLndoZW4oJy9hcHAvOmFwcElkL2RldGFpbHMnLCB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdBcHBEZXRhaWxzQ29udHJvbGxlcicsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvYXBwZGV0YWlscy5odG1sJ1xuICAgIH0pLndoZW4oJy9kbnMnLCB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdEbnNDb250cm9sbGVyJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9kbnMuaHRtbCdcbiAgICB9KS53aGVuKCcvYWNjb3VudCcsIHtcbiAgICAgICAgY29udHJvbGxlcjogJ0FjY291bnRDb250cm9sbGVyJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9hY2NvdW50Lmh0bWwnXG4gICAgfSkud2hlbignL2dyYXBocycsIHtcbiAgICAgICAgY29udHJvbGxlcjogJ0dyYXBoc0NvbnRyb2xsZXInLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2dyYXBocy5odG1sJ1xuICAgIH0pLndoZW4oJy9zZWN1cml0eScsIHtcbiAgICAgICAgY29udHJvbGxlcjogJ1NlY3VyaXR5Q29udHJvbGxlcicsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3Mvc2VjdXJpdHkuaHRtbCdcbiAgICB9KS5vdGhlcndpc2UoeyByZWRpcmVjdFRvOiAnLyd9KTtcbn1dKTtcblxuYXBwLmZpbHRlcignaW5zdGFsbGF0aW9uQWN0aXZlJywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dCA9PT0gJ2Vycm9yJykgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoaW5wdXQgPT09ICdpbnN0YWxsZWQnKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG59KTtcblxuYXBwLmZpbHRlcignaW5zdGFsbGF0aW9uU3RhdGVMYWJlbCcsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQgPT09ICdlcnJvcicpIHJldHVybiAnRXJyb3InO1xuICAgICAgICBpZiAoaW5wdXQgPT09ICdzdWJkb21haW5fZXJyb3InKSByZXR1cm4gJ0Vycm9yJztcbiAgICAgICAgaWYgKGlucHV0ID09PSAnaW5zdGFsbGVkJykgcmV0dXJuICdJbnN0YWxsZWQnO1xuICAgICAgICBpZiAoaW5wdXQgPT09ICdkb3dubG9hZGluZ19pbWFnZScpIHJldHVybiAnRG93bmxvYWRpbmcnO1xuICAgICAgICBpZiAoaW5wdXQgPT09ICdwZW5kaW5nX2luc3RhbGwnKSByZXR1cm4gJ0luc3RhbGxpbmcnO1xuICAgICAgICBpZiAoaW5wdXQgPT09ICdwZW5kaW5nX3VuaW5zdGFsbCcpIHJldHVybiAnVW5pbnN0YWxsaW5nJztcbiAgICAgICAgaWYgKGlucHV0ID09PSAnY3JlYXRpbmdfY29udGFpbmVyJykgcmV0dXJuICdDb250YWluZXInO1xuICAgICAgICBpZiAoaW5wdXQgPT09ICdkb3dubG9hZGluZ19tYW5pZmVzdCcpIHJldHVybiAnTWFuaWZlc3QnO1xuICAgICAgICBpZiAoaW5wdXQgPT09ICdjcmVhdGluZ192b2x1bWUnKSByZXR1cm4gJ1ZvbHVtZSc7XG4gICAgICAgIGlmIChpbnB1dCA9PT0gJ3JlZ2lzdGVyaW5nX3N1YmRvbWFpbicpIHJldHVybiAnU3ViZG9tYWluJztcbiAgICAgICAgaWYgKGlucHV0ID09PSAnYWxsb2NhdGVkX29hdXRoX2NyZWRlbnRpYWxzJykgcmV0dXJuICdPQXV0aCc7XG5cbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH07XG59KTtcblxuYXBwLmZpbHRlcignYWNjZXNzUmVzdHJpY3Rpb25MYWJlbCcsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQgPT09ICcnKSByZXR1cm4gJ3B1YmxpYyc7XG4gICAgICAgIGlmIChpbnB1dCA9PT0gJ3JvbGVVc2VyJykgcmV0dXJuICdwcml2YXRlJztcbiAgICAgICAgaWYgKGlucHV0ID09PSAncm9sZUFkbWluJykgcmV0dXJuICdwcml2YXRlIChBZG1pbnMgb25seSknO1xuXG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9O1xufSk7XG5cbi8vIGN1c3RvbSBkaXJlY3RpdmUgZm9yIGR5bmFtaWMgbmFtZXMgaW4gZm9ybXNcbi8vIFNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIzNjE2NTc4L2lzc3VlLXJlZ2lzdGVyaW5nLWZvcm0tY29udHJvbC13aXRoLWludGVycG9sYXRlZC1uYW1lI2Fuc3dlci0yMzYxNzQwMVxuYXBwLmRpcmVjdGl2ZSgnbGF0ZXJOYW1lJywgZnVuY3Rpb24gKCkgeyAgICAgICAgICAgICAgICAgICAvLyAoMilcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICByZXF1aXJlOiBbJz9uZ01vZGVsJywgJ14/Zm9ybSddLCAgICAgICAgICAgICAgICAgICAvLyAoMylcbiAgICAgICAgbGluazogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW0sIGF0dHJzLCBjdHJscykge1xuICAgICAgICAgICAgYXR0cnMuJHNldCgnbmFtZScsIGF0dHJzLmxhdGVyTmFtZSk7XG5cbiAgICAgICAgICAgIHZhciBtb2RlbEN0cmwgPSBjdHJsc1swXTsgICAgICAgICAgICAgICAgICAgICAgLy8gKDMpXG4gICAgICAgICAgICB2YXIgZm9ybUN0cmwgID0gY3RybHNbMV07ICAgICAgICAgICAgICAgICAgICAgIC8vICgzKVxuICAgICAgICAgICAgaWYgKG1vZGVsQ3RybCAmJiBmb3JtQ3RybCkge1xuICAgICAgICAgICAgICAgIG1vZGVsQ3RybC4kbmFtZSA9IGF0dHJzLm5hbWU7ICAgICAgICAgICAgICAvLyAoNClcbiAgICAgICAgICAgICAgICBmb3JtQ3RybC4kYWRkQ29udHJvbChtb2RlbEN0cmwpOyAgICAgICAgICAgLy8gKDIpXG4gICAgICAgICAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybUN0cmwuJHJlbW92ZUNvbnRyb2wobW9kZWxDdHJsKTsgICAgLy8gKDUpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBnbG9iYWwgYW5ndWxhciAqL1xuLyogZ2xvYmFsIEV2ZW50U291cmNlICovXG5cbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpLnNlcnZpY2UoJ0NsaWVudCcsIFsnJGh0dHAnLCAnbWQ1JywgZnVuY3Rpb24gKCRodHRwLCBtZDUpIHtcbiAgICB2YXIgY2xpZW50ID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIENsaWVudEVycm9yKHN0YXR1c0NvZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeShtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IDQwMSkgcmV0dXJuIGNsaWVudC5sb2dvdXQoKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBDbGllbnQoKSB7XG4gICAgICAgIHRoaXMuX3JlYWR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2NvbmZpZ0xpc3RlbmVyID0gW107XG4gICAgICAgIHRoaXMuX3JlYWR5TGlzdGVuZXIgPSBbXTtcbiAgICAgICAgdGhpcy5fdXNlckluZm8gPSB7XG4gICAgICAgICAgICB1c2VybmFtZTogbnVsbCxcbiAgICAgICAgICAgIGVtYWlsOiBudWxsLFxuICAgICAgICAgICAgYWRtaW46IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3Rva2VuID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY2xpZW50SWQgPSAnY2lkLXdlYmFkbWluJztcbiAgICAgICAgdGhpcy5fY2xpZW50U2VjcmV0ID0gJ3VudXNlZCc7XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IHtcbiAgICAgICAgICAgIGFwaVNlcnZlck9yaWdpbjogbnVsbCxcbiAgICAgICAgICAgIHdlYlNlcnZlck9yaWdpbjogbnVsbCxcbiAgICAgICAgICAgIGZxZG46IG51bGwsXG4gICAgICAgICAgICBpcDogbnVsbCxcbiAgICAgICAgICAgIHJldmlzaW9uOiBudWxsLFxuICAgICAgICAgICAgdXBkYXRlOiBudWxsLFxuICAgICAgICAgICAgaXNEZXY6IGZhbHNlLFxuICAgICAgICAgICAgcHJvZ3Jlc3M6IHt9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2luc3RhbGxlZEFwcHMgPSBbXTtcblxuICAgICAgICB0aGlzLnNldFRva2VuKGxvY2FsU3RvcmFnZS50b2tlbik7XG4gICAgfVxuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5zZXRSZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlYWR5KSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5fcmVhZHkgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yZWFkeUxpc3RlbmVyLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5vblJlYWR5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZWFkeSkgY2FsbGJhY2soKTtcbiAgICAgICAgdGhpcy5fcmVhZHlMaXN0ZW5lci5wdXNoKGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5vbkNvbmZpZyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9jb25maWdMaXN0ZW5lci5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5fY29uZmlnKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5zZXRVc2VySW5mbyA9IGZ1bmN0aW9uICh1c2VySW5mbykge1xuICAgICAgICAvLyBJbiBvcmRlciB0byBrZWVwIHRoZSBhbmd1bGFyIGJpbmRpbmdzIGFsaXZlLCBzZXQgZWFjaCBwcm9wZXJ0eSBpbmRpdmlkdWFsbHlcbiAgICAgICAgdGhpcy5fdXNlckluZm8udXNlcm5hbWUgPSB1c2VySW5mby51c2VybmFtZTtcbiAgICAgICAgdGhpcy5fdXNlckluZm8uZW1haWwgPSB1c2VySW5mby5lbWFpbDtcbiAgICAgICAgdGhpcy5fdXNlckluZm8uYWRtaW4gPSAhIXVzZXJJbmZvLmFkbWluO1xuICAgICAgICB0aGlzLl91c2VySW5mby5ncmF2YXRhciA9ICdodHRwczovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyLycgKyBtZDUuY3JlYXRlSGFzaCh1c2VySW5mby5lbWFpbC50b0xvd2VyQ2FzZSgpKSArICcuanBnP3M9MjQmZD1tbSc7XG4gICAgICAgIHRoaXMuX3VzZXJJbmZvLmdyYXZhdGFySHVnZSA9ICdodHRwczovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyLycgKyBtZDUuY3JlYXRlSGFzaCh1c2VySW5mby5lbWFpbC50b0xvd2VyQ2FzZSgpKSArICcuanBnP3M9MTI4JmQ9bW0nO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLnNldENvbmZpZyA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgLy8gSW4gb3JkZXIgdG8ga2VlcCB0aGUgYW5ndWxhciBiaW5kaW5ncyBhbGl2ZSwgc2V0IGVhY2ggcHJvcGVydHkgaW5kaXZpZHVhbGx5IChUT0RPOiBqdXN0IHVzZSBhbmd1bGFyLmNvcHkgPylcbiAgICAgICAgdGhpcy5fY29uZmlnLmFwaVNlcnZlck9yaWdpbiA9IGNvbmZpZy5hcGlTZXJ2ZXJPcmlnaW47XG4gICAgICAgIHRoaXMuX2NvbmZpZy53ZWJTZXJ2ZXJPcmlnaW4gPSBjb25maWcud2ViU2VydmVyT3JpZ2luO1xuICAgICAgICB0aGlzLl9jb25maWcudmVyc2lvbiA9IGNvbmZpZy52ZXJzaW9uO1xuICAgICAgICB0aGlzLl9jb25maWcuZnFkbiA9IGNvbmZpZy5mcWRuO1xuICAgICAgICB0aGlzLl9jb25maWcuaXAgPSBjb25maWcuaXA7XG4gICAgICAgIHRoaXMuX2NvbmZpZy5yZXZpc2lvbiA9IGNvbmZpZy5yZXZpc2lvbjtcbiAgICAgICAgdGhpcy5fY29uZmlnLnVwZGF0ZSA9IGNvbmZpZy51cGRhdGU7XG4gICAgICAgIHRoaXMuX2NvbmZpZy5pc0RldiA9IGNvbmZpZy5pc0RldjtcbiAgICAgICAgdGhpcy5fY29uZmlnLnByb2dyZXNzID0gY29uZmlnLnByb2dyZXNzO1xuXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICB0aGlzLl9jb25maWdMaXN0ZW5lci5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2sodGhhdC5fY29uZmlnKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuZ2V0SW5zdGFsbGVkQXBwcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbGxlZEFwcHM7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuZ2V0VXNlckluZm8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91c2VySW5mbztcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRDb25maWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWc7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuc2V0VG9rZW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCZWFyZXIgJyArIHRva2VuO1xuICAgICAgICBpZiAoIXRva2VuKSBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndG9rZW4nKTtcbiAgICAgICAgZWxzZSBsb2NhbFN0b3JhZ2UudG9rZW4gPSB0b2tlbjtcbiAgICAgICAgdGhpcy5fdG9rZW4gPSB0b2tlbjtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBSZXN0IEFQSSB3cmFwcGVyc1xuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuY29uZmlnID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICRodHRwLmdldCgnL2FwaS92MS9jbG91ZHJvbi9jb25maWcnKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUudXNlckluZm8gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL3YxL3Byb2ZpbGUnKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuaW5zdGFsbEFwcCA9IGZ1bmN0aW9uIChpZCwgdmVyc2lvbiwgcGFzc3dvcmQsIHRpdGxlLCBjb25maWcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIGRhdGEgPSB7IGFwcFN0b3JlSWQ6IGlkLCB2ZXJzaW9uOiB2ZXJzaW9uLCBwYXNzd29yZDogcGFzc3dvcmQsIGxvY2F0aW9uOiBjb25maWcubG9jYXRpb24sIHBvcnRCaW5kaW5nczogY29uZmlnLnBvcnRCaW5kaW5ncywgYWNjZXNzUmVzdHJpY3Rpb246IGNvbmZpZy5hY2Nlc3NSZXN0cmljdGlvbiB9O1xuICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3YxL2FwcHMvaW5zdGFsbCcsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAyIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcblxuICAgICAgICAgICAgLy8gcHV0IG5ldyBhcHAgd2l0aCBhbWVuZGVkIHRpdGxlIGluIGNhY2hlXG4gICAgICAgICAgICBkYXRhLm1hbmlmZXN0ID0geyB0aXRsZTogdGl0bGUgfTtcbiAgICAgICAgICAgIHRoYXQuX2luc3RhbGxlZEFwcHMucHVzaChkYXRhKTtcblxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YS5pZCk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS51bmluc3RhbGxBcHAgPSBmdW5jdGlvbiAoYXBwSWQsIHBhc3N3b3JkLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZGF0YSA9IHsgcGFzc3dvcmQ6IHBhc3N3b3JkIH07XG4gICAgICAgICRodHRwLnBvc3QoJy9hcGkvdjEvYXBwcy8nICsgYXBwSWQgKyAnL3VuaW5zdGFsbCcsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAyKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5jb25maWd1cmVBcHAgPSBmdW5jdGlvbiAoaWQsIHBhc3N3b3JkLCBjb25maWcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBkYXRhID0geyBhcHBJZDogaWQsIHBhc3N3b3JkOiBwYXNzd29yZCwgbG9jYXRpb246IGNvbmZpZy5sb2NhdGlvbiwgcG9ydEJpbmRpbmdzOiBjb25maWcucG9ydEJpbmRpbmdzLCBhY2Nlc3NSZXN0cmljdGlvbjogY29uZmlnLmFjY2Vzc1Jlc3RyaWN0aW9uIH07XG4gICAgICAgICRodHRwLnBvc3QoJy9hcGkvdjEvYXBwcy8nICsgaWQgKyAnL2NvbmZpZ3VyZScsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAyKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS51cGRhdGVBcHAgPSBmdW5jdGlvbiAoaWQsIHZlcnNpb24sIHBhc3N3b3JkLCBjYWxsYmFjaykge1xuICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3YxL2FwcHMvJyArIGlkICsgJy91cGRhdGUnLCB7IHZlcnNpb246IHZlcnNpb24sIHBhc3N3b3JkOiBwYXNzd29yZCB9KS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IDIwMikgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuc3RhcnRBcHAgPSBmdW5jdGlvbiAoaWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBkYXRhID0geyB9O1xuICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3YxL2FwcHMvJyArIGlkICsgJy9zdGFydCcsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAyKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5zdG9wQXBwID0gZnVuY3Rpb24gKGlkLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZGF0YSA9IHsgfTtcbiAgICAgICAgJGh0dHAucG9zdCgnL2FwaS92MS9hcHBzLycgKyBpZCArICcvc3RvcCcsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAyKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS52ZXJzaW9uID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICRodHRwLmdldCgnL2FwaS92MS9jbG91ZHJvbi9zdGF0dXMnKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuaXNTZXJ2ZXJGaXJzdFRpbWUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL3YxL2Nsb3Vkcm9uL3N0YXR1cycpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDAgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgIWRhdGEuYWN0aXZhdGVkKTtcbiAgICAgICAgfSkuZXJyb3IoZGVmYXVsdEVycm9ySGFuZGxlcihjYWxsYmFjaykpO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLmdldE5ha2VkRG9tYWluID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICRodHRwLmdldCgnL2FwaS92MS9zZXR0aW5ncy9uYWtlZF9kb21haW4nKVxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDAgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YS5hcHBpZCk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5zZXROYWtlZERvbWFpbiA9IGZ1bmN0aW9uIChhcHBpZCwgY2FsbGJhY2spIHtcbiAgICAgICAgJGh0dHAucG9zdCgnL2FwaS92MS9zZXR0aW5ncy9uYWtlZF9kb21haW4nLCB7IGFwcGlkOiBhcHBpZCB9KS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IDIwNCkgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuZ2V0QXBwcyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAkaHR0cC5nZXQoJy9hcGkvdjEvYXBwcycpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEuYXBwcyk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRBcHAgPSBmdW5jdGlvbiAoYXBwSWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBhcHBGb3VuZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2luc3RhbGxlZEFwcHMuc29tZShmdW5jdGlvbiAoYXBwKSB7XG4gICAgICAgICAgICBpZiAoYXBwLmlkID09PSBhcHBJZCkge1xuICAgICAgICAgICAgICAgIGFwcEZvdW5kID0gYXBwO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChhcHBGb3VuZCkgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGFwcEZvdW5kKTtcbiAgICAgICAgZWxzZSByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKCdBcHAgbm90IGZvdW5kJykpO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLmdldEFwcExvZ1N0cmVhbSA9IGZ1bmN0aW9uIChhcHBJZCkge1xuICAgICAgICB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvYXBpL3YxL2FwcHMvJyArIGFwcElkICsgJy9sb2dzdHJlYW0nKTtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRBcHBMb2dVcmwgPSBmdW5jdGlvbiAoYXBwSWQpIHtcbiAgICAgICAgcmV0dXJuICcvYXBpL3YxL2FwcHMvJyArIGFwcElkICsgJy9sb2dzP2FjY2Vzc190b2tlbj0nICsgdGhpcy5fdG9rZW47XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuc2V0QWRtaW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIGFkbWluLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcGF5bG9hZCA9IHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICAgIGFkbWluOiBhZG1pblxuICAgICAgICB9O1xuXG4gICAgICAgICRodHRwLnBvc3QoJy9hcGkvdjEvdXNlcnMvJyArIHVzZXJuYW1lICsgJy9hZG1pbicsIHBheWxvYWQpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjA0KSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5jcmVhdGVBZG1pbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQsIGVtYWlsLCBzZXR1cFRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcGF5bG9hZCA9IHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZCxcbiAgICAgICAgICAgIGVtYWlsOiBlbWFpbFxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3YxL2Nsb3Vkcm9uL2FjdGl2YXRlP3NldHVwVG9rZW49JyArIHNldHVwVG9rZW4sIHBheWxvYWQpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDEgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuXG4gICAgICAgICAgICB0aGF0LnNldFRva2VuKGRhdGEudG9rZW4pO1xuICAgICAgICAgICAgdGhhdC5zZXRVc2VySW5mbyh7IHVzZXJuYW1lOiB1c2VybmFtZSwgZW1haWw6IGVtYWlsLCBhZG1pbjogdHJ1ZSB9KTtcblxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YS5hY3RpdmF0ZWQpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUubGlzdFVzZXJzID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICRodHRwLmdldCgnL2FwaS92MS91c2VycycpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDAgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRPQXV0aENsaWVudHMgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL3YxL29hdXRoL2NsaWVudHMnKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEuY2xpZW50cyk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5kZWxUb2tlbnNCeUNsaWVudElkID0gZnVuY3Rpb24gKGlkLCBjYWxsYmFjaykge1xuICAgICAgICAkaHR0cC5kZWxldGUoJy9hcGkvdjEvb2F1dGgvY2xpZW50cy8nICsgaWQgKyAnL3Rva2VucycpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDQpIHJldHVybiBjYWxsYmFjayhuZXcgQ2xpZW50RXJyb3Ioc3RhdHVzLCBkYXRhKSk7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgfSkuZXJyb3IoZGVmYXVsdEVycm9ySGFuZGxlcihjYWxsYmFjaykpO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAkaHR0cC5nZXQoJy9hcGkvdjEvY2xvdWRyb24vdXBkYXRlJykuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IDIwMiB8fCB0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpIHJldHVybiBjYWxsYmFjayhuZXcgQ2xpZW50RXJyb3Ioc3RhdHVzLCBkYXRhKSk7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBkYXRhKTtcbiAgICAgICAgfSkuZXJyb3IoZGVmYXVsdEVycm9ySGFuZGxlcihjYWxsYmFjaykpO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLnJlYm9vdCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAkaHR0cC5nZXQoJy9hcGkvdjEvY2xvdWRyb24vcmVib290Jykuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IDIwMiB8fCB0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpIHJldHVybiBjYWxsYmFjayhuZXcgQ2xpZW50RXJyb3Ioc3RhdHVzLCBkYXRhKSk7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBkYXRhKTtcbiAgICAgICAgfSkuZXJyb3IoZGVmYXVsdEVycm9ySGFuZGxlcihjYWxsYmFjaykpO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLmJhY2t1cCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3YxL2Nsb3Vkcm9uL2JhY2t1cHMnKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAyIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuc2V0Q2VydGlmaWNhdGUgPSBmdW5jdGlvbiAoY2VydGlmaWNhdGVGaWxlLCBrZXlGaWxlLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zb2xlLmxvZygnd2lsbCBzZXQgY2VydGlmaWNhdGUnKTtcblxuICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgZmQuYXBwZW5kKCdjZXJ0aWZpY2F0ZScsIGNlcnRpZmljYXRlRmlsZSk7XG4gICAgICAgIGZkLmFwcGVuZCgna2V5Jywga2V5RmlsZSk7XG5cbiAgICAgICAgJGh0dHAucG9zdCgnL2FwaS92MS9jbG91ZHJvbi9jZXJ0aWZpY2F0ZScsIGZkLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWQgfSxcbiAgICAgICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGFuZ3VsYXIuaWRlbnRpdHlcbiAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IDIwMikgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuZ3JhcGhzID0gZnVuY3Rpb24gKHRhcmdldHMsIGZyb20sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldHMsXG4gICAgICAgICAgICAgICAgZm9ybWF0OiAnanNvbicsXG4gICAgICAgICAgICAgICAgZnJvbTogZnJvbVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRodHRwLmdldCgnL2FwaS92MS9jbG91ZHJvbi9ncmFwaHMnLCBjb25maWcpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuY3JlYXRlVXNlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgZW1haWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgICAgICAgICAgZW1haWw6IGVtYWlsXG4gICAgICAgIH07XG5cbiAgICAgICAgJGh0dHAucG9zdCgnL2FwaS92MS91c2VycycsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDEgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5yZW1vdmVVc2VyID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsXG4gICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgICAgfTtcblxuICAgICAgICAkaHR0cCh7IG1ldGhvZDogJ0RFTEVURScsIHVybDogJy9hcGkvdjEvdXNlcnMvJyArIHVzZXJuYW1lLCBkYXRhOiBkYXRhLCBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfX0pLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDQpIHJldHVybiBjYWxsYmFjayhuZXcgQ2xpZW50RXJyb3Ioc3RhdHVzLCBkYXRhKSk7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgfSkuZXJyb3IoZGVmYXVsdEVycm9ySGFuZGxlcihjYWxsYmFjaykpO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLmNoYW5nZVBhc3N3b3JkID0gZnVuY3Rpb24gKGN1cnJlbnRQYXNzd29yZCwgbmV3UGFzc3dvcmQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgcGFzc3dvcmQ6IGN1cnJlbnRQYXNzd29yZCxcbiAgICAgICAgICAgIG5ld1Bhc3N3b3JkOiBuZXdQYXNzd29yZFxuICAgICAgICB9O1xuXG4gICAgICAgICRodHRwLnBvc3QoJy9hcGkvdjEvdXNlcnMvJyArIHRoaXMuX3VzZXJJbmZvLnVzZXJuYW1lICsgJy9wYXNzd29yZCcsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDQgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5yZWZyZXNoQ29uZmlnID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICBjYWxsYmFjayA9IHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGxiYWNrIDogZnVuY3Rpb24gKCkge307XG5cbiAgICAgICAgdGhpcy5jb25maWcoZnVuY3Rpb24gKGVycm9yLCByZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcblxuICAgICAgICAgICAgdGhhdC5zZXRDb25maWcocmVzdWx0KTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5yZWZyZXNoSW5zdGFsbGVkQXBwcyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgY2FsbGJhY2sgPSB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicgPyBjYWxsYmFjayA6IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgICAgIHRoaXMuZ2V0QXBwcyhmdW5jdGlvbiAoZXJyb3IsIGFwcHMpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcblxuICAgICAgICAgICAgLy8gaW5zZXJ0IG9yIHVwZGF0ZSBuZXcgYXBwc1xuICAgICAgICAgICAgYXBwcy5mb3JFYWNoKGZ1bmN0aW9uIChhcHApIHtcbiAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhhdC5faW5zdGFsbGVkQXBwcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5faW5zdGFsbGVkQXBwc1tpXS5pZCA9PT0gYXBwLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChmb3VuZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5jb3B5KGFwcCwgdGhhdC5faW5zdGFsbGVkQXBwc1tmb3VuZF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX2luc3RhbGxlZEFwcHMucHVzaChhcHApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBmaWx0ZXIgb3V0IG9sZCBlbnRyaWVzLCBnb2luZyBiYWNrd2FyZHMgdG8gYWxsb3cgc3BsaWNpbmdcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IHRoYXQuX2luc3RhbGxlZEFwcHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWFwcHMuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gKGVsZW0uaWQgPT09IHRoYXQuX2luc3RhbGxlZEFwcHNbaV0uaWQpOyB9KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9pbnN0YWxsZWRBcHBzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zZXRUb2tlbihudWxsKTtcbiAgICAgICAgdGhpcy5fdXNlckluZm8gPSB7fTtcblxuICAgICAgICAvLyBsb2dvdXQgZnJvbSBPQXV0aCBzZXNzaW9uXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9hcGkvdjEvc2Vzc2lvbi9sb2dvdXQnO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLmV4Y2hhbmdlQ29kZUZvclRva2VuID0gZnVuY3Rpb24gKGF1dGhDb2RlLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgIGdyYW50X3R5cGU6ICdhdXRob3JpemF0aW9uX2NvZGUnLFxuICAgICAgICAgICAgY29kZTogYXV0aENvZGUsXG4gICAgICAgICAgICByZWRpcmVjdF91cmk6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sXG4gICAgICAgICAgICBjbGllbnRfaWQ6IHRoaXMuX2NsaWVudElkLFxuICAgICAgICAgICAgY2xpZW50X3NlY3JldDogdGhpcy5fY2xpZW50U2VjcmV0XG4gICAgICAgIH07XG5cbiAgICAgICAgJGh0dHAucG9zdCgnL2FwaS92MS9vYXV0aC90b2tlbj9yZXNwb25zZV90eXBlPXRva2VuJmNsaWVudF9pZD0nICsgdGhpcy5fY2xpZW50SWQsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDAgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuXG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBkYXRhLmFjY2Vzc190b2tlbik7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgY2xpZW50ID0gbmV3IENsaWVudCgpO1xuICAgIHJldHVybiBjbGllbnQ7XG59XSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpLmNvbnRyb2xsZXIoJ0FwcFN0b3JlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRsb2NhdGlvbicsICckdGltZW91dCcsICdDbGllbnQnLCAnQXBwU3RvcmUnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICR0aW1lb3V0LCBDbGllbnQsIEFwcFN0b3JlKSB7XG4gICAgaWYgKCFDbGllbnQuZ2V0VXNlckluZm8oKS5hZG1pbikgJGxvY2F0aW9uLnBhdGgoJy8nKTtcblxuICAgICRzY29wZS5yZWFkeSA9IGZhbHNlO1xuICAgICRzY29wZS5hcHBzID0gW107XG4gICAgJHNjb3BlLmNvbmZpZyA9IENsaWVudC5nZXRDb25maWcoKTtcblxuICAgICRzY29wZS5hcHBpbnN0YWxsID0ge1xuICAgICAgICBidXN5OiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHt9LFxuICAgICAgICBhcHA6IHt9LFxuICAgICAgICBsb2NhdGlvbjogJycsXG4gICAgICAgIHBhc3N3b3JkOiAnJyxcbiAgICAgICAgcG9ydEJpbmRpbmdzOiB7fSxcbiAgICAgICAgYWNjZXNzUmVzdHJpY3Rpb246ICcnXG4gICAgfTtcblxuICAgICRzY29wZS5zaG93SW5zdGFsbCA9IGZ1bmN0aW9uIChhcHApIHtcbiAgICAgICAgJHNjb3BlLmFwcGluc3RhbGwuYXBwID0gYXBwO1xuICAgICAgICAkc2NvcGUuYXBwaW5zdGFsbC5sb2NhdGlvbiA9IGFwcC5sb2NhdGlvbjtcbiAgICAgICAgJHNjb3BlLmFwcGluc3RhbGwucG9ydEJpbmRpbmdzID0gYXBwLm1hbmlmZXN0LnRjcFBvcnRzO1xuICAgICAgICAkc2NvcGUuYXBwaW5zdGFsbC5hY2Nlc3NSZXN0cmljdGlvbiA9IGFwcC5hY2Nlc3NSZXN0cmljdGlvbjtcbiAgICAgICAgZm9yICh2YXIgY29udGFpbmVyUG9ydCBpbiAkc2NvcGUuYXBwaW5zdGFsbC5wb3J0QmluZGluZ3MpIHtcbiAgICAgICAgICAgICRzY29wZS5hcHBpbnN0YWxsLnBvcnRCaW5kaW5nc1tjb250YWluZXJQb3J0XS5ob3N0UG9ydCA9IGFwcC5wb3J0QmluZGluZ3NbY29udGFpbmVyUG9ydF07XG4gICAgICAgIH1cblxuICAgICAgICAkKCcjYXBwSW5zdGFsbE1vZGFsJykubW9kYWwoJ3Nob3cnKTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmRvSW5zdGFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJHNjb3BlLmFwcGluc3RhbGwuYnVzeSA9IHRydWU7XG4gICAgICAgICRzY29wZS5hcHBpbnN0YWxsLmVycm9yLm5hbWUgPSBudWxsO1xuICAgICAgICAkc2NvcGUuYXBwaW5zdGFsbC5lcnJvci5wYXNzd29yZCA9IG51bGw7XG5cbiAgICAgICAgdmFyIHBvcnRCaW5kaW5ncyA9IHsgfTtcbiAgICAgICAgZm9yICh2YXIgY29udGFpbmVyUG9ydCBpbiAkc2NvcGUuYXBwaW5zdGFsbC5wb3J0QmluZGluZ3MpIHtcbiAgICAgICAgICAgIHBvcnRCaW5kaW5nc1tjb250YWluZXJQb3J0XSA9ICRzY29wZS5hcHBpbnN0YWxsLnBvcnRCaW5kaW5nc1tjb250YWluZXJQb3J0XS5ob3N0UG9ydDtcbiAgICAgICAgfVxuXG4gICAgICAgIENsaWVudC5pbnN0YWxsQXBwKCRzY29wZS5hcHBpbnN0YWxsLmFwcC5pZCwgJHNjb3BlLmFwcC52ZXJzaW9uLCAkc2NvcGUuYXBwaW5zdGFsbC5wYXNzd29yZCwgJHNjb3BlLmFwcGluc3RhbGwuYXBwLnRpdGxlLCB7IGxvY2F0aW9uOiAkc2NvcGUuYXBwaW5zdGFsbC5sb2NhdGlvbiwgcG9ydEJpbmRpbmdzOiBwb3J0QmluZGluZ3MsIGFjY2Vzc1Jlc3RyaWN0aW9uOiAkc2NvcGUuYXBwaW5zdGFsbC5hY2Nlc3NSZXN0cmljdGlvbiB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5zdGF0dXNDb2RlID09PSA0MDkpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcGluc3RhbGwuZXJyb3IubmFtZSA9ICdBcHBsaWNhdGlvbiBhbHJlYWR5IGV4aXN0cy4nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3Iuc3RhdHVzQ29kZSA9PT0gNDAzKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBpbnN0YWxsLmVycm9yLnBhc3N3b3JkID0gJ1dyb25nIHBhc3N3b3JkIHByb3ZpZGVkLic7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBpbnN0YWxsLnBhc3N3b3JkID0gJyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcGluc3RhbGwuZXJyb3IubmFtZSA9ICdBcHAgd2l0aCB0aGUgbmFtZSAnICsgJHNjb3BlLmFwcGluc3RhbGwuYXBwLm5hbWUgKyAnIGNhbm5vdCBiZSBpbnN0YWxsZWQuJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYXBwaW5zdGFsbC5idXN5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkc2NvcGUuYXBwaW5zdGFsbC5wYXNzd29yZCA9ICcnO1xuICAgICAgICAgICAgJHNjb3BlLmFwcGluc3RhbGwuYnVzeSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAkKCcjYXBwSW5zdGFsbE1vZGFsJykubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgICAgICRzY29wZS5yZWFkeSA9IGZhbHNlO1xuXG4gICAgICAgIEFwcFN0b3JlLmdldEFwcHMoZnVuY3Rpb24gKGVycm9yLCBhcHBzKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJHRpbWVvdXQocmVmcmVzaCwgMTAwMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRzY29wZS5hcHBzID0gYXBwcztcbiAgICAgICAgICAgICRzY29wZS5yZWFkeSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlZnJlc2goKTtcbn1dKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJykuY29udHJvbGxlcignTWFpbkNvbnRyb2xsZXInLCBbJyRzY29wZScsICckcm91dGUnLCAnJGludGVydmFsJywgJ0NsaWVudCcsIGZ1bmN0aW9uICgkc2NvcGUsICRyb3V0ZSwgJGludGVydmFsLCBDbGllbnQpIHtcbiAgICAkc2NvcGUuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAkc2NvcGUudXNlckluZm8gPSBDbGllbnQuZ2V0VXNlckluZm8oKTtcbiAgICAkc2NvcGUuY29uZmlnID0ge307XG5cbiAgICAkc2NvcGUuaXNBY3RpdmUgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIGlmICghJHJvdXRlLmN1cnJlbnQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuICRyb3V0ZS5jdXJyZW50LiQkcm91dGUub3JpZ2luYWxQYXRoLmluZGV4T2YodXJsKSA9PT0gMDtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmxvZ291dCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgJHNjb3BlLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIENsaWVudC5sb2dvdXQoKTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2FsbGJhY2tVUkwgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgJy9sb2dpbl9jYWxsYmFjay5odG1sJztcbiAgICAgICAgdmFyIHNjb3BlID0gJ3Jvb3QscHJvZmlsZSxhcHBzLHJvbGVBZG1pbic7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9hcGkvdjEvb2F1dGgvZGlhbG9nL2F1dGhvcml6ZT9yZXNwb25zZV90eXBlPWNvZGUmY2xpZW50X2lkPScgKyBDbGllbnQuX2NsaWVudElkICsgJyZyZWRpcmVjdF91cmk9JyArIGNhbGxiYWNrVVJMICsgJyZzY29wZT0nICsgc2NvcGU7XG4gICAgfTtcblxuICAgICRzY29wZS5zZXR1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL2Vycm9yLmh0bWw/ZXJyb3JDb2RlPTEnO1xuICAgIH07XG5cbiAgICAkc2NvcGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9lcnJvci5odG1sJztcbiAgICB9O1xuXG4gICAgJHNjb3BlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJCgnI3VwZGF0ZU1vZGFsJykubW9kYWwoJ2hpZGUnKTtcblxuICAgICAgICAkc2NvcGUuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgICAgICBDbGllbnQudXBkYXRlKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yKSBjb25zb2xlLmVycm9yKGVycm9yKTtcblxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL3VwZGF0ZS5odG1sJztcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICRzY29wZS5iYWNrdXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoJyNiYWNrdXBQcm9ncmVzc01vZGFsJykubW9kYWwoJ3Nob3cnKTtcblxuICAgICAgICAkc2NvcGUuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgICAgICBDbGllbnQuYmFja3VwKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yKSBjb25zb2xlLmVycm9yKGVycm9yKTtcblxuICAgICAgICAgICAgLy8gVE9ETyB0aGlzIGRvZXMgbG9vayBsaWtlIHdlIHNob3VsZCB1c2UgcHJvZ3Jlc3MuanNvbj9cbiAgICAgICAgICAgIC8vIG5vdyBzdGFydCBxdWVyeVxuICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tJZkRvbmUoKSB7XG4gICAgICAgICAgICAgICAgQ2xpZW50LnZlcnNpb24oZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGNoZWNrSWZEb25lLCAxMDAwKTtcblxuICAgICAgICAgICAgICAgICAgICAkKCcjYmFja3VwUHJvZ3Jlc3NNb2RhbCcpLm1vZGFsKCdoaWRlJyk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNoZWNrSWZEb25lLCA1MDAwKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIENsaWVudC5pc1NlcnZlckZpcnN0VGltZShmdW5jdGlvbiAoZXJyb3IsIGlzRmlyc3RUaW1lKSB7XG4gICAgICAgIGlmIChlcnJvcikgcmV0dXJuICRzY29wZS5lcnJvcihlcnJvcik7XG4gICAgICAgIGlmIChpc0ZpcnN0VGltZSkgcmV0dXJuICRzY29wZS5zZXR1cCgpO1xuXG4gICAgICAgIC8vIHdlIHVzZSB0aGUgY29uZmlnIHJlcXVlc3QgYXMgYW4gaW5kaWNhdG9yIGlmIHRoZSB0b2tlbiBpcyBzdGlsbCB2YWxpZFxuICAgICAgICAvLyBUT0RPIHdlIHNob3VsZCBwcm9iYWJseSBhdHRhY2ggc3VjaCBhIGhhbmRsZXIgZm9yIGVhY2ggcmVxdWVzdCwgYXMgdGhlIHRva2VuIGNhbiBnZXQgaW52YWxpZFxuICAgICAgICAvLyBhdCBhbnkgdGltZSFcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS50b2tlbikge1xuICAgICAgICAgICAgQ2xpZW50LnJlZnJlc2hDb25maWcoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yICYmIGVycm9yLnN0YXR1c0NvZGUgPT09IDQwMSkgcmV0dXJuICRzY29wZS5sb2dpbigpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuICRzY29wZS5lcnJvcihlcnJvcik7XG5cbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB3ZSBhcmUgYWN0dWFsbHkgdXBkYXRlaW5nXG4gICAgICAgICAgICAgICAgaWYgKENsaWVudC5nZXRDb25maWcoKS5wcm9ncmVzcy51cGRhdGUpIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy91cGRhdGUuaHRtbCc7XG5cbiAgICAgICAgICAgICAgICBDbGllbnQudXNlckluZm8oZnVuY3Rpb24gKGVycm9yLCByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm4gJHNjb3BlLmVycm9yKGVycm9yKTtcblxuICAgICAgICAgICAgICAgICAgICBDbGllbnQuc2V0VXNlckluZm8ocmVzdWx0KTtcblxuICAgICAgICAgICAgICAgICAgICBDbGllbnQucmVmcmVzaEluc3RhbGxlZEFwcHMoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybiAkc2NvcGUuZXJyb3IoZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBraWNrIG9mZiBpbnN0YWxsZWQgYXBwcyBhbmQgY29uZmlnIHBvbGxpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWZyZXNoQXBwc1RpbWVyID0gJGludGVydmFsKENsaWVudC5yZWZyZXNoSW5zdGFsbGVkQXBwcy5iaW5kKENsaWVudCksIDIwMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZnJlc2hDb25maWdUaW1lciA9ICRpbnRlcnZhbChDbGllbnQucmVmcmVzaENvbmZpZy5iaW5kKENsaWVudCksIDUwMDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHJlZnJlc2hBcHBzVGltZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocmVmcmVzaENvbmZpZ1RpbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub3cgbWFyayB0aGUgQ2xpZW50IHRvIGJlIHJlYWR5XG4gICAgICAgICAgICAgICAgICAgICAgICBDbGllbnQuc2V0UmVhZHkoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbmZpZyA9IENsaWVudC5nZXRDb25maWcoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRzY29wZS5sb2dpbigpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyB3YWl0IHRpbGwgdGhlIHZpZXcgaGFzIGxvYWRlZCB1bnRpbCBzaG93aW5nIGEgbW9kYWwgZGlhbG9nXG4gICAgQ2xpZW50Lm9uQ29uZmlnKGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5wcm9ncmVzcy51cGRhdGUpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy91cGRhdGUuaHRtbCc7XG4gICAgICAgIH1cbiAgICB9KTtcbn1dKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJykuY29udHJvbGxlcignQWNjb3VudENvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9jYXRpb24nLCAnQ2xpZW50JywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCBDbGllbnQpIHtcbiAgICAkc2NvcGUudXNlciA9IENsaWVudC5nZXRVc2VySW5mbygpO1xuICAgICRzY29wZS5jb25maWcgPSBDbGllbnQuZ2V0Q29uZmlnKCk7XG5cbiAgICAkc2NvcGUuY2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRsb2NhdGlvbi5wYXRoKCcvdXNlcnBhc3N3b3JkJyk7XG4gICAgICAgIC8vIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJyMvdXNlcnBhc3N3b3JkJztcbiAgICB9O1xufV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKS5jb250cm9sbGVyKCdBcHBDb25maWd1cmVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbicsICdDbGllbnQnLCBmdW5jdGlvbiAoJHNjb3BlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgQ2xpZW50KSB7XG4gICAgaWYgKCFDbGllbnQuZ2V0VXNlckluZm8oKS5hZG1pbikgJGxvY2F0aW9uLnBhdGgoJy8nKTtcblxuICAgICRzY29wZS5hcHAgPSBudWxsO1xuICAgICRzY29wZS5wYXNzd29yZCA9ICcnO1xuICAgICRzY29wZS5sb2NhdGlvbiA9ICcnO1xuICAgICRzY29wZS5hY2Nlc3NSZXN0cmljdGlvbiA9ICcnO1xuICAgICRzY29wZS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICRzY29wZS5lcnJvciA9IHt9O1xuICAgICRzY29wZS5kb21haW4gPSAnJztcbiAgICAkc2NvcGUucG9ydEJpbmRpbmdzID0geyB9O1xuXG4gICAgJHNjb3BlLmNvbmZpZ3VyZUFwcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJHNjb3BlLmVycm9yLm5hbWUgPSBudWxsO1xuICAgICAgICAkc2NvcGUuZXJyb3IucGFzc3dvcmQgPSBudWxsO1xuXG4gICAgICAgIHZhciBwb3J0QmluZGluZ3MgPSB7IH07XG4gICAgICAgIGZvciAodmFyIGNvbnRhaW5lclBvcnQgaW4gJHNjb3BlLnBvcnRCaW5kaW5ncykge1xuICAgICAgICAgICAgcG9ydEJpbmRpbmdzW2NvbnRhaW5lclBvcnRdID0gJHNjb3BlLnBvcnRCaW5kaW5nc1tjb250YWluZXJQb3J0XS5ob3N0UG9ydDtcbiAgICAgICAgfVxuXG4gICAgICAgIENsaWVudC5jb25maWd1cmVBcHAoJHJvdXRlUGFyYW1zLmFwcElkLCAkc2NvcGUucGFzc3dvcmQsIHsgbG9jYXRpb246ICRzY29wZS5sb2NhdGlvbiwgcG9ydEJpbmRpbmdzOiBwb3J0QmluZGluZ3MsIGFjY2Vzc1Jlc3RyaWN0aW9uOiAkc2NvcGUuYWNjZXNzUmVzdHJpY3Rpb24gfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3Iuc3RhdHVzQ29kZSA9PT0gNDAzKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvci5wYXNzd29yZCA9ICdXcm9uZyBwYXNzd29yZCBwcm92aWRlZC4nO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFzc3dvcmQgPSAnJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IubmFtZSA9ICdBcHAgd2l0aCB0aGUgbmFtZSAnICsgJHNjb3BlLmFwcC5uYW1lICsgJyBjYW5ub3QgYmUgY29uZmlndXJlZC4nO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICRzY29wZS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoJyMvYXBwLycgKyAkcm91dGVQYXJhbXMuYXBwSWQgKyAnL2RldGFpbHMnKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50Lm9uUmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAkc2NvcGUuZG9tYWluID0gQ2xpZW50LmdldENvbmZpZygpLmZxZG47XG5cbiAgICAgICAgQ2xpZW50LmdldEFwcCgkcm91dGVQYXJhbXMuYXBwSWQsIGZ1bmN0aW9uIChlcnJvciwgYXBwKSB7XG4gICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSBlcnJvciB8fCB7IH07XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcblxuICAgICAgICAgICAgJHNjb3BlLmFwcCA9IGFwcDtcbiAgICAgICAgICAgICRzY29wZS5sb2NhdGlvbiA9IGFwcC5sb2NhdGlvbjtcbiAgICAgICAgICAgICRzY29wZS5wb3J0QmluZGluZ3MgPSBhcHAubWFuaWZlc3QudGNwUG9ydHM7XG4gICAgICAgICAgICAkc2NvcGUuYWNjZXNzUmVzdHJpY3Rpb24gPSBhcHAuYWNjZXNzUmVzdHJpY3Rpb247XG4gICAgICAgICAgICBmb3IgKHZhciBjb250YWluZXJQb3J0IGluICRzY29wZS5wb3J0QmluZGluZ3MpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9ydEJpbmRpbmdzW2NvbnRhaW5lclBvcnRdLmhvc3RQb3J0ID0gYXBwLnBvcnRCaW5kaW5nc1tjb250YWluZXJQb3J0XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXRMb2NhdGlvbicpLmZvY3VzKCk7XG59XSk7XG4iLCIvKiBnbG9iYWwgJDp0cnVlICovXG4vKiBnbG9iYWwgUmlja3NoYXc6dHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpLmNvbnRyb2xsZXIoJ0FwcERldGFpbHNDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbicsICdDbGllbnQnLCBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sIENsaWVudCkge1xuICAgIGlmICghQ2xpZW50LmdldFVzZXJJbmZvKCkuYWRtaW4pICRsb2NhdGlvbi5wYXRoKCcvJyk7XG5cbiAgICAkc2NvcGUuYXBwID0ge307XG4gICAgJHNjb3BlLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgJHNjb3BlLnVwZGF0ZUF2YWlsYWJsZSA9IGZhbHNlO1xuICAgICRzY29wZS5hY3RpdmVUYWIgPSAnZGF5JztcbiAgICAkc2NvcGUudXBkYXRlVmVyc2lvbiA9IG51bGw7XG4gICAgJHNjb3BlLnBhc3N3b3JkID0gJyc7XG4gICAgJHNjb3BlLnBhc3N3b3JkV3JvbmcgPSBmYWxzZTtcblxuICAgICRzY29wZS5zdGFydEFwcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgQ2xpZW50LnN0YXJ0QXBwKCRyb3V0ZVBhcmFtcy5hcHBJZCwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLnN0b3BBcHAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIENsaWVudC5zdG9wQXBwKCRyb3V0ZVBhcmFtcy5hcHBJZCwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLnVwZGF0ZUFwcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJHNjb3BlLnBhc3N3b3JkV3JvbmcgPSBmYWxzZTtcblxuICAgICAgICBDbGllbnQudXBkYXRlQXBwKCRyb3V0ZVBhcmFtcy5hcHBJZCwgJHNjb3BlLnVwZGF0ZVZlcnNpb24sICRzY29wZS5wYXNzd29yZCwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgJiYgZXJyb3Iuc3RhdHVzQ29kZSA9PT0gNDAzKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnBhc3N3b3JkID0gJyc7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnBhc3N3b3JkV3JvbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICQoJyNpbnB1dFBhc3N3b3JkVXBkYXRlJykuZm9jdXMoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCgnI3VwZGF0ZUFwcE1vZGFsJykubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlQXZhaWxhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZVZlcnNpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgICRzY29wZS5wYXNzd29yZCA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLnVuaW5zdGFsbEFwcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJHNjb3BlLnBhc3N3b3JkV3JvbmcgPSBmYWxzZTtcblxuICAgICAgICBDbGllbnQudW5pbnN0YWxsQXBwKCRyb3V0ZVBhcmFtcy5hcHBJZCwgJHNjb3BlLnBhc3N3b3JkLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvciAmJiBlcnJvci5zdGF0dXNDb2RlID09PSA0MDMpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucGFzc3dvcmQgPSAnJztcbiAgICAgICAgICAgICAgICAkc2NvcGUucGFzc3dvcmRXcm9uZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgJCgnI2lucHV0UGFzc3dvcmRVbmluc3RhbGwnKS5mb2N1cygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKCcjdW5pbnN0YWxsQXBwTW9kYWwnKS5tb2RhbCgnaGlkZScpO1xuICAgICAgICAgICAgICAgICRzY29wZS5wYXNzd29yZCA9ICcnO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJyMvJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbmRlckNwdShhY3RpdmVUYWIsIGNwdURhdGEpIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybWVkQ3B1ID0gWyBdO1xuXG4gICAgICAgIGlmIChjcHVEYXRhICYmIGNwdURhdGEuZGF0YXBvaW50cykgdHJhbnNmb3JtZWRDcHUgPSBjcHVEYXRhLmRhdGFwb2ludHMubWFwKGZ1bmN0aW9uIChwb2ludCkgeyByZXR1cm4geyB5OiBwb2ludFswXSwgeDogcG9pbnRbMV0gfSB9KTtcblxuICAgICAgICB2YXIgY3B1R3JhcGggPSBuZXcgUmlja3NoYXcuR3JhcGgoe1xuICAgICAgICAgICAgZWxlbWVudDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyBhY3RpdmVUYWIgKyAnQ3B1Q2hhcnQnKSxcbiAgICAgICAgICAgIHJlbmRlcmVyOiAnYXJlYScsXG4gICAgICAgICAgICB3aWR0aDogNTgwLFxuICAgICAgICAgICAgaGVpZ2h0OiAyNTAsXG4gICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICBtYXg6IDEwMCxcbiAgICAgICAgICAgIHNlcmllczogW3tcbiAgICAgICAgICAgICAgICBjb2xvcjogJ3N0ZWVsYmx1ZScsXG4gICAgICAgICAgICAgICAgZGF0YTogdHJhbnNmb3JtZWRDcHUgfHwgWyBdLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdjcHUnXG4gICAgICAgICAgICB9XVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgY3B1WEF4aXMgPSBuZXcgUmlja3NoYXcuR3JhcGguQXhpcy5UaW1lKHsgZ3JhcGg6IGNwdUdyYXBoIH0pO1xuICAgICAgICB2YXIgY3B1WUF4aXMgPSBuZXcgUmlja3NoYXcuR3JhcGguQXhpcy5ZKHtcbiAgICAgICAgICAgIGdyYXBoOiBjcHVHcmFwaCxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiAnbGVmdCcsXG4gICAgICAgICAgICB0aWNrRm9ybWF0OiBSaWNrc2hhdy5GaXh0dXJlcy5OdW1iZXIuZm9ybWF0S01CVCxcbiAgICAgICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGFjdGl2ZVRhYiArICdDcHVZQXhpcycpLFxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgY3B1SG92ZXJEZXRhaWwgPSBuZXcgUmlja3NoYXcuR3JhcGguSG92ZXJEZXRhaWwoe1xuICAgICAgICAgICAgZ3JhcGg6IGNwdUdyYXBoLFxuICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihzZXJpZXMsIHgsIHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3dhdGNoID0gJzxzcGFuIGNsYXNzPVwiZGV0YWlsX3N3YXRjaFwiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogJyArIHNlcmllcy5jb2xvciArICdcIj48L3NwYW4+JztcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IHN3YXRjaCArIHNlcmllcy5uYW1lICsgXCI6IFwiICsgbmV3IE51bWJlcih5KS50b0ZpeGVkKDIpICsgJyU8YnI+JztcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY3B1R3JhcGgucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVuZGVyTWVtb3J5KGFjdGl2ZVRhYiwgbWVtb3J5RGF0YSkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtZWRNZW1vcnkgPSBbIF07XG5cbiAgICAgICAgaWYgKG1lbW9yeURhdGEgJiYgbWVtb3J5RGF0YS5kYXRhcG9pbnRzKSB0cmFuc2Zvcm1lZE1lbW9yeSA9IG1lbW9yeURhdGEuZGF0YXBvaW50cy5tYXAoZnVuY3Rpb24gKHBvaW50KSB7IHJldHVybiB7IHk6IHBvaW50WzBdLCB4OiBwb2ludFsxXSB9IH0pO1xuXG4gICAgICAgIHZhciBtZW1vcnlHcmFwaCA9IG5ldyBSaWNrc2hhdy5HcmFwaCh7XG4gICAgICAgICAgICBlbGVtZW50OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIGFjdGl2ZVRhYiArICdNZW1vcnlDaGFydCcpLFxuICAgICAgICAgICAgcmVuZGVyZXI6ICdhcmVhJyxcbiAgICAgICAgICAgIHdpZHRoOiA1ODAsXG4gICAgICAgICAgICBoZWlnaHQ6IDI1MCxcbiAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgIG1heDogMiAqIDEwMjQgKiAxMDI0ICogMTAyNCwgLy8gMmdiXG4gICAgICAgICAgICBzZXJpZXM6IFsge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAnc3RlZWxibHVlJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB0cmFuc2Zvcm1lZE1lbW9yeSB8fCBbIF0sXG4gICAgICAgICAgICAgICAgbmFtZTogJ21lbW9yeSdcbiAgICAgICAgICAgIH0gXVxuICAgICAgICB9ICk7XG5cbiAgICAgICAgdmFyIG1lbW9yeVhBeGlzID0gbmV3IFJpY2tzaGF3LkdyYXBoLkF4aXMuVGltZSh7IGdyYXBoOiBtZW1vcnlHcmFwaCB9KTtcbiAgICAgICAgdmFyIG1lbW9yeVlBeGlzID0gbmV3IFJpY2tzaGF3LkdyYXBoLkF4aXMuWSh7XG4gICAgICAgICAgICBncmFwaDogbWVtb3J5R3JhcGgsXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogJ2xlZnQnLFxuICAgICAgICAgICAgdGlja0Zvcm1hdDogUmlja3NoYXcuRml4dHVyZXMuTnVtYmVyLmZvcm1hdEtNQlQsXG4gICAgICAgICAgICBlbGVtZW50OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhY3RpdmVUYWIgKyAnTWVtb3J5WUF4aXMnKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIG1lbW9yeUhvdmVyRGV0YWlsID0gbmV3IFJpY2tzaGF3LkdyYXBoLkhvdmVyRGV0YWlsKHtcbiAgICAgICAgICAgIGdyYXBoOiBtZW1vcnlHcmFwaCxcbiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oc2VyaWVzLCB4LCB5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN3YXRjaCA9ICc8c3BhbiBjbGFzcz1cImRldGFpbF9zd2F0Y2hcIiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6ICcgKyBzZXJpZXMuY29sb3IgKyAnXCI+PC9zcGFuPic7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBzd2F0Y2ggKyBzZXJpZXMubmFtZSArIFwiOiBcIiArIG5ldyBOdW1iZXIoeS8oMTAyNCoxMDI0KSkudG9GaXhlZCgyKSArICdNQjxicj4nO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBtZW1vcnlHcmFwaC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJEaXNrKGFjdGl2ZVRhYiwgZGlza0RhdGEpIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybWVkRGlzayA9IFsgXTtcblxuICAgICAgICBpZiAoZGlza0RhdGEgJiYgZGlza0RhdGEuZGF0YXBvaW50cykgdHJhbnNmb3JtZWREaXNrID0gZGlza0RhdGEuZGF0YXBvaW50cy5tYXAoZnVuY3Rpb24gKHBvaW50KSB7IHJldHVybiB7IHk6IHBvaW50WzBdLCB4OiBwb2ludFsxXSB9IH0pO1xuXG4gICAgICAgIHZhciBkaXNrR3JhcGggPSBuZXcgUmlja3NoYXcuR3JhcGgoe1xuICAgICAgICAgICAgZWxlbWVudDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyBhY3RpdmVUYWIgKyAnRGlza0NoYXJ0JyksXG4gICAgICAgICAgICByZW5kZXJlcjogJ2FyZWEnLFxuICAgICAgICAgICAgd2lkdGg6IDU4MCxcbiAgICAgICAgICAgIGhlaWdodDogMjUwLFxuICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgbWF4OiAzMCAqIDEwMjQgKiAxMDI0ICogMTAyNCwgLy8gMzBnYlxuICAgICAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgICAgIGNvbG9yOiAnc3RlZWxibHVlJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB0cmFuc2Zvcm1lZERpc2sgfHwgWyBdLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdhcHBzJ1xuICAgICAgICAgICAgfV1cbiAgICAgICAgfSApO1xuXG4gICAgICAgIHZhciBkaXNrWEF4aXMgPSBuZXcgUmlja3NoYXcuR3JhcGguQXhpcy5UaW1lKHsgZ3JhcGg6IGRpc2tHcmFwaCB9KTtcbiAgICAgICAgdmFyIGRpc2tZQXhpcyA9IG5ldyBSaWNrc2hhdy5HcmFwaC5BeGlzLlkoe1xuICAgICAgICAgICAgZ3JhcGg6IGRpc2tHcmFwaCxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiAnbGVmdCcsXG4gICAgICAgICAgICB0aWNrRm9ybWF0OiBSaWNrc2hhdy5GaXh0dXJlcy5OdW1iZXIuZm9ybWF0S01CVCxcbiAgICAgICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGFjdGl2ZVRhYiArICdEaXNrWUF4aXMnKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGRpc2tIb3ZlckRldGFpbCA9IG5ldyBSaWNrc2hhdy5HcmFwaC5Ib3ZlckRldGFpbCh7XG4gICAgICAgICAgICBncmFwaDogZGlza0dyYXBoLFxuICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihzZXJpZXMsIHgsIHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3dhdGNoID0gJzxzcGFuIGNsYXNzPVwiZGV0YWlsX3N3YXRjaFwiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogJyArIHNlcmllcy5jb2xvciArICdcIj48L3NwYW4+JztcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IHN3YXRjaCArIHNlcmllcy5uYW1lICsgXCI6IFwiICsgbmV3IE51bWJlcih5LygxMDI0ICogMTAyNCkpLnRvRml4ZWQoMikgKyAnTUI8YnI+JztcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGRpc2tMZWdlbmQgPSBuZXcgUmlja3NoYXcuR3JhcGguTGVnZW5kKHtcbiAgICAgICAgICAgIGdyYXBoOiBkaXNrR3JhcGgsXG4gICAgICAgICAgICBlbGVtZW50OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhY3RpdmVUYWIgKyAnRGlza0xlZ2VuZCcpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRpc2tHcmFwaC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICAkc2NvcGUudXBkYXRlR3JhcGhzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY3B1VXNhZ2VUYXJnZXQgPVxuICAgICAgICAgICAgJ25vbk5lZ2F0aXZlRGVyaXZhdGl2ZSgnICtcbiAgICAgICAgICAgICAgICAnc3VtU2VyaWVzKGNvbGxlY3RkLmxvY2FsaG9zdC50YWJsZS0nICsgJHNjb3BlLmFwcC5pZCArICctY3B1LmdhdWdlLXVzZXIsJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdjb2xsZWN0ZC5sb2NhbGhvc3QudGFibGUtJyArICRzY29wZS5hcHAuaWQgKyAnLWNwdS5nYXVnZS1zeXN0ZW0pKSc7IC8vIGFzc3VtZXMgMTAwIGppZmZpZXMgcGVyIHNlYyAoVVNFUl9IWilcblxuICAgICAgICB2YXIgbWVtb3J5VXNhZ2VUYXJnZXQgPSAnY29sbGVjdGQubG9jYWxob3N0LnRhYmxlLScgKyAkc2NvcGUuYXBwLmlkICsgJy1tZW1vcnkuZ2F1Z2UtbWF4X3VzYWdlX2luX2J5dGVzJztcblxuICAgICAgICB2YXIgZGlza1VzYWdlVGFyZ2V0ID0gJ2NvbGxlY3RkLmxvY2FsaG9zdC5maWxlY291bnQtJyArICRzY29wZS5hcHAuaWQgKyAnLWFwcGRhdGEuYnl0ZXMnO1xuXG4gICAgICAgIHZhciBhY3RpdmVUYWIgPSAkc2NvcGUuYWN0aXZlVGFiO1xuICAgICAgICB2YXIgZnJvbSA9ICctMjRob3Vycyc7XG4gICAgICAgIHN3aXRjaCAoYWN0aXZlVGFiKSB7XG4gICAgICAgIGNhc2UgJ2RheSc6IGZyb20gPSAnLTI0aG91cnMnOyBicmVhaztcbiAgICAgICAgY2FzZSAnbW9udGgnOiBmcm9tID0gJy0xbW9udGgnOyBicmVhaztcbiAgICAgICAgY2FzZSAneWVhcic6IGZyb20gPSAnLTF5ZWFyJzsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IGNvbnNvbGUubG9nKCdpbnRlcm5hbCBlcnJyb3InKTtcbiAgICAgICAgfVxuXG4gICAgICAgIENsaWVudC5ncmFwaHMoWyBjcHVVc2FnZVRhcmdldCwgbWVtb3J5VXNhZ2VUYXJnZXQsIGRpc2tVc2FnZVRhcmdldCBdLCBmcm9tLCBmdW5jdGlvbiAoZXJyb3IsIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuIGNvbnNvbGUubG9nKGVycm9yKTtcblxuICAgICAgICAgICAgcmVuZGVyQ3B1KGFjdGl2ZVRhYiwgZGF0YVswXSk7XG5cbiAgICAgICAgICAgIHJlbmRlck1lbW9yeShhY3RpdmVUYWIsIGRhdGFbMV0pO1xuXG4gICAgICAgICAgICByZW5kZXJEaXNrKGFjdGl2ZVRhYiwgZGF0YVsyXSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBDbGllbnQub25SZWFkeShmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgQ2xpZW50LmdldEFwcCgkcm91dGVQYXJhbXMuYXBwSWQsIGZ1bmN0aW9uIChlcnJvciwgYXBwKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcjLyc7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkc2NvcGUuYXBwID0gYXBwO1xuICAgICAgICAgICAgJHNjb3BlLmFwcExvZ1VybCA9IENsaWVudC5nZXRBcHBMb2dVcmwoYXBwLmlkKTtcblxuICAgICAgICAgICAgaWYgKENsaWVudC5nZXRDb25maWcoKS51cGRhdGUgJiYgQ2xpZW50LmdldENvbmZpZygpLnVwZGF0ZS5hcHBzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFwcFVwZGF0ZXMgPSBDbGllbnQuZ2V0Q29uZmlnKCkudXBkYXRlLmFwcHM7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcHBVcGRhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcHBVcGRhdGVzW2ldLmFwcElkID09PSAkc2NvcGUuYXBwLmFwcFN0b3JlSWQgJiYgYXBwVXBkYXRlc1tpXS52ZXJzaW9uICE9PSAgJHNjb3BlLmFwcC52ZXJzaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlQXZhaWxhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVWZXJzaW9uID0gYXBwVXBkYXRlc1tpXS52ZXJzaW9uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkc2NvcGUudXBkYXRlR3JhcGhzKCk7XG5cbiAgICAgICAgICAgICRzY29wZS5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKS5jb250cm9sbGVyKCdBcHBJbnN0YWxsQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnQ2xpZW50JywgJ0FwcFN0b3JlJywgJyR0aW1lb3V0JywgZnVuY3Rpb24gKCRzY29wZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sIENsaWVudCwgQXBwU3RvcmUsICR0aW1lb3V0KSB7XG4gICAgaWYgKCFDbGllbnQuZ2V0VXNlckluZm8oKS5hZG1pbikgJGxvY2F0aW9uLnBhdGgoJy8nKTtcblxuICAgICRzY29wZS5hcHAgPSBudWxsO1xuICAgICRzY29wZS5wYXNzd29yZCA9ICcnO1xuICAgICRzY29wZS5sb2NhdGlvbiA9ICcnO1xuICAgICRzY29wZS5hY2Nlc3NSZXN0cmljdGlvbiA9ICcnO1xuICAgICRzY29wZS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICRzY29wZS5lcnJvciA9IHsgfTtcbiAgICAkc2NvcGUuZG9tYWluID0gJyc7XG4gICAgJHNjb3BlLnZlcnNpb24gPSBudWxsO1xuICAgICRzY29wZS5wb3J0QmluZGluZ3MgPSB7IH07XG4gICAgJHNjb3BlLmhvc3RQb3J0TWluID0gMTAyNTtcbiAgICAkc2NvcGUuaG9zdFBvcnRNYXggPSA5OTk5O1xuXG4gICAgQ2xpZW50Lm9uUmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAkc2NvcGUuZG9tYWluID0gQ2xpZW50LmdldENvbmZpZygpLmZxZG47XG5cbiAgICAgICAgQXBwU3RvcmUuZ2V0QXBwQnlJZCgkcm91dGVQYXJhbXMuYXBwU3RvcmVJZCwgZnVuY3Rpb24gKGVycm9yLCBhcHApIHtcbiAgICAgICAgICAgICRzY29wZS5lcnJvciA9IGVycm9yIHx8IHsgfTtcbiAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuO1xuICAgICAgICAgICAgJHNjb3BlLmFwcCA9IGFwcDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVE9ETzogdGhpcyBzaG91bGQgYmUgYmFzZWQgb24gYm94VmVyc2lvblxuICAgICAgICBBcHBTdG9yZS5nZXRNYW5pZmVzdCgkcm91dGVQYXJhbXMuYXBwU3RvcmVJZCwgZnVuY3Rpb24gKGVycm9yLCBtYW5pZmVzdCkge1xuICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gZXJyb3IgfHwgeyB9O1xuICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAkc2NvcGUudmVyc2lvbiA9IG1hbmlmZXN0LnZlcnNpb247XG4gICAgICAgICAgICAkc2NvcGUucG9ydEJpbmRpbmdzID0gbWFuaWZlc3QudGNwUG9ydHM7XG4gICAgICAgICAgICAkc2NvcGUuYWNjZXNzUmVzdHJpY3Rpb24gPSBtYW5pZmVzdC5hY2Nlc3NSZXN0cmljdGlvbiB8fCAnJztcbiAgICAgICAgICAgIC8vIGRlZmF1bHQgc2V0dGluZyBpcyB0byBtYXAgcG9ydHMgYXMgdGhleSBhcmUgaW4gbWFuaWZlc3RcbiAgICAgICAgICAgIGZvciAodmFyIHBvcnQgaW4gJHNjb3BlLnBvcnRCaW5kaW5ncykge1xuICAgICAgICAgICAgICAgICRzY29wZS5wb3J0QmluZGluZ3NbcG9ydF0uaG9zdFBvcnQgPSBwYXJzZUludChwb3J0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuaW5zdGFsbEFwcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJHNjb3BlLmVycm9yLm5hbWUgPSBudWxsO1xuICAgICAgICAkc2NvcGUuZXJyb3IucGFzc3dvcmQgPSBudWxsO1xuXG4gICAgICAgIHZhciBwb3J0QmluZGluZ3MgPSB7IH07XG4gICAgICAgIGZvciAodmFyIHBvcnQgaW4gJHNjb3BlLnBvcnRCaW5kaW5ncykge1xuICAgICAgICAgICAgcG9ydEJpbmRpbmdzW3BvcnRdID0gJHNjb3BlLnBvcnRCaW5kaW5nc1twb3J0XS5ob3N0UG9ydDtcbiAgICAgICAgfVxuXG4gICAgICAgIENsaWVudC5pbnN0YWxsQXBwKCRyb3V0ZVBhcmFtcy5hcHBTdG9yZUlkLCAkc2NvcGUudmVyc2lvbiwgJHNjb3BlLnBhc3N3b3JkLCAkc2NvcGUuYXBwLnRpdGxlLCB7IGxvY2F0aW9uOiAkc2NvcGUubG9jYXRpb24sIHBvcnRCaW5kaW5nczogcG9ydEJpbmRpbmdzLCBhY2Nlc3NSZXN0cmljdGlvbjogJHNjb3BlLmFjY2Vzc1Jlc3RyaWN0aW9uIH0sIGZ1bmN0aW9uIChlcnJvciwgYXBwSWQpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5zdGF0dXNDb2RlID09PSA0MDkpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yLm5hbWUgPSAnQXBwbGljYXRpb24gYWxyZWFkeSBleGlzdHMuJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yLnN0YXR1c0NvZGUgPT09IDQwMykge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IucGFzc3dvcmQgPSAnV3JvbmcgcGFzc3dvcmQgcHJvdmlkZWQuJztcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhc3N3b3JkID0gJyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yLm5hbWUgPSAnQXBwIHdpdGggdGhlIG5hbWUgJyArICRzY29wZS5hcHAubmFtZSArICcgY2Fubm90IGJlIGluc3RhbGxlZC4nO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICRzY29wZS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoJyMvYXBwLycgKyBhcHBJZCArICcvZGV0YWlscycpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuICAgIH07XG5cbiAgICAvLyBoYWNrIGZvciBhdXRvZm9jdXMgd2l0aCBhbmd1bGFyXG4gICAgJHNjb3BlLiRvbignJHZpZXdDb250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7ICQoJ2lucHV0W2F1dG9mb2N1c106dmlzaWJsZTpmaXJzdCcpLmZvY3VzKCk7IH0sIDEwMDApO1xuICAgIH0pO1xufV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKS5jb250cm9sbGVyKCdBcHBMaXN0Q29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRsb2NhdGlvbicsICdDbGllbnQnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sIENsaWVudCkge1xuICAgICRzY29wZS5pbnN0YWxsZWRBcHBzID0gQ2xpZW50LmdldEluc3RhbGxlZEFwcHMoKTtcbiAgICAkc2NvcGUuY29uZmlnID0gQ2xpZW50LmdldENvbmZpZygpO1xuXG4gICAgJHNjb3BlLmFwcGNvbmZpZ3VyZSA9IHtcbiAgICAgICAgYnVzeTogZmFsc2UsXG4gICAgICAgIGVycm9yOiB7fSxcbiAgICAgICAgYXBwOiB7fSxcbiAgICAgICAgbG9jYXRpb246ICcnLFxuICAgICAgICBwYXNzd29yZDogJycsXG4gICAgICAgIHBvcnRCaW5kaW5nczoge30sXG4gICAgICAgIGFjY2Vzc1Jlc3RyaWN0aW9uOiAnJ1xuICAgIH07XG5cbiAgICAkc2NvcGUuc2hvd0NvbmZpZ3VyZSA9IGZ1bmN0aW9uIChhcHApIHtcbiAgICAgICAgJHNjb3BlLmFwcGNvbmZpZ3VyZS5hcHAgPSBhcHA7XG4gICAgICAgICRzY29wZS5hcHBjb25maWd1cmUubG9jYXRpb24gPSBhcHAubG9jYXRpb247XG4gICAgICAgICRzY29wZS5hcHBjb25maWd1cmUucG9ydEJpbmRpbmdzID0gYXBwLm1hbmlmZXN0LnRjcFBvcnRzO1xuICAgICAgICAkc2NvcGUuYXBwY29uZmlndXJlLmFjY2Vzc1Jlc3RyaWN0aW9uID0gYXBwLmFjY2Vzc1Jlc3RyaWN0aW9uO1xuICAgICAgICBmb3IgKHZhciBjb250YWluZXJQb3J0IGluICRzY29wZS5hcHBjb25maWd1cmUucG9ydEJpbmRpbmdzKSB7XG4gICAgICAgICAgICAkc2NvcGUuYXBwY29uZmlndXJlLnBvcnRCaW5kaW5nc1tjb250YWluZXJQb3J0XS5ob3N0UG9ydCA9IGFwcC5wb3J0QmluZGluZ3NbY29udGFpbmVyUG9ydF07XG4gICAgICAgIH1cblxuICAgICAgICAkKCcjYXBwQ29uZmlndXJlTW9kYWwnKS5tb2RhbCgnc2hvdycpO1xuICAgIH07XG5cbiAgICAkc2NvcGUuZG9Db25maWd1cmUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgJHNjb3BlLmFwcGNvbmZpZ3VyZS5idXN5ID0gdHJ1ZTtcbiAgICAgICAgJHNjb3BlLmFwcGNvbmZpZ3VyZS5lcnJvci5uYW1lID0gbnVsbDtcbiAgICAgICAgJHNjb3BlLmFwcGNvbmZpZ3VyZS5lcnJvci5wYXNzd29yZCA9IG51bGw7XG5cbiAgICAgICAgdmFyIHBvcnRCaW5kaW5ncyA9IHsgfTtcbiAgICAgICAgZm9yICh2YXIgY29udGFpbmVyUG9ydCBpbiAkc2NvcGUuYXBwY29uZmlndXJlLnBvcnRCaW5kaW5ncykge1xuICAgICAgICAgICAgcG9ydEJpbmRpbmdzW2NvbnRhaW5lclBvcnRdID0gJHNjb3BlLmFwcGNvbmZpZ3VyZS5wb3J0QmluZGluZ3NbY29udGFpbmVyUG9ydF0uaG9zdFBvcnQ7XG4gICAgICAgIH1cblxuICAgICAgICBDbGllbnQuY29uZmlndXJlQXBwKCRzY29wZS5hcHBjb25maWd1cmUuYXBwLmlkLCAkc2NvcGUuYXBwY29uZmlndXJlLnBhc3N3b3JkLCB7IGxvY2F0aW9uOiAkc2NvcGUuYXBwY29uZmlndXJlLmxvY2F0aW9uLCBwb3J0QmluZGluZ3M6IHBvcnRCaW5kaW5ncywgYWNjZXNzUmVzdHJpY3Rpb246ICRzY29wZS5hcHBjb25maWd1cmUuYWNjZXNzUmVzdHJpY3Rpb24gfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3Iuc3RhdHVzQ29kZSA9PT0gNDAzKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBjb25maWd1cmUuZXJyb3IucGFzc3dvcmQgPSAnV3JvbmcgcGFzc3dvcmQgcHJvdmlkZWQuJztcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcGNvbmZpZ3VyZS5wYXNzd29yZCA9ICcnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBjb25maWd1cmUuZXJyb3IubmFtZSA9ICdBcHAgd2l0aCB0aGUgbmFtZSAnICsgJHNjb3BlLmFwcGNvbmZpZ3VyZS5hcHAubmFtZSArICcgY2Fubm90IGJlIGNvbmZpZ3VyZWQuJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYXBwY29uZmlndXJlLmJ1c3kgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRzY29wZS5hcHBjb25maWd1cmUucGFzc3dvcmQgPSAnJztcbiAgICAgICAgICAgICRzY29wZS5hcHBjb25maWd1cmUuYnVzeSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAkKCcjYXBwQ29uZmlndXJlTW9kYWwnKS5tb2RhbCgnaGlkZScpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuICAgIH07XG59XSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpLmNvbnRyb2xsZXIoJ0Rhc2hib2FyZENvbnRyb2xsZXInLCBmdW5jdGlvbiAoKSB7XG5cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKS5jb250cm9sbGVyKCdEbnNDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJ0NsaWVudCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgQ2xpZW50KSB7XG4gICAgaWYgKCFDbGllbnQuZ2V0VXNlckluZm8oKS5hZG1pbikgJGxvY2F0aW9uLnBhdGgoJy8nKTtcblxuICAgICRzY29wZS5yZWFkeSA9IGZhbHNlO1xuICAgICRzY29wZS51c2VyID0gQ2xpZW50LmdldFVzZXJJbmZvKCk7XG4gICAgJHNjb3BlLmNvbmZpZyA9IENsaWVudC5nZXRDb25maWcoKTtcbiAgICAkc2NvcGUubmFrZWREb21haW5BcHAgPSBudWxsO1xuICAgICRzY29wZS5jZXJ0aWZpY2F0ZUZpbGUgPSBudWxsO1xuICAgICRzY29wZS5jZXJ0aWZpY2F0ZUZpbGVOYW1lID0gJyc7XG4gICAgJHNjb3BlLmtleUZpbGUgPSBudWxsO1xuICAgICRzY29wZS5rZXlGaWxlTmFtZSA9ICcnO1xuXG4gICAgJHNjb3BlLnNldE5ha2VkRG9tYWluID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXBwaWQgPSAkc2NvcGUubmFrZWREb21haW5BcHAgPyAkc2NvcGUubmFrZWREb21haW5BcHAuaWQgOiAnYWRtaW4nO1xuXG4gICAgICAgIENsaWVudC5zZXROYWtlZERvbWFpbihhcHBpZCwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybiBjb25zb2xlLmVycm9yKCdFcnJvciBzZXR0aW5nIG5ha2VkIGRvbWFpbicsIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICRzY29wZS5iYWNrdXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoJyNiYWNrdXBQcm9ncmVzc01vZGFsJykubW9kYWwoJ3Nob3cnKTtcbiAgICAgICAgJHNjb3BlLiRwYXJlbnQuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgICAgICBDbGllbnQuYmFja3VwKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yKSBjb25zb2xlLmVycm9yKGVycm9yKTtcblxuICAgICAgICAgICAgLy8gbm93IHN0YXJ0IHF1ZXJ5XG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja0lmRG9uZSgpIHtcbiAgICAgICAgICAgICAgICBDbGllbnQudmVyc2lvbihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoY2hlY2tJZkRvbmUsIDEwMDApO1xuXG4gICAgICAgICAgICAgICAgICAgICQoJyNiYWNrdXBQcm9ncmVzc01vZGFsJykubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRwYXJlbnQuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChjaGVja0lmRG9uZSwgNTAwMCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkKCcjdXBkYXRlTW9kYWwnKS5tb2RhbCgnaGlkZScpO1xuXG4gICAgICAgICRzY29wZS4kcGFyZW50LmluaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICAgICAgQ2xpZW50LnVwZGF0ZShmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikgY29uc29sZS5lcnJvcihlcnJvcik7XG5cbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy91cGRhdGUuaHRtbCc7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaWRDZXJ0aWZpY2F0ZScpLm9uY2hhbmdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHNjb3BlLmNlcnRpZmljYXRlRmlsZSA9IGV2ZW50LnRhcmdldC5maWxlc1swXTtcbiAgICAgICAgICAgICRzY29wZS5jZXJ0aWZpY2F0ZUZpbGVOYW1lID0gZXZlbnQudGFyZ2V0LmZpbGVzWzBdLm5hbWU7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaWRLZXknKS5vbmNoYW5nZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRzY29wZS5rZXlGaWxlID0gZXZlbnQudGFyZ2V0LmZpbGVzWzBdO1xuICAgICAgICAgICAgJHNjb3BlLmtleUZpbGVOYW1lID0gZXZlbnQudGFyZ2V0LmZpbGVzWzBdLm5hbWU7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUuc2V0Q2VydGlmaWNhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdXaWxsIHNldCB0aGUgY2VydGlmaWNhdGUnKTtcblxuICAgICAgICBpZiAoISRzY29wZS5jZXJ0aWZpY2F0ZUZpbGUpIHJldHVybiBjb25zb2xlLmxvZygnQ2VydGlmaWNhdGUgbm90IHNldCcpO1xuICAgICAgICBpZiAoISRzY29wZS5rZXlGaWxlKSByZXR1cm4gY29uc29sZS5sb2coJ0tleSBub3Qgc2V0Jyk7XG5cbiAgICAgICAgQ2xpZW50LnNldENlcnRpZmljYXRlKCRzY29wZS5jZXJ0aWZpY2F0ZUZpbGUsICRzY29wZS5rZXlGaWxlLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuIGNvbnNvbGUubG9nKGVycm9yKTtcblxuICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQod2luZG93LmxvY2F0aW9uLnJlbG9hZC5iaW5kKHdpbmRvdy5sb2NhdGlvbiwgdHJ1ZSksIDMwMDApO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgQ2xpZW50Lm9uQ29uZmlnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJHNjb3BlLnRva2VuSW5Vc2UgPSBDbGllbnQuX3Rva2VuO1xuXG4gICAgICAgIENsaWVudC5nZXRBcHBzKGZ1bmN0aW9uIChlcnJvciwgYXBwcykge1xuICAgICAgICAgICAgaWYgKGVycm9yKSBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIGFwcCBsaXN0Jyk7XG4gICAgICAgICAgICAkc2NvcGUuYXBwcyA9IGFwcHM7XG5cbiAgICAgICAgICAgIENsaWVudC5nZXROYWtlZERvbWFpbihmdW5jdGlvbiAoZXJyb3IsIGFwcGlkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm4gY29uc29sZS5lcnJvcihlcnJvcik7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUubmFrZWREb21haW5BcHAgPSBudWxsO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLmFwcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hcHBzW2ldLmlkID09PSBhcHBpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ha2VkRG9tYWluQXBwID0gJHNjb3BlLmFwcHNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICRzY29wZS5yZWFkeSA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XSk7XG4iLCIvKiBnbG9iYWw6Umlja3NoYXc6dHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpLmNvbnRyb2xsZXIoJ0dyYXBoc0NvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9jYXRpb24nLCAnQ2xpZW50JywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCBDbGllbnQpIHtcbiAgICBpZiAoIUNsaWVudC5nZXRVc2VySW5mbygpLmFkbWluKSAkbG9jYXRpb24ucGF0aCgnLycpO1xuXG4gICAgJHNjb3BlLmFjdGl2ZVRhYiA9ICdkYXknO1xuXG4gICAgdmFyIGNwdVVzYWdlVGFyZ2V0ID0gJ3RyYW5zZm9ybU51bGwoJyArXG4gICAgJ3NjYWxlKGRpdmlkZVNlcmllcygnICtcbiAgICAgICAgJ3N1bVNlcmllcyhjb2xsZWN0ZC5sb2NhbGhvc3QuY3B1LTAuY3B1LXN5c3RlbSxjb2xsZWN0ZC5sb2NhbGhvc3QuY3B1LTAuY3B1LW5pY2UsY29sbGVjdGQubG9jYWxob3N0LmNwdS0wLmNwdS11c2VyKSwnICtcbiAgICAgICAgJ3N1bVNlcmllcyhjb2xsZWN0ZC5sb2NhbGhvc3QuY3B1LTAuY3B1LWlkbGUsY29sbGVjdGQubG9jYWxob3N0LmNwdS0wLmNwdS1zeXN0ZW0sY29sbGVjdGQubG9jYWxob3N0LmNwdS0wLmNwdS1uaWNlLGNvbGxlY3RkLmxvY2FsaG9zdC5jcHUtMC5jcHUtdXNlcixjb2xsZWN0ZC5sb2NhbGhvc3QuY3B1LTAuY3B1LXdhaXQpKSwgMTAwKSwgMCknO1xuXG4gICAgdmFyIG5ldHdvcmtVc2FnZVR4VGFyZ2V0ID0gJ3RyYW5zZm9ybU51bGwoY29sbGVjdGQubG9jYWxob3N0LmludGVyZmFjZS1ldGgwLmlmX29jdGV0cy50eCwgMCknO1xuICAgIHZhciBuZXR3b3JrVXNhZ2VSeFRhcmdldCA9ICd0cmFuc2Zvcm1OdWxsKGNvbGxlY3RkLmxvY2FsaG9zdC5pbnRlcmZhY2UtZXRoMC5pZl9vY3RldHMucngsIDApJztcblxuICAgIHZhciBkaXNrVXNhZ2VBcHBzVXNlZFRhcmdldCA9ICd0cmFuc2Zvcm1OdWxsKGNvbGxlY3RkLmxvY2FsaG9zdC5kZi1sb29wMC5kZl9jb21wbGV4LXVzZWQsIDApJztcbiAgICB2YXIgZGlza1VzYWdlRGF0YVVzZWRUYXJnZXQgPSAndHJhbnNmb3JtTnVsbChjb2xsZWN0ZC5sb2NhbGhvc3QuZGYtbG9vcDEuZGZfY29tcGxleC11c2VkLCAwKSc7XG5cbiAgICBmdW5jdGlvbiByZW5kZXJDcHUoYWN0aXZlVGFiLCBjcHVEYXRhKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1lZENwdSA9IFsgXTtcblxuICAgICAgICBpZiAoY3B1RGF0YSAmJiBjcHVEYXRhLmRhdGFwb2ludHMpIHRyYW5zZm9ybWVkQ3B1ID0gY3B1RGF0YS5kYXRhcG9pbnRzLm1hcChmdW5jdGlvbiAocG9pbnQpIHsgcmV0dXJuIHsgeTogcG9pbnRbMF0sIHg6IHBvaW50WzFdIH0gfSk7XG5cbiAgICAgICAgdmFyIGNwdUdyYXBoID0gbmV3IFJpY2tzaGF3LkdyYXBoKHtcbiAgICAgICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgYWN0aXZlVGFiICsgJ0NwdUNoYXJ0JyksXG4gICAgICAgICAgICByZW5kZXJlcjogJ2FyZWEnLFxuICAgICAgICAgICAgd2lkdGg6IDU4MCxcbiAgICAgICAgICAgIGhlaWdodDogMjUwLFxuICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgbWF4OiAxMDAsXG4gICAgICAgICAgICBzZXJpZXM6IFt7XG4gICAgICAgICAgICAgICAgY29sb3I6ICdzdGVlbGJsdWUnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHRyYW5zZm9ybWVkQ3B1LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdjcHUnXG4gICAgICAgICAgICB9XVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgY3B1WEF4aXMgPSBuZXcgUmlja3NoYXcuR3JhcGguQXhpcy5UaW1lKHsgZ3JhcGg6IGNwdUdyYXBoIH0pO1xuICAgICAgICB2YXIgY3B1WUF4aXMgPSBuZXcgUmlja3NoYXcuR3JhcGguQXhpcy5ZKHtcbiAgICAgICAgICAgIGdyYXBoOiBjcHVHcmFwaCxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiAnbGVmdCcsXG4gICAgICAgICAgICB0aWNrRm9ybWF0OiBSaWNrc2hhdy5GaXh0dXJlcy5OdW1iZXIuZm9ybWF0S01CVCxcbiAgICAgICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGFjdGl2ZVRhYiArICdDcHVZQXhpcycpLFxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgY3B1SG92ZXJEZXRhaWwgPSBuZXcgUmlja3NoYXcuR3JhcGguSG92ZXJEZXRhaWwoe1xuICAgICAgICAgICAgZ3JhcGg6IGNwdUdyYXBoLFxuICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihzZXJpZXMsIHgsIHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3dhdGNoID0gJzxzcGFuIGNsYXNzPVwiZGV0YWlsX3N3YXRjaFwiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogJyArIHNlcmllcy5jb2xvciArICdcIj48L3NwYW4+JztcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IHN3YXRjaCArIHNlcmllcy5uYW1lICsgXCI6IFwiICsgbmV3IE51bWJlcih5KS50b0ZpeGVkKDIpICsgJyU8YnI+JztcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY3B1R3JhcGgucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVuZGVyTmV0d29yayhhY3RpdmVUYWIsIHR4RGF0YSwgcnhEYXRhKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1lZFR4ID0gWyBdLCB0cmFuc2Zvcm1lZFJ4ID0gWyBdO1xuXG4gICAgICAgIGlmICh0eERhdGEgJiYgdHhEYXRhLmRhdGFwb2ludHMpIHRyYW5zZm9ybWVkVHggPSB0eERhdGEuZGF0YXBvaW50cy5tYXAoZnVuY3Rpb24gKHBvaW50KSB7IHJldHVybiB7IHk6IHBvaW50WzBdLCB4OiBwb2ludFsxXSB9IH0pO1xuICAgICAgICBpZiAocnhEYXRhICYmIHJ4RGF0YS5kYXRhcG9pbnRzKSB0cmFuc2Zvcm1lZFJ4ID0gcnhEYXRhLmRhdGFwb2ludHMubWFwKGZ1bmN0aW9uIChwb2ludCkgeyByZXR1cm4geyB5OiBwb2ludFswXSwgeDogcG9pbnRbMV0gfSB9KTtcblxuICAgICAgICB2YXIgbmV0d29ya0dyYXBoID0gbmV3IFJpY2tzaGF3LkdyYXBoKHtcbiAgICAgICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgYWN0aXZlVGFiICsgJ05ldHdvcmtDaGFydCcpLFxuICAgICAgICAgICAgcmVuZGVyZXI6ICdhcmVhJyxcbiAgICAgICAgICAgIHdpZHRoOiA1ODAsXG4gICAgICAgICAgICBoZWlnaHQ6IDI1MCxcbiAgICAgICAgICAgIHNlcmllczogWyB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICdzdGVlbGJsdWUnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHRyYW5zZm9ybWVkVHgsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3R4J1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAnZ3JlZW4nLFxuICAgICAgICAgICAgICAgIGRhdGE6IHRyYW5zZm9ybWVkUngsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3J4J1xuICAgICAgICAgICAgfSBdXG4gICAgICAgIH0gKTtcblxuICAgICAgICB2YXIgbmV0d29ya1hBeGlzID0gbmV3IFJpY2tzaGF3LkdyYXBoLkF4aXMuVGltZSh7IGdyYXBoOiBuZXR3b3JrR3JhcGggfSk7XG4gICAgICAgIHZhciBuZXR3b3JrWUF4aXMgPSBuZXcgUmlja3NoYXcuR3JhcGguQXhpcy5ZKHtcbiAgICAgICAgICAgIGdyYXBoOiBuZXR3b3JrR3JhcGgsXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogJ2xlZnQnLFxuICAgICAgICAgICAgdGlja0Zvcm1hdDogUmlja3NoYXcuRml4dHVyZXMuTnVtYmVyLmZvcm1hdEtNQlQsXG4gICAgICAgICAgICBlbGVtZW50OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhY3RpdmVUYWIgKyAnTmV0d29ya1lBeGlzJyksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBuZXR3b3JrSG92ZXJEZXRhaWwgPSBuZXcgUmlja3NoYXcuR3JhcGguSG92ZXJEZXRhaWwoe1xuICAgICAgICAgICAgZ3JhcGg6IG5ldHdvcmtHcmFwaCxcbiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oc2VyaWVzLCB4LCB5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN3YXRjaCA9ICc8c3BhbiBjbGFzcz1cImRldGFpbF9zd2F0Y2hcIiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6ICcgKyBzZXJpZXMuY29sb3IgKyAnXCI+PC9zcGFuPic7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBzd2F0Y2ggKyBzZXJpZXMubmFtZSArIFwiOiBcIiArIG5ldyBOdW1iZXIoeS8xMDI0KS50b0ZpeGVkKDIpICsgJ0tCPGJyPic7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG5ldHdvcmtHcmFwaC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJEaXNrKGFjdGl2ZVRhYiwgYXBwc1VzZWREYXRhLCBkYXRhVXNlZERhdGEpIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybWVkQXBwc1VzZWQgPSBbIF0sIHRyYW5zZm9ybWVkRGF0YVVzZWQgPSBbIF07XG5cbiAgICAgICAgaWYgKGFwcHNVc2VkRGF0YSAmJiBhcHBzVXNlZERhdGEuZGF0YXBvaW50cykge1xuICAgICAgICAgICAgdHJhbnNmb3JtZWRBcHBzVXNlZCA9IGFwcHNVc2VkRGF0YS5kYXRhcG9pbnRzLm1hcChmdW5jdGlvbiAocG9pbnQpIHsgcmV0dXJuIHsgeTogcG9pbnRbMF0sIHg6IHBvaW50WzFdIH07IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGFVc2VkRGF0YSAmJiBkYXRhVXNlZERhdGEuZGF0YXBvaW50cykge1xuICAgICAgICAgICAgdHJhbnNmb3JtZWREYXRhVXNlZCA9IGRhdGFVc2VkRGF0YS5kYXRhcG9pbnRzLm1hcChmdW5jdGlvbiAocG9pbnQpIHsgcmV0dXJuIHsgeTogcG9pbnRbMF0sIHg6IHBvaW50WzFdIH07IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRpc2tHcmFwaCA9IG5ldyBSaWNrc2hhdy5HcmFwaCh7XG4gICAgICAgICAgICBlbGVtZW50OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIGFjdGl2ZVRhYiArICdEaXNrQ2hhcnQnKSxcbiAgICAgICAgICAgIHJlbmRlcmVyOiAnYXJlYScsXG4gICAgICAgICAgICB3aWR0aDogNTgwLFxuICAgICAgICAgICAgaGVpZ2h0OiAyNTAsXG4gICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICBtYXg6IDMwICogMTAyNCAqIDEwMjQgKiAxMDI0LCAvLyAzMGdiXG4gICAgICAgICAgICBzZXJpZXM6IFt7XG4gICAgICAgICAgICAgICAgY29sb3I6ICdzdGVlbGJsdWUnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHRyYW5zZm9ybWVkQXBwc1VzZWQsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2FwcHMnXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICdncmVlbicsXG4gICAgICAgICAgICAgICAgZGF0YTogdHJhbnNmb3JtZWREYXRhVXNlZCxcbiAgICAgICAgICAgICAgICBuYW1lOiAnZGF0YSdcbiAgICAgICAgICAgIH1dXG4gICAgICAgIH0gKTtcblxuICAgICAgICB2YXIgZGlza1hBeGlzID0gbmV3IFJpY2tzaGF3LkdyYXBoLkF4aXMuVGltZSh7IGdyYXBoOiBkaXNrR3JhcGggfSk7XG4gICAgICAgIHZhciBkaXNrWUF4aXMgPSBuZXcgUmlja3NoYXcuR3JhcGguQXhpcy5ZKHtcbiAgICAgICAgICAgIGdyYXBoOiBkaXNrR3JhcGgsXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogJ2xlZnQnLFxuICAgICAgICAgICAgdGlja0Zvcm1hdDogUmlja3NoYXcuRml4dHVyZXMuTnVtYmVyLmZvcm1hdEtNQlQsXG4gICAgICAgICAgICBlbGVtZW50OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhY3RpdmVUYWIgKyAnRGlza1lBeGlzJyksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBkaXNrSG92ZXJEZXRhaWwgPSBuZXcgUmlja3NoYXcuR3JhcGguSG92ZXJEZXRhaWwoe1xuICAgICAgICAgICAgZ3JhcGg6IGRpc2tHcmFwaCxcbiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oc2VyaWVzLCB4LCB5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN3YXRjaCA9ICc8c3BhbiBjbGFzcz1cImRldGFpbF9zd2F0Y2hcIiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6ICcgKyBzZXJpZXMuY29sb3IgKyAnXCI+PC9zcGFuPic7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBzd2F0Y2ggKyBzZXJpZXMubmFtZSArIFwiOiBcIiArIG5ldyBOdW1iZXIoeS8oMTAyNCAqIDEwMjQgKiAxMDI0KSkudG9GaXhlZCgyKSArICdHQjxicj4nO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgZGlza0xlZ2VuZCA9IG5ldyBSaWNrc2hhdy5HcmFwaC5MZWdlbmQoe1xuICAgICAgICAgICAgZ3JhcGg6IGRpc2tHcmFwaCxcbiAgICAgICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGFjdGl2ZVRhYiArICdEaXNrTGVnZW5kJylcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGlza0dyYXBoLnJlbmRlcigpO1xuICAgIH1cblxuICAgICRzY29wZS51cGRhdGVHcmFwaHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3RpdmVUYWIgPSAkc2NvcGUuYWN0aXZlVGFiO1xuICAgICAgIHZhciBmcm9tID0gJy0yNGhvdXJzJztcbiAgICAgICAgc3dpdGNoIChhY3RpdmVUYWIpIHtcbiAgICAgICAgY2FzZSAnZGF5JzogZnJvbSA9ICctMjRob3Vycyc7IGJyZWFrO1xuICAgICAgICBjYXNlICdtb250aCc6IGZyb20gPSAnLTFtb250aCc7IGJyZWFrO1xuICAgICAgICBjYXNlICd5ZWFyJzogZnJvbSA9ICctMXllYXInOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogY29uc29sZS5sb2coJ2ludGVybmFsIGVycnJvcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgQ2xpZW50LmdyYXBocyhbIGNwdVVzYWdlVGFyZ2V0LCBuZXR3b3JrVXNhZ2VUeFRhcmdldCwgbmV0d29ya1VzYWdlUnhUYXJnZXQsIGRpc2tVc2FnZUFwcHNVc2VkVGFyZ2V0LCBkaXNrVXNhZ2VEYXRhVXNlZFRhcmdldCBdLCBmcm9tLCBmdW5jdGlvbiAoZXJyb3IsIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuIGNvbnNvbGUubG9nKGVycm9yKTtcblxuICAgICAgICAgICAgcmVuZGVyQ3B1KGFjdGl2ZVRhYiwgZGF0YVswXSk7XG5cbiAgICAgICAgICAgIHJlbmRlck5ldHdvcmsoYWN0aXZlVGFiLCBkYXRhWzFdLCBkYXRhWzJdKTtcblxuICAgICAgICAgICAgcmVuZGVyRGlzayhhY3RpdmVUYWIsIGRhdGFbM10sIGRhdGFbNF0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgQ2xpZW50Lm9uUmVhZHkoJHNjb3BlLnVwZGF0ZUdyYXBocyk7XG59XSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpLmNvbnRyb2xsZXIoJ1NlY3VyaXR5Q29udHJvbGxlcicsIFsnJHNjb3BlJywgJ0NsaWVudCcsIGZ1bmN0aW9uICgkc2NvcGUsIENsaWVudCkge1xuICAgICRzY29wZS5hY3RpdmVDbGllbnRzID0gW107XG4gICAgJHNjb3BlLnRva2VuSW5Vc2UgPSBudWxsO1xuICAgICRzY29wZS5yZWFkeSA9IGZhbHNlO1xuXG4gICAgJHNjb3BlLnJlbW92ZUFjY2Vzc1Rva2VucyA9IGZ1bmN0aW9uIChjbGllbnQsIGV2ZW50KSB7XG4gICAgICAgIGNsaWVudC5fYnVzeSA9IHRydWU7XG5cbiAgICAgICAgQ2xpZW50LmRlbFRva2Vuc0J5Q2xpZW50SWQoY2xpZW50LmlkLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgJChldmVudC50YXJnZXQpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgY2xpZW50Ll9idXN5ID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBDbGllbnQub25SZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgICRzY29wZS50b2tlbkluVXNlID0gQ2xpZW50Ll90b2tlbjtcblxuICAgICAgICBDbGllbnQuZ2V0T0F1dGhDbGllbnRzKGZ1bmN0aW9uIChlcnJvciwgYWN0aXZlQ2xpZW50cykge1xuICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm4gY29uc29sZS5lcnJvcihlcnJvcik7XG5cbiAgICAgICAgICAgICRzY29wZS5hY3RpdmVDbGllbnRzID0gYWN0aXZlQ2xpZW50cztcbiAgICAgICAgICAgICRzY29wZS5yZWFkeSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKS5jb250cm9sbGVyKCdVc2VyQ3JlYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnQ2xpZW50JywgZnVuY3Rpb24gKCRzY29wZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sIENsaWVudCkge1xuICAgIGlmICghQ2xpZW50LmdldFVzZXJJbmZvKCkuYWRtaW4pICRsb2NhdGlvbi5wYXRoKCcvJyk7XG5cbiAgICAkc2NvcGUuZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgICRzY29wZS51c2VybmFtZSA9ICcnO1xuICAgICRzY29wZS5lbWFpbCA9ICcnO1xuICAgICRzY29wZS5hbHJlYWR5VGFrZW4gPSAnJztcblxuICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRzY29wZS5hbHJlYWR5VGFrZW4gPSAnJztcblxuICAgICAgICAkc2NvcGUuZGlzYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgIENsaWVudC5jcmVhdGVVc2VyKCRzY29wZS51c2VybmFtZSwgJHNjb3BlLmVtYWlsLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvciAmJiBlcnJvci5zdGF0dXNDb2RlID09PSA0MDkpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWxyZWFkeVRha2VuID0gJHNjb3BlLnVzZXJuYW1lO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKCdVc2VybmFtZSBhbHJlYWR5IHRha2VuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJyb3IpIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byBjcmVhdGUgdXNlci4nLCBlcnJvcik7XG5cbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJyMvdXNlcmxpc3QnO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuICAgIH07XG59XSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpLmNvbnRyb2xsZXIoJ1VzZXJMaXN0Q29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRsb2NhdGlvbicsICdDbGllbnQnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sIENsaWVudCkge1xuICAgIGlmICghQ2xpZW50LmdldFVzZXJJbmZvKCkuYWRtaW4pICRsb2NhdGlvbi5wYXRoKCcvJyk7XG5cbiAgICAkc2NvcGUucmVhZHkgPSBmYWxzZTtcbiAgICAkc2NvcGUudXNlcnMgPSBbXTtcbiAgICAkc2NvcGUudXNlckluZm8gPSBDbGllbnQuZ2V0VXNlckluZm8oKTtcbiAgICAkc2NvcGUudXNlckRlbGV0ZUZvcm0gPSB7XG4gICAgICAgIHVzZXJuYW1lOiAnJyxcbiAgICAgICAgcGFzc3dvcmQ6ICcnXG4gICAgfTtcblxuICAgICRzY29wZS5pc01lID0gZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgcmV0dXJuIHVzZXIudXNlcm5hbWUgPT09IENsaWVudC5nZXRVc2VySW5mbygpLnVzZXJuYW1lO1xuICAgIH07XG5cbiAgICAkc2NvcGUuaXNBZG1pbiA9IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIHJldHVybiAhIXVzZXIuYWRtaW47XG4gICAgfTtcblxuICAgICRzY29wZS50b2dnbGVBZG1pbiA9IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIENsaWVudC5zZXRBZG1pbih1c2VyLnVzZXJuYW1lLCAhdXNlci5hZG1pbiwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybiBjb25zb2xlLmVycm9yKGVycm9yKTtcblxuICAgICAgICAgICAgdXNlci5hZG1pbiA9ICF1c2VyLmFkbWluO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmRlbGV0ZVVzZXIgPSBmdW5jdGlvbiAodXNlcikge1xuICAgICAgICAvLyBUT0RPIGFkZCBidXN5IGluZGljYXRvciBhbmQgYmxvY2sgZm9ybVxuICAgICAgICBpZiAoJHNjb3BlLnVzZXJEZWxldGVGb3JtLnVzZXJuYW1lICE9PSB1c2VyLnVzZXJuYW1lKSByZXR1cm4gY29uc29sZS5lcnJvcignVXNlcm5hbWUgZG9lcyBub3QgbWF0Y2gnKTtcblxuICAgICAgICBDbGllbnQucmVtb3ZlVXNlcih1c2VyLnVzZXJuYW1lLCAkc2NvcGUudXNlckRlbGV0ZUZvcm0ucGFzc3dvcmQsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yICYmIGVycm9yLnN0YXR1c0NvZGUgPT09IDQwMSkgcmV0dXJuIGNvbnNvbGUuZXJyb3IoJ1dyb25nIHBhc3N3b3JkJyk7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybiBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gZGVsZXRlIHVzZXIuJywgZXJyb3IpO1xuXG4gICAgICAgICAgICAkKCcjdXNlckRlbGV0ZU1vZGFsLScgKyB1c2VyLnVzZXJuYW1lKS5tb2RhbCgnaGlkZScpO1xuXG4gICAgICAgICAgICByZWZyZXNoKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgICAgICBDbGllbnQubGlzdFVzZXJzKGZ1bmN0aW9uIChlcnJvciwgcmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybiBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gZ2V0IHVzZXIgbGlzdGluZy4nLCBlcnJvcik7XG5cbiAgICAgICAgICAgICRzY29wZS51c2VycyA9IHJlc3VsdC51c2VycztcbiAgICAgICAgICAgICRzY29wZS5yZWFkeSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgICRzY29wZS5hZGRVc2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcjL3VzZXJjcmVhdGUnO1xuICAgIH07XG5cbiAgICByZWZyZXNoKCk7XG59XSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpLmNvbnRyb2xsZXIoJ1VzZXJQYXNzd29yZENvbnRyb2xsZXInLCBbJyRzY29wZScsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJywgJ0NsaWVudCcsIGZ1bmN0aW9uICgkc2NvcGUsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uLCBDbGllbnQpIHtcbiAgICBpZiAoIUNsaWVudC5nZXRVc2VySW5mbygpLmFkbWluKSAkbG9jYXRpb24ucGF0aCgnLycpO1xuXG4gICAgJHNjb3BlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICRzY29wZS5jdXJyZW50UGFzc3dvcmQgPSAnJztcbiAgICAkc2NvcGUubmV3UGFzc3dvcmQgPSAnJztcbiAgICAkc2NvcGUucmVwZWF0UGFzc3dvcmQgPSAnJztcbiAgICAkc2NvcGUudmFsaWRhdGlvbkNsYXNzID0ge307XG5cbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkNsYXNzLmN1cnJlbnRQYXNzd29yZCA9ICcnO1xuICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkNsYXNzLm5ld1Bhc3N3b3JkID0gJyc7XG4gICAgICAgICRzY29wZS52YWxpZGF0aW9uQ2xhc3MucmVwZWF0UGFzc3dvcmQgPSAnJztcblxuICAgICAgICBpZiAoJHNjb3BlLm5ld1Bhc3N3b3JkICE9PSAkc2NvcGUucmVwZWF0UGFzc3dvcmQpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dFJlcGVhdFBhc3N3b3JkJykuZm9jdXMoKTtcbiAgICAgICAgICAgICRzY29wZS52YWxpZGF0aW9uQ2xhc3MucmVwZWF0UGFzc3dvcmQgPSAnaGFzLWVycm9yJztcbiAgICAgICAgICAgICRzY29wZS5yZXBlYXRQYXNzd29yZCA9ICcnO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIENsaWVudC5jaGFuZ2VQYXNzd29yZCgkc2NvcGUuY3VycmVudFBhc3N3b3JkLCAkc2NvcGUubmV3UGFzc3dvcmQsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yICYmIGVycm9yLnN0YXR1c0NvZGUgPT09IDQwMykge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dEN1cnJlbnRQYXNzd29yZCcpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnZhbGlkYXRpb25DbGFzcy5jdXJyZW50UGFzc3dvcmQgPSAnaGFzLWVycm9yJztcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3VycmVudFBhc3N3b3JkID0gJyc7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld1Bhc3N3b3JkID0gJyc7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlcGVhdFBhc3N3b3JkID0gJyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIGNoYW5nZSBwYXNzd29yZC4nLCBlcnJvcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHNjb3BlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuICAgIH07XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXRDdXJyZW50UGFzc3dvcmQnKS5mb2N1cygpO1xufV0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9