"use strict";var app=angular.module("Application",["ngRoute","ngAnimate","angular-md5"]);app.config(["$routeProvider",function(e){e.when("/",{redirectTo:"/apps"}).when("/dashboard",{controller:"DashboardController",templateUrl:"views/dashboard.html"}).when("/usercreate",{controller:"UserCreateController",templateUrl:"views/usercreate.html"}).when("/userpassword",{controller:"UserPasswordController",templateUrl:"views/userpassword.html"}).when("/userlist",{controller:"UserListController",templateUrl:"views/userlist.html"}).when("/appstore",{controller:"AppStoreController",templateUrl:"views/appstore.html"}).when("/apps",{controller:"AppListController",templateUrl:"views/applist.html"}).when("/app/:appStoreId/install",{controller:"AppInstallController",templateUrl:"views/appinstall.html"}).when("/app/:appId/configure",{controller:"AppConfigureController",templateUrl:"views/appconfigure.html"}).when("/app/:appId/details",{controller:"AppDetailsController",templateUrl:"views/appdetails.html"}).when("/dns",{controller:"DnsController",templateUrl:"views/dns.html"}).when("/account",{controller:"AccountController",templateUrl:"views/account.html"}).when("/graphs",{controller:"GraphsController",templateUrl:"views/graphs.html"}).when("/security",{controller:"SecurityController",templateUrl:"views/security.html"}).otherwise({redirectTo:"/"})}]),app.filter("installationActive",function(){return function(e){return"error"===e?!1:"installed"===e?!1:!0}}),app.filter("installationStateLabel",function(){return function(e){return"error"===e?"Error":"subdomain_error"===e?"Error":"installed"===e?"Installed":"downloading_image"===e?"Downloading":"pending_install"===e?"Installing":"pending_uninstall"===e?"Uninstalling":"creating_container"===e?"Container":"downloading_manifest"===e?"Manifest":"creating_volume"===e?"Volume":"registering_subdomain"===e?"Subdomain":"allocated_oauth_credentials"===e?"OAuth":e}}),app.filter("accessRestrictionLabel",function(){return function(e){return""===e?"public":"roleUser"===e?"private":"roleAdmin"===e?"private (Admins only)":e}}),app.directive("laterName",function(){return{restrict:"A",require:["?ngModel","^?form"],link:function(e,n,o,t){o.$set("name",o.laterName);var r=t[0],a=t[1];r&&a&&(r.$name=o.name,a.$addControl(r),e.$on("$destroy",function(){a.$removeControl(r)}))}}}),angular.module("Application").service("Client",["$http","md5",function(e,n){function o(e,n){Error.call(this),this.name=this.constructor.name,this.statusCode=e,this.message="string"==typeof n?n:JSON.stringify(n)}function t(e){return function(n,t){return 401===t?a.logout():void e(new o(t,n))}}function r(){this._ready=!1,this._configListener=[],this._readyListener=[],this._userInfo={username:null,email:null,admin:!1},this._token=null,this._clientId="cid-webadmin",this._clientSecret="unused",this._config={apiServerOrigin:null,webServerOrigin:null,fqdn:null,ip:null,revision:null,update:null,isDev:!1,progress:{}},this._installedApps=[],this.setToken(localStorage.token)}var a=null;return r.prototype.setReady=function(){this._ready||(this._ready=!0,this._readyListener.forEach(function(e){e()}))},r.prototype.onReady=function(e){this._ready&&e(),this._readyListener.push(e)},r.prototype.onConfig=function(e){this._configListener.push(e),e(this._config)},r.prototype.setUserInfo=function(e){this._userInfo.username=e.username,this._userInfo.email=e.email,this._userInfo.admin=!!e.admin,this._userInfo.gravatar="https://www.gravatar.com/avatar/"+n.createHash(e.email.toLowerCase())+".jpg?s=24&d=mm",this._userInfo.gravatarHuge="https://www.gravatar.com/avatar/"+n.createHash(e.email.toLowerCase())+".jpg?s=128&d=mm"},r.prototype.setConfig=function(e){this._config.apiServerOrigin=e.apiServerOrigin,this._config.webServerOrigin=e.webServerOrigin,this._config.version=e.version,this._config.fqdn=e.fqdn,this._config.ip=e.ip,this._config.revision=e.revision,this._config.update=e.update,this._config.isDev=e.isDev,this._config.progress=e.progress;var n=this;this._configListener.forEach(function(e){e(n._config)})},r.prototype.getInstalledApps=function(){return this._installedApps},r.prototype.getUserInfo=function(){return this._userInfo},r.prototype.getConfig=function(){return this._config},r.prototype.setToken=function(n){e.defaults.headers.common.Authorization="Bearer "+n,n?localStorage.token=n:localStorage.removeItem("token"),this._token=n},r.prototype.config=function(n){e.get("/api/v1/cloudron/config").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.userInfo=function(n){e.get("/api/v1/profile").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.installApp=function(n,r,a,i,s,p){var l=this,c={appStoreId:n,version:r,password:a,location:s.location,portBindings:s.portBindings,accessRestriction:s.accessRestriction};e.post("/api/v1/apps/install",c).success(function(e,n){return 202!==n||"object"!=typeof e?p(new o(n,e)):(e.manifest={title:i},l._installedApps.push(e),void p(null,e.id))}).error(t(p))},r.prototype.uninstallApp=function(n,r,a){var i={password:r};e.post("/api/v1/apps/"+n+"/uninstall",i).success(function(e,n){return 202!==n?a(new o(n,e)):void a(null)}).error(t(a))},r.prototype.configureApp=function(n,r,a,i){var s={appId:n,password:r,location:a.location,portBindings:a.portBindings,accessRestriction:a.accessRestriction};e.post("/api/v1/apps/"+n+"/configure",s).success(function(e,n){return 202!==n?i(new o(n,e)):void i(null)}).error(t(i))},r.prototype.updateApp=function(n,r,a,i){e.post("/api/v1/apps/"+n+"/update",{version:r,password:a}).success(function(e,n){return 202!==n?i(new o(n,e)):void i(null)}).error(t(i))},r.prototype.startApp=function(n,r){var a={};e.post("/api/v1/apps/"+n+"/start",a).success(function(e,n){return 202!==n?r(new o(n,e)):void r(null)}).error(t(r))},r.prototype.stopApp=function(n,r){var a={};e.post("/api/v1/apps/"+n+"/stop",a).success(function(e,n){return 202!==n?r(new o(n,e)):void r(null)}).error(t(r))},r.prototype.version=function(n){e.get("/api/v1/cloudron/status").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.isServerFirstTime=function(n){e.get("/api/v1/cloudron/status").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,!e.activated)}).error(t(n))},r.prototype.getNakedDomain=function(n){e.get("/api/v1/settings/naked_domain").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e.appid)}).error(t(n))},r.prototype.setNakedDomain=function(n,r){e.post("/api/v1/settings/naked_domain",{appid:n}).success(function(e,n){return 204!==n?r(new o(n)):void r(null)}).error(t(r))},r.prototype.getApps=function(n){e.get("/api/v1/apps").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e.apps)}).error(t(n))},r.prototype.getApp=function(e,n){var o=null;return this._installedApps.some(function(n){return n.id===e?(o=n,!0):!1}),o?n(null,o):n(new Error("App not found"))},r.prototype.getAppLogStream=function(e){var n=new EventSource("/api/v1/apps/"+e+"/logstream");return n},r.prototype.getAppLogUrl=function(e){return"/api/v1/apps/"+e+"/logs?access_token="+this._token},r.prototype.setAdmin=function(n,r,a){var i={username:n,admin:r};e.post("/api/v1/users/"+n+"/admin",i).success(function(e,n){return 204!==n?a(new o(n,e)):void a(null)}).error(t(a))},r.prototype.createAdmin=function(n,r,a,i,s){var p={username:n,password:r,email:a},l=this;e.post("/api/v1/cloudron/activate?setupToken="+i,p).success(function(e,t){return 201!==t||"object"!=typeof e?s(new o(t,e)):(l.setToken(e.token),l.setUserInfo({username:n,email:a,admin:!0}),void s(null,e.activated))}).error(t(s))},r.prototype.listUsers=function(n){e.get("/api/v1/users").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.getOAuthClients=function(n){e.get("/api/v1/oauth/clients").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e.clients)}).error(t(n))},r.prototype.delTokensByClientId=function(n,r){e["delete"]("/api/v1/oauth/clients/"+n+"/tokens").success(function(e,n){return 204!==n?r(new o(n,e)):void r(null)}).error(t(r))},r.prototype.update=function(n){e.get("/api/v1/cloudron/update").success(function(e,t){return 202!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.reboot=function(n){e.get("/api/v1/cloudron/reboot").success(function(e,t){return 202!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.backup=function(n){e.post("/api/v1/cloudron/backups").success(function(e,t){return 202!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.setCertificate=function(n,r,a){console.log("will set certificate");var i=new FormData;i.append("certificate",n),i.append("key",r),e.post("/api/v1/cloudron/certificate",i,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).success(function(e,n){return 202!==n?a(new o(n,e)):void a(null)}).error(t(a))},r.prototype.graphs=function(n,r,a){var i={params:{target:n,format:"json",from:r}};e.get("/api/v1/cloudron/graphs",i).success(function(e,n){return 200!==n||"object"!=typeof e?a(new o(n,e)):void a(null,e)}).error(t(a))},r.prototype.createUser=function(n,r,a){var i={username:n,email:r};e.post("/api/v1/users",i).success(function(e,n){return 201!==n||"object"!=typeof e?a(new o(n,e)):void a(null,e)}).error(t(a))},r.prototype.removeUser=function(n,r,a){var i={username:n,password:r};e({method:"DELETE",url:"/api/v1/users/"+n,data:i,headers:{"Content-Type":"application/json"}}).success(function(e,n){return 204!==n?a(new o(n,e)):void a(null)}).error(t(a))},r.prototype.changePassword=function(n,r,a){var i={password:n,newPassword:r};e.post("/api/v1/users/"+this._userInfo.username+"/password",i).success(function(e,n){return 204!==n||"object"!=typeof e?a(new o(n,e)):void a(null,e)}).error(t(a))},r.prototype.refreshConfig=function(e){var n=this;e="function"==typeof e?e:function(){},this.config(function(o,t){return o?e(o):(n.setConfig(t),void e(null))})},r.prototype.refreshInstalledApps=function(e){var n=this;e="function"==typeof e?e:function(){},this.getApps(function(o,t){if(o)return e(o);t.forEach(function(e){for(var o=!1,t=0;t<n._installedApps.length;++t)if(n._installedApps[t].id===e.id){o=t;break}o!==!1?angular.copy(e,n._installedApps[o]):n._installedApps.push(e)});for(var r=n._installedApps.length-1;r>=0;--r)t.some(function(e){return e.id===n._installedApps[r].id})||n._installedApps.splice(r,1);e(null)})},r.prototype.logout=function(){this.setToken(null),this._userInfo={},window.location.href="/api/v1/session/logout"},r.prototype.exchangeCodeForToken=function(n,r){var a={grant_type:"authorization_code",code:n,redirect_uri:window.location.origin,client_id:this._clientId,client_secret:this._clientSecret};e.post("/api/v1/oauth/token?response_type=token&client_id="+this._clientId,a).success(function(e,n){return 200!==n||"object"!=typeof e?r(new o(n,e)):void r(null,e.access_token)}).error(t(r))},a=new r}]),angular.module("Application").service("AppStore",["$http","Client",function(e,n){function o(e,n){Error.call(this),this.name=this.constructor.name,this.statusCode=e,this.message="string"==typeof n?n:JSON.stringify(n)}function t(){this._appsCache={}}return t.prototype.getApps=function(t){if(null===n.getConfig().apiServerOrigin)return t(new o(420,"Enhance Your Calm"));var r=this;e.get(n.getConfig().apiServerOrigin+"/api/v1/appstore/apps",{params:{boxVersion:n.getConfig().version}}).success(function(e,n){return 200!==n?t(new o(n,e)):(e.apps.forEach(function(e){r._appsCache[e.id]||(r._appsCache[e.id]=e)}),t(null,r._appsCache))}).error(function(e,n){return t(new o(n,e))})},t.prototype.getAppById=function(e,n){if(e in this._appsCache)return n(null,this._appsCache[e]);var t=this;this.getApps(function(r){return r?n(r):e in t._appsCache?n(null,t._appsCache[e]):void n(new o(404,"Not found"))})},t.prototype.getManifest=function(t,r){if(null===n.getConfig().apiServerOrigin)return r(new o(420,"Enhance Your Calm"));var a=n.getConfig().apiServerOrigin+"/api/v1/appstore/apps/"+t+"/manifest";console.log("Getting the manifest of ",t,a),e.get(a).success(function(e,n){return 200!==n?r(new o(n,e)):r(null,e)}).error(function(e,n){return r(new o(n,e))})},new t}]),angular.module("Application").controller("MainController",["$scope","$route","$interval","Client",function(e,n,o,t){e.initialized=!1,e.userInfo=t.getUserInfo(),e.config={},e.isActive=function(e){return n.current?0===n.current.$$route.originalPath.indexOf(e):!1},e.logout=function(n){n.stopPropagation(),e.initialized=!1,t.logout()},e.login=function(){var e=window.location.origin+"/login_callback.html",n="root,profile,apps,roleAdmin";window.location.href="/api/v1/oauth/dialog/authorize?response_type=code&client_id="+t._clientId+"&redirect_uri="+e+"&scope="+n},e.setup=function(){window.location.href="/error.html?errorCode=1"},e.error=function(e){console.error(e),window.location.href="/error.html"},e.update=function(){$("#updateModal").modal("hide"),e.initialized=!1,t.update(function(e){e&&console.error(e),window.location.href="/update.html"})},e.backup=function(){$("#backupProgressModal").modal("show"),e.initialized=!1,t.backup(function(n){function o(){t.version(function(n){return n?window.setTimeout(o,1e3):($("#backupProgressModal").modal("hide"),void(e.initialized=!0))})}n&&console.error(n),window.setTimeout(o,5e3)})},t.isServerFirstTime(function(n,r){return n?e.error(n):r?e.setup():void(localStorage.token?t.refreshConfig(function(n){return n&&401===n.statusCode?e.login():n?e.error(n):(t.getConfig().progress.update&&(window.location.href="/update.html"),void t.userInfo(function(n,r){return n?e.error(n):(t.setUserInfo(r),void t.refreshInstalledApps(function(n){if(n)return e.error(n);var r=o(t.refreshInstalledApps.bind(t),2e3),a=o(t.refreshConfig.bind(t),5e3);e.$on("$destroy",function(){o.cancel(r),o.cancel(a)}),t.setReady(),e.config=t.getConfig(),e.initialized=!0}))}))}):e.login())}),t.onConfig(function(e){e.progress.update&&(window.location.href="/update.html")})}]),angular.module("Application").controller("AccountController",["$scope","$location","Client",function(e,n,o){e.user=o.getUserInfo(),e.config=o.getConfig(),e.changePassword=function(){n.path("/userpassword")}}]),angular.module("Application").controller("AppConfigureController",["$scope","$routeParams","$location","Client",function(e,n,o,t){t.getUserInfo().admin||o.path("/"),e.app=null,e.password="",e.location="",e.accessRestriction="",e.disabled=!1,e.error={},e.domain="",e.portBindings={},e.configureApp=function(){e.error.name=null,e.error.password=null;var o={};for(var r in e.portBindings)o[r]=e.portBindings[r].hostPort;t.configureApp(n.appId,e.password,{location:e.location,portBindings:o,accessRestriction:e.accessRestriction},function(o){return o?(403===o.statusCode?(e.error.password="Wrong password provided.",e.password=""):e.error.name="App with the name "+e.app.name+" cannot be configured.",void(e.disabled=!1)):void window.location.replace("#/app/"+n.appId+"/details")})},e.cancel=function(){window.history.back()},t.onReady(function(){e.domain=t.getConfig().fqdn,t.getApp(n.appId,function(n,o){if(e.error=n||{},!n){e.app=o,e.location=o.location,e.portBindings=o.manifest.tcpPorts,e.accessRestriction=o.accessRestriction;for(var t in e.portBindings)e.portBindings[t].hostPort=o.portBindings[t]}})}),document.getElementById("inputLocation").focus()}]),angular.module("Application").controller("AppDetailsController",["$scope","$http","$routeParams","$location","Client",function(e,n,o,t,r){function a(e,n){var o=[];n&&n.datapoints&&(o=n.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var t=new Rickshaw.Graph({element:document.querySelector("#"+e+"CpuChart"),renderer:"area",width:580,height:250,min:0,max:100,series:[{color:"steelblue",data:o||[],name:"cpu"}]});new Rickshaw.Graph.Axis.Time({graph:t}),new Rickshaw.Graph.Axis.Y({graph:t,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"CpuYAxis")}),new Rickshaw.Graph.HoverDetail({graph:t,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o).toFixed(2)+"%<br>";return r}})}t.render()}function i(e,n){var o=[];n&&n.datapoints&&(o=n.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var t=new Rickshaw.Graph({element:document.querySelector("#"+e+"MemoryChart"),renderer:"area",width:580,height:250,min:0,max:2147483648,series:[{color:"steelblue",data:o||[],name:"memory"}]});new Rickshaw.Graph.Axis.Time({graph:t}),new Rickshaw.Graph.Axis.Y({graph:t,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"MemoryYAxis")}),new Rickshaw.Graph.HoverDetail({graph:t,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o/1048576).toFixed(2)+"MB<br>";return r}})}t.render()}function s(e,n){var o=[];n&&n.datapoints&&(o=n.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var t=new Rickshaw.Graph({element:document.querySelector("#"+e+"DiskChart"),renderer:"area",width:580,height:250,min:0,max:32212254720,series:[{color:"steelblue",data:o||[],name:"apps"}]});new Rickshaw.Graph.Axis.Time({graph:t}),new Rickshaw.Graph.Axis.Y({graph:t,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"DiskYAxis")}),new Rickshaw.Graph.HoverDetail({graph:t,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o/1048576).toFixed(2)+"MB<br>";return r}}),new Rickshaw.Graph.Legend({graph:t,element:document.getElementById(e+"DiskLegend")})}t.render()}r.getUserInfo().admin||t.path("/"),e.app={},e.initialized=!1,e.updateAvailable=!1,e.activeTab="day",e.updateVersion=null,e.password="",e.passwordWrong=!1,e.startApp=function(){r.startApp(o.appId,function(e){e&&console.error(e)})},e.stopApp=function(){r.stopApp(o.appId,function(e){e&&console.error(e)})},e.updateApp=function(){e.passwordWrong=!1,r.updateApp(o.appId,e.updateVersion,e.password,function(n){n&&403===n.statusCode?(e.password="",e.passwordWrong=!0,$("#inputPasswordUpdate").focus()):n?console.error(n):($("#updateAppModal").modal("hide"),e.updateAvailable=!1,e.updateVersion=null,e.password="")})},e.uninstallApp=function(){e.passwordWrong=!1,r.uninstallApp(o.appId,e.password,function(n){n&&403===n.statusCode?(e.password="",e.passwordWrong=!0,$("#inputPasswordUninstall").focus()):n?console.error(n):($("#uninstallAppModal").modal("hide"),e.password="",window.location.href="#/")})},e.updateGraphs=function(){var n="nonNegativeDerivative(sumSeries(collectd.localhost.table-"+e.app.id+"-cpu.gauge-user,collectd.localhost.table-"+e.app.id+"-cpu.gauge-system))",o="collectd.localhost.table-"+e.app.id+"-memory.gauge-max_usage_in_bytes",t="collectd.localhost.filecount-"+e.app.id+"-appdata.bytes",p=e.activeTab,l="-24hours";switch(p){case"day":l="-24hours";break;case"month":l="-1month";break;case"year":l="-1year";break;default:console.log("internal errror")}r.graphs([n,o,t],l,function(e,n){return e?console.log(e):(a(p,n[0]),i(p,n[1]),void s(p,n[2]))})},r.onReady(function(){r.getApp(o.appId,function(n,o){if(n)return console.error(n),void(window.location.href="#/");if(e.app=o,e.appLogUrl=r.getAppLogUrl(o.id),r.getConfig().update&&r.getConfig().update.apps)for(var t=r.getConfig().update.apps,a=0;a<t.length;a++)t[a].appId===e.app.appStoreId&&t[a].version!==e.app.version&&(e.updateAvailable=!0,e.updateVersion=t[a].version);e.updateGraphs(),e.initialized=!0})})}]),angular.module("Application").controller("AppInstallController",["$scope","$routeParams","$location","Client","AppStore","$timeout",function(e,n,o,t,r,a){t.getUserInfo().admin||o.path("/"),e.app=null,e.password="",e.location="",e.accessRestriction="",e.disabled=!1,e.error={},e.domain="",e.version=null,e.portBindings={},e.hostPortMin=1025,e.hostPortMax=9999,t.onReady(function(){e.domain=t.getConfig().fqdn,r.getAppById(n.appStoreId,function(n,o){e.error=n||{},n||(e.app=o)}),r.getManifest(n.appStoreId,function(n,o){if(e.error=n||{},!n){e.version=o.version,e.portBindings=o.tcpPorts,e.accessRestriction=o.accessRestriction||"";for(var t in e.portBindings)e.portBindings[t].hostPort=parseInt(t)}})}),e.installApp=function(){e.error.name=null,e.error.password=null;var o={};for(var r in e.portBindings)o[r]=e.portBindings[r].hostPort;t.installApp(n.appStoreId,e.version,e.password,e.app.title,{location:e.location,portBindings:o,accessRestriction:e.accessRestriction},function(n,o){return n?(409===n.statusCode?e.error.name="Application already exists.":403===n.statusCode?(e.error.password="Wrong password provided.",e.password=""):e.error.name="App with the name "+e.app.name+" cannot be installed.",void(e.disabled=!1)):void window.location.replace("#/app/"+o+"/details")})},e.cancel=function(){window.history.back()},e.$on("$viewContentLoaded",function(){a(function(){$("input[autofocus]:visible:first").focus()},1e3)})}]),angular.module("Application").controller("AppListController",["$scope","$location","Client",function(e,n,o){e.installedApps=o.getInstalledApps(),e.config=o.getConfig(),e.appconfigure={busy:!1,error:{},app:{},location:"",password:"",portBindings:{},accessRestriction:""},e.showConfigure=function(n){e.appconfigure.app=n,e.appconfigure.location=n.location,e.appconfigure.portBindings=n.manifest.tcpPorts,e.appconfigure.accessRestriction=n.accessRestriction;for(var o in e.appconfigure.portBindings)e.appconfigure.portBindings[o].hostPort=n.portBindings[o];$("#appConfigureModal").modal("show")},e.doConfigure=function(n){e.appconfigure.busy=!0,e.appconfigure.error.name=null,e.appconfigure.error.password=null;var t={};for(var r in e.appconfigure.portBindings)t[r]=e.appconfigure.portBindings[r].hostPort;o.configureApp(e.appconfigure.app.id,e.appconfigure.password,{location:e.appconfigure.location,portBindings:t,accessRestriction:e.appconfigure.accessRestriction},function(o){return o?(403===o.statusCode?(e.appconfigure.error.password="Wrong password provided.",e.appconfigure.password=""):e.appconfigure.error.name="App with the name "+e.appconfigure.app.name+" cannot be configured.",void(e.appconfigure.busy=!1)):(e.appconfigure.busy=!1,e.appconfigure.error={},e.appconfigure.app={},e.appconfigure.location="",e.appconfigure.password="",e.appconfigure.portBindings={},e.appconfigure.accessRestriction="",n.$setPristine(),n.$setUntouched(),void $("#appConfigureModal").modal("hide"))})},e.cancel=function(){window.history.back()}}]),angular.module("Application").controller("AppStoreController",["$scope","$location","$timeout","Client","AppStore",function(e,n,o,t,r){function a(){e.ready=!1,r.getApps(function(n,t){return n?(console.error(n),o(a,1e3)):(e.apps=t,void(e.ready=!0))})}t.getUserInfo().admin||n.path("/"),e.ready=!1,e.apps=[],e.config=t.getConfig(),e.appinstall={busy:!1,error:{},app:{},location:"",password:"",portBindings:{},accessRestriction:""},e.showInstall=function(n){r.getManifest(n.id,function(o,t){if(o)return console.error(o);n.manifest=t,e.appinstall.app=n,e.appinstall.location=n.location,e.appinstall.portBindings=t.tcpPorts,e.appinstall.accessRestriction=n.accessRestriction;for(var r in e.appinstall.portBindings)e.appinstall.portBindings[r].hostPort=parseInt(r);$("#appInstallModal").modal("show")})},e.doInstall=function(o){e.appinstall.busy=!0,e.appinstall.error.name=null,e.appinstall.error.password=null;var r={};for(var a in e.appinstall.portBindings)r[a]=e.appinstall.portBindings[a].hostPort;t.installApp(e.appinstall.app.id,e.appinstall.app.manifest.version,e.appinstall.password,e.appinstall.app.title,{location:e.appinstall.location,portBindings:r,accessRestriction:e.appinstall.accessRestriction},function(t){return t?(409===t.statusCode?e.appinstall.error.name="Application already exists.":403===t.statusCode?(e.appinstall.error.password="Wrong password provided.",e.appinstall.password=""):e.appinstall.error.name="App with the name "+e.appinstall.app.name+" cannot be installed.",void(e.appinstall.busy=!1)):(e.appinstall.busy=!1,e.appinstall.error={},e.appinstall.app={},e.appinstall.location="",e.appinstall.password="",e.appinstall.portBindings={},e.appinstall.accessRestriction="",o.$setPristine(),o.$setUntouched(),$("#appInstallModal").modal("hide"),void n.path("/apps"))})},a()}]),angular.module("Application").controller("DashboardController",function(){}),angular.module("Application").controller("DnsController",["$scope","$location","Client",function(e,n,o){o.getUserInfo().admin||n.path("/"),e.ready=!1,e.user=o.getUserInfo(),e.config=o.getConfig(),e.nakedDomainApp=null,e.certificateFile=null,e.certificateFileName="",e.keyFile=null,e.keyFileName="",e.setNakedDomain=function(){var n=e.nakedDomainApp?e.nakedDomainApp.id:"admin";o.setNakedDomain(n,function(e){return e?console.error("Error setting naked domain",e):void 0})},e.backup=function(){$("#backupProgressModal").modal("show"),e.$parent.initialized=!1,o.backup(function(n){function t(){o.version(function(n){return n?window.setTimeout(t,1e3):($("#backupProgressModal").modal("hide"),void(e.$parent.initialized=!0))})}n&&console.error(n),window.setTimeout(t,5e3)})},e.update=function(){$("#updateModal").modal("hide"),e.$parent.initialized=!1,o.update(function(e){e&&console.error(e),window.location.href="/update.html"})},document.getElementById("idCertificate").onchange=function(n){e.$apply(function(){e.certificateFile=n.target.files[0],e.certificateFileName=n.target.files[0].name})},document.getElementById("idKey").onchange=function(n){e.$apply(function(){e.keyFile=n.target.files[0],e.keyFileName=n.target.files[0].name})},e.setCertificate=function(){return console.log("Will set the certificate"),e.certificateFile?e.keyFile?void o.setCertificate(e.certificateFile,e.keyFile,function(e){return e?console.log(e):void window.setTimeout(window.location.reload.bind(window.location,!0),3e3)}):console.log("Key not set"):console.log("Certificate not set")},o.onConfig(function(){e.tokenInUse=o._token,o.getApps(function(n,t){n&&console.error("Error loading app list"),e.apps=t,o.getNakedDomain(function(n,o){if(n)return console.error(n);e.nakedDomainApp=null;for(var t=0;t<e.apps.length;t++)if(e.apps[t].id===o){e.nakedDomainApp=e.apps[t];break}e.ready=!0})})})}]),angular.module("Application").controller("GraphsController",["$scope","$location","Client",function(e,n,o){function t(e,n){var o=[];n&&n.datapoints&&(o=n.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var t=new Rickshaw.Graph({element:document.querySelector("#"+e+"CpuChart"),renderer:"area",width:580,height:250,min:0,max:100,series:[{color:"steelblue",data:o,name:"cpu"}]});new Rickshaw.Graph.Axis.Time({graph:t}),new Rickshaw.Graph.Axis.Y({graph:t,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"CpuYAxis")}),new Rickshaw.Graph.HoverDetail({graph:t,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o).toFixed(2)+"%<br>";return r}})}t.render()}function r(e,n,o){var t=[],r=[];n&&n.datapoints&&(t=n.datapoints.map(function(e){return{y:e[0],x:e[1]}})),o&&o.datapoints&&(r=o.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var a=new Rickshaw.Graph({element:document.querySelector("#"+e+"NetworkChart"),renderer:"area",width:580,height:250,series:[{color:"steelblue",data:t,name:"tx"},{color:"green",data:r,name:"rx"}]});new Rickshaw.Graph.Axis.Time({graph:a}),new Rickshaw.Graph.Axis.Y({graph:a,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"NetworkYAxis")}),new Rickshaw.Graph.HoverDetail({graph:a,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o/1024).toFixed(2)+"KB<br>";return r}})}a.render()}function a(e,n,o){var t=[],r=[];n&&n.datapoints&&(t=n.datapoints.map(function(e){return{y:e[0],x:e[1]}})),o&&o.datapoints&&(r=o.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var a=new Rickshaw.Graph({element:document.querySelector("#"+e+"DiskChart"),renderer:"area",width:580,height:250,min:0,max:32212254720,series:[{color:"steelblue",data:t,name:"apps"},{color:"green",data:r,name:"data"}]});new Rickshaw.Graph.Axis.Time({graph:a}),new Rickshaw.Graph.Axis.Y({graph:a,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"DiskYAxis")}),new Rickshaw.Graph.HoverDetail({graph:a,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o/1073741824).toFixed(2)+"GB<br>";return r}}),new Rickshaw.Graph.Legend({graph:a,element:document.getElementById(e+"DiskLegend")})}a.render()}o.getUserInfo().admin||n.path("/"),e.activeTab="day";var i="transformNull(scale(divideSeries(sumSeries(collectd.localhost.cpu-0.cpu-system,collectd.localhost.cpu-0.cpu-nice,collectd.localhost.cpu-0.cpu-user),sumSeries(collectd.localhost.cpu-0.cpu-idle,collectd.localhost.cpu-0.cpu-system,collectd.localhost.cpu-0.cpu-nice,collectd.localhost.cpu-0.cpu-user,collectd.localhost.cpu-0.cpu-wait)), 100), 0)",s="transformNull(collectd.localhost.interface-eth0.if_octets.tx, 0)",p="transformNull(collectd.localhost.interface-eth0.if_octets.rx, 0)",l="transformNull(collectd.localhost.df-loop0.df_complex-used, 0)",c="transformNull(collectd.localhost.df-loop1.df_complex-used, 0)";e.updateGraphs=function(){var n=e.activeTab,u="-24hours";switch(n){case"day":u="-24hours";break;case"month":u="-1month";break;case"year":u="-1year";break;default:console.log("internal errror")}o.graphs([i,s,p,l,c],u,function(e,o){return e?console.log(e):(t(n,o[0]),r(n,o[1],o[2]),void a(n,o[3],o[4]))})},o.onReady(e.updateGraphs)}]),angular.module("Application").controller("SecurityController",["$scope","Client",function(e,n){e.activeClients=[],e.tokenInUse=null,e.ready=!1,e.removeAccessTokens=function(e,o){e._busy=!0,n.delTokensByClientId(e.id,function(n){return n?console.error(n):($(o.target).addClass("disabled"),void(e._busy=!1))})},n.onReady(function(){e.tokenInUse=n._token,n.getOAuthClients(function(n,o){return n?console.error(n):(e.activeClients=o,void(e.ready=!0))})})}]),angular.module("Application").controller("UserCreateController",["$scope","$routeParams","$location","Client",function(e,n,o,t){t.getUserInfo().admin||o.path("/"),e.disabled=!1,e.username="",e.email="",e.alreadyTaken="",e.submit=function(){e.alreadyTaken="",e.disabled=!0,t.createUser(e.username,e.email,function(n){return n&&409===n.statusCode?(e.alreadyTaken=e.username,console.error("Username already taken")):(n&&console.error("Unable to create user.",n),void(window.location.href="#/userlist"))})},e.cancel=function(){window.history.back()}}]),angular.module("Application").controller("UserListController",["$scope","$location","Client",function(e,n,o){function t(){o.listUsers(function(n,o){return n?console.error("Unable to get user listing.",n):(e.users=o.users,void(e.ready=!0))})}o.getUserInfo().admin||n.path("/"),e.ready=!1,e.users=[],e.userInfo=o.getUserInfo(),e.userremove={busy:!1,error:{},userInfo:{},username:"",password:""},e.useradd={busy:!1,alreadyTaken:!1,error:{},username:"",email:""},e.isMe=function(e){return e.username===o.getUserInfo().username},e.isAdmin=function(e){return!!e.admin},e.toggleAdmin=function(e){o.setAdmin(e.username,!e.admin,function(n){return n?console.error(n):void(e.admin=!e.admin)})},e.doAdd=function(){e.useradd.alreadyTaken="",e.useradd.error.username=null,e.useradd.error.email=null,o.createUser(e.useradd.username,e.useradd.email,function(n){if(n&&409===n.statusCode)return e.useradd.alreadyTaken=e.username,console.error("Username already taken");if(n&&400===n.statusCode){if(-1!==n.message.indexOf("email"))return e.useradd.error.email="Invalid Email",void(e.useradd.email="");
if(-1!==n.message.indexOf("username"))return e.useradd.error.username="Invalid Username",void(e.useradd.username="")}else n&&console.error("Unable to create user.",n),t(),$("#userAddModal").modal("hide")})},e.showUserRemove=function(n){e.userremove.error.username=null,e.userremove.error.password=null,e.userremove.userInfo=n,$("#userRemoveModal").modal("show")},e.doUserRemove=function(n){return e.userremove.error.username=null,e.userremove.error.password=null,e.userremove.username!==e.userremove.userInfo.username?(e.userremove.error.username="Username does not match",void(e.userremove.username="")):void o.removeUser(e.userremove.username,e.userremove.password,function(o){return o&&403===o.statusCode?(e.userremove.error.password="Incorrect password",void(e.userremove.password="")):o?console.error("Unable to delete user.",o):(e.userremove.userInfo={},e.userremove.username="",e.userremove.password="",n.$setPristine(),n.$setUntouched(),$("#userRemoveModal").modal("hide"),void t())})},t()}]),angular.module("Application").controller("UserPasswordController",["$scope","$routeParams","$location","Client",function(e,n,o,t){t.getUserInfo().admin||o.path("/"),e.active=!1,e.currentPassword="",e.newPassword="",e.repeatPassword="",e.validationClass={},e.submit=function(){return e.validationClass.currentPassword="",e.validationClass.newPassword="",e.validationClass.repeatPassword="",e.newPassword!==e.repeatPassword?(document.getElementById("inputRepeatPassword").focus(),e.validationClass.repeatPassword="has-error",void(e.repeatPassword="")):(e.active=!0,void t.changePassword(e.currentPassword,e.newPassword,function(n){n&&403===n.statusCode?(document.getElementById("inputCurrentPassword").focus(),e.validationClass.currentPassword="has-error",e.currentPassword="",e.newPassword="",e.repeatPassword=""):n?console.error("Unable to change password.",n):window.history.back(),e.active=!1}))},e.cancel=function(){window.history.back()},document.getElementById("inputCurrentPassword").focus()}]);
//# sourceMappingURL=data:application/json;base64,