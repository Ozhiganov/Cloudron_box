"use strict";var app=angular.module("Application",["ngRoute","ngAnimate","angular-md5"]);app.config(["$routeProvider",function(e){e.when("/",{redirectTo:"/dashboard"}).when("/dashboard",{controller:"DashboardController",templateUrl:"views/dashboard.html"}).when("/usercreate",{controller:"UserCreateController",templateUrl:"views/usercreate.html"}).when("/userpassword",{controller:"UserPasswordController",templateUrl:"views/userpassword.html"}).when("/userlist",{controller:"UserListController",templateUrl:"views/userlist.html"}).when("/appstore",{controller:"AppStoreController",templateUrl:"views/appstore.html"}).when("/app/:appStoreId/install",{controller:"AppInstallController",templateUrl:"views/appinstall.html"}).when("/app/:appId/configure",{controller:"AppConfigureController",templateUrl:"views/appconfigure.html"}).when("/app/:appId/details",{controller:"AppDetailsController",templateUrl:"views/appdetails.html"}).when("/settings",{controller:"SettingsController",templateUrl:"views/settings.html"}).when("/account",{controller:"AccountController",templateUrl:"views/account.html"}).when("/graphs",{controller:"GraphsController",templateUrl:"views/graphs.html"}).when("/security",{controller:"SecurityController",templateUrl:"views/security.html"}).otherwise({redirectTo:"/"})}]),app.filter("installationActive",function(){return function(e){return"error"===e?!1:"installed"===e?!1:!0}}),app.filter("installationStateLabel",function(){return function(e){return"error"===e?"Error":"subdomain_error"===e?"Error":"installed"===e?"Installed":"downloading_image"===e?"Downloading":"pending_install"===e?"Installing":"pending_uninstall"===e?"Uninstalling":"creating_container"===e?"Container":"downloading_manifest"===e?"Manifest":"creating_volume"===e?"Volume":"registering_subdomain"===e?"Subdomain":"allocated_oauth_credentials"===e?"OAuth":e}}),app.filter("accessRestrictionLabel",function(){return function(e){return""===e?"public":"roleUser"===e?"private":"roleAdmin"===e?"private (Admins only)":e}}),app.directive("laterName",function(){return{restrict:"A",require:["?ngModel","^?form"],link:function(e,t,o,n){o.$set("name",o.laterName);var r=n[0],i=n[1];r&&i&&(r.$name=o.name,i.$addControl(r),e.$on("$destroy",function(){i.$removeControl(r)}))}}}),angular.module("Application").service("Client",["$http","md5",function(e,t){function o(e,t){Error.call(this),this.name=this.constructor.name,this.statusCode=e,this.message="string"==typeof t?t:JSON.stringify(t)}function n(e){return function(t,n){return 401===n?i.logout():void e(new o(n,t))}}function r(){this._ready=!1,this._configListener=[],this._readyListener=[],this._userInfo={username:null,email:null,admin:!1},this._token=null,this._clientId="cid-webadmin",this._clientSecret="unused",this._config={apiServerOrigin:null,webServerOrigin:null,fqdn:null,ip:null,revision:null,update:null,isDev:!1,progress:{}},this._installedApps=[],this.setToken(localStorage.token)}var i=null;return r.prototype.setReady=function(){this._ready||(this._ready=!0,this._readyListener.forEach(function(e){e()}))},r.prototype.onReady=function(e){this._ready&&e(),this._readyListener.push(e)},r.prototype.onConfig=function(e){this._configListener.push(e),e(this._config)},r.prototype.setUserInfo=function(e){this._userInfo.username=e.username,this._userInfo.email=e.email,this._userInfo.admin=!!e.admin,this._userInfo.gravatar="https://www.gravatar.com/avatar/"+t.createHash(e.email.toLowerCase())+".jpg?s=24&d=mm"},r.prototype.setConfig=function(e){this._config.apiServerOrigin=e.apiServerOrigin,this._config.webServerOrigin=e.webServerOrigin,this._config.version=e.version,this._config.fqdn=e.fqdn,this._config.ip=e.ip,this._config.revision=e.revision,this._config.update=e.update,this._config.isDev=e.isDev,this._config.progress=e.progress;var t=this;this._configListener.forEach(function(e){e(t._config)})},r.prototype.getInstalledApps=function(){return this._installedApps},r.prototype.getUserInfo=function(){return this._userInfo},r.prototype.getConfig=function(){return this._config},r.prototype.setToken=function(t){e.defaults.headers.common.Authorization="Bearer "+t,t?localStorage.token=t:localStorage.removeItem("token"),this._token=t},r.prototype.config=function(t){e.get("/api/v1/cloudron/config").success(function(e,n){return 200!==n||"object"!=typeof e?t(new o(n,e)):void t(null,e)}).error(n(t))},r.prototype.userInfo=function(t){e.get("/api/v1/profile").success(function(e,n){return 200!==n||"object"!=typeof e?t(new o(n,e)):void t(null,e)}).error(n(t))},r.prototype.installApp=function(t,r,i,a,s,l){var c=this,p={appStoreId:t,version:r,password:i,location:s.location,portBindings:s.portBindings,accessRestriction:s.accessRestriction};e.post("/api/v1/apps/install",p).success(function(e,t){return 202!==t||"object"!=typeof e?l(new o(t,e)):(e.manifest={title:a},c._installedApps.push(e),void l(null,e.id))}).error(n(l))},r.prototype.uninstallApp=function(t,r,i){var a={password:r};e.post("/api/v1/apps/"+t+"/uninstall",a).success(function(e,t){return 202!==t?i(new o(t,e)):void i(null)}).error(n(i))},r.prototype.configureApp=function(t,r,i,a){var s={appId:t,password:r,location:i.location,portBindings:i.portBindings,accessRestriction:i.accessRestriction};e.post("/api/v1/apps/"+t+"/configure",s).success(function(e,t){return 202!==t?a(new o(t,e)):void a(null)}).error(n(a))},r.prototype.updateApp=function(t,r,i,a){e.post("/api/v1/apps/"+t+"/update",{version:r,password:i}).success(function(e,t){return 202!==t?a(new o(t,e)):void a(null)}).error(n(a))},r.prototype.startApp=function(t,r){var i={};e.post("/api/v1/apps/"+t+"/start",i).success(function(e,t){return 202!==t?r(new o(t,e)):void r(null)}).error(n(r))},r.prototype.stopApp=function(t,r){var i={};e.post("/api/v1/apps/"+t+"/stop",i).success(function(e,t){return 202!==t?r(new o(t,e)):void r(null)}).error(n(r))},r.prototype.version=function(t){e.get("/api/v1/cloudron/status").success(function(e,n){return 200!==n||"object"!=typeof e?t(new o(n,e)):void t(null,e)}).error(n(t))},r.prototype.isServerFirstTime=function(t){e.get("/api/v1/cloudron/status").success(function(e,n){return 200!==n||"object"!=typeof e?t(new o(n,e)):void t(null,!e.activated)}).error(n(t))},r.prototype.getNakedDomain=function(t){e.get("/api/v1/settings/naked_domain").success(function(e,n){return 200!==n||"object"!=typeof e?t(new o(n,e)):void t(null,e.appid)}).error(n(t))},r.prototype.setNakedDomain=function(t,r){e.post("/api/v1/settings/naked_domain",{appid:t}).success(function(e,t){return 204!==t?r(new o(t)):void r(null)}).error(n(r))},r.prototype.getApps=function(t){e.get("/api/v1/apps").success(function(e,n){return 200!==n||"object"!=typeof e?t(new o(n,e)):void t(null,e.apps)}).error(n(t))},r.prototype.getApp=function(e,t){var o=null;return this._installedApps.some(function(t){return t.id===e?(o=t,!0):!1}),o?t(null,o):t(new Error("App not found"))},r.prototype.getAppLogStream=function(e){var t=new EventSource("/api/v1/apps/"+e+"/logstream");return t},r.prototype.getAppLogUrl=function(e){return"/api/v1/apps/"+e+"/logs?access_token="+this._token},r.prototype.setAdmin=function(t,r,i){var a={username:t,admin:r};e.post("/api/v1/users/"+t+"/admin",a).success(function(e,t){return 204!==t?i(new o(t,e)):void i(null)}).error(n(i))},r.prototype.createAdmin=function(t,r,i,a,s){var l={username:t,password:r,email:i},c=this;e.post("/api/v1/cloudron/activate?setupToken="+a,l).success(function(e,n){return 201!==n||"object"!=typeof e?s(new o(n,e)):(c.setToken(e.token),c.setUserInfo({username:t,email:i,admin:!0}),void s(null,e.activated))}).error(n(s))},r.prototype.listUsers=function(t){e.get("/api/v1/users").success(function(e,n){return 200!==n||"object"!=typeof e?t(new o(n,e)):void t(null,e)}).error(n(t))},r.prototype.stats=function(t){e.get("/api/v1/cloudron/stats").success(function(e,n){return 200!==n||"object"!=typeof e?t(new o(n,e)):void t(null,e)}).error(n(t))},r.prototype.getOAuthClients=function(t){e.get("/api/v1/oauth/clients").success(function(e,n){return 200!==n||"object"!=typeof e?t(new o(n,e)):void t(null,e.clients)}).error(n(t))},r.prototype.delTokensByClientId=function(t,r){e["delete"]("/api/v1/oauth/clients/"+t+"/tokens").success(function(e,t){return 204!==t?r(new o(t,e)):void r(null)}).error(n(r))},r.prototype.update=function(t){e.get("/api/v1/cloudron/update").success(function(e,n){return 202!==n||"object"!=typeof e?t(new o(n,e)):void t(null,e)}).error(n(t))},r.prototype.reboot=function(t){e.get("/api/v1/cloudron/reboot").success(function(e,n){return 202!==n||"object"!=typeof e?t(new o(n,e)):void t(null,e)}).error(n(t))},r.prototype.backup=function(t){e.post("/api/v1/cloudron/backups").success(function(e,n){return 202!==n||"object"!=typeof e?t(new o(n,e)):void t(null,e)}).error(n(t))},r.prototype.setCertificate=function(t,r,i){console.log("will set certificate");var a=new FormData;a.append("certificate",t),a.append("key",r),e.post("/api/v1/cloudron/certificate",a,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).success(function(e,t){return 202!==t?i(new o(t,e)):void i(null)}).error(n(i))},r.prototype.graphs=function(t,r,i){var a={params:{target:t,format:"json",from:r}};e.get("/api/v1/cloudron/graphs",a).success(function(e,t){return 200!==t||"object"!=typeof e?i(new o(t,e)):void i(null,e)}).error(n(i))},r.prototype.createUser=function(t,r,i){var a={username:t,email:r};e.post("/api/v1/users",a).success(function(e,t){return 201!==t||"object"!=typeof e?i(new o(t,e)):void i(null,e)}).error(n(i))},r.prototype.removeUser=function(t,r,i){var a={username:t,password:r};e({method:"DELETE",url:"/api/v1/users/"+t,data:a,headers:{"Content-Type":"application/json"}}).success(function(e,t){return 204!==t?i(new o(t,e)):void i(null)}).error(n(i))},r.prototype.changePassword=function(t,r,i){var a={password:t,newPassword:r};e.post("/api/v1/users/"+this._userInfo.username+"/password",a).success(function(e,t){return 204!==t||"object"!=typeof e?i(new o(t,e)):void i(null,e)}).error(n(i))},r.prototype.refreshConfig=function(e){var t=this;e="function"==typeof e?e:function(){},this.config(function(o,n){return o?e(o):(t.setConfig(n),void e(null))})},r.prototype.refreshInstalledApps=function(e){var t=this;e="function"==typeof e?e:function(){},this.getApps(function(o,n){if(o)return e(o);n.forEach(function(e){for(var o=!1,n=0;n<t._installedApps.length;++n)if(t._installedApps[n].id===e.id){o=n;break}o!==!1?angular.copy(e,t._installedApps[o]):t._installedApps.push(e)});for(var r=t._installedApps.length-1;r>=0;--r)n.some(function(e){return e.id===t._installedApps[r].id})||t._installedApps.splice(r,1);e(null)})},r.prototype.logout=function(){this.setToken(null),this._userInfo={},window.location.href="/api/v1/session/logout"},r.prototype.exchangeCodeForToken=function(t,r){var i={grant_type:"authorization_code",code:t,redirect_uri:window.location.origin,client_id:this._clientId,client_secret:this._clientSecret};e.post("/api/v1/oauth/token?response_type=token&client_id="+this._clientId,i).success(function(e,t){return 200!==t||"object"!=typeof e?r(new o(t,e)):void r(null,e.access_token)}).error(n(r))},i=new r}]),angular.module("Application").service("AppStore",["$http","Client",function(e,t){function o(e,t){Error.call(this),this.name=this.constructor.name,this.statusCode=e,this.message="string"==typeof t?t:JSON.stringify(t)}function n(){this._appsCache={}}return n.prototype.getApps=function(n){if(null===t.getConfig().apiServerOrigin)return n(new o(420,"Enhance Your Calm"));var r=this;e.get(t.getConfig().apiServerOrigin+"/api/v1/appstore/apps",{params:{boxVersion:t.getConfig().version}}).success(function(e,t){return 200!==t?n(new o(t,e)):(e.apps.forEach(function(e){r._appsCache[e.id]||(r._appsCache[e.id]=e)}),n(null,r._appsCache))}).error(function(e,t){return n(new o(t,e))})},n.prototype.getAppById=function(e,t){if(e in this._appsCache)return t(null,this._appsCache[e]);var n=this;this.getApps(function(r){return r?t(r):e in n._appsCache?t(null,n._appsCache[e]):void t(new o(404,"Not found"))})},n.prototype.getManifest=function(n,r){if(null===t.getConfig().apiServerOrigin)return r(new o(420,"Enhance Your Calm"));var i=t.getConfig().apiServerOrigin+"/api/v1/appstore/apps/"+n+"/manifest";console.log("Getting the manifest of ",n,i),e.get(i).success(function(e,t){return 200!==t?r(new o(t,e)):r(null,e)}).error(function(e,t){return r(new o(t,e))})},new n}]),angular.module("Application").controller("MainController",["$scope","$route","$interval","Client",function(e,t,o,n){e.initialized=!1,e.userInfo=n.getUserInfo(),e.installedApps=n.getInstalledApps(),e.isActive=function(e){return t.current?0===t.current.$$route.originalPath.indexOf(e):!1},e.logout=function(t){t.stopPropagation(),e.initialized=!1,n.logout()},e.login=function(){var e=window.location.origin+"/login_callback.html",t="root,profile,apps,roleAdmin";window.location.href="/api/v1/oauth/dialog/authorize?response_type=code&client_id="+n._clientId+"&redirect_uri="+e+"&scope="+t},e.setup=function(){window.location.href="/error.html?errorCode=1"},e.error=function(e){console.error(e),window.location.href="/error.html"},n.isServerFirstTime(function(t,r){return t?e.error(t):r?e.setup():void(localStorage.token?n.refreshConfig(function(t){return t&&401===t.statusCode?e.login():t?e.error(t):(n.getConfig().progress.update&&(window.location.href="/update.html"),void n.userInfo(function(t,r){return t?e.error(t):(n.setUserInfo(r),void n.refreshInstalledApps(function(t){if(t)return e.error(t);var r=o(n.refreshInstalledApps.bind(n),2e3),i=o(n.refreshConfig.bind(n),5e3);e.$on("$destroy",function(){o.cancel(r),o.cancel(i)}),n.setReady(),e.initialized=!0}))}))}):e.login())}),n.onConfig(function(e){e.progress.update&&(window.location.href="/update.html")})}]),angular.module("Application").controller("AccountController",["$scope","$location","Client",function(e,t,o){e.user=o.getUserInfo(),e.config=o.getConfig(),e.changePassword=function(){t.path("/userpassword")}}]),angular.module("Application").controller("AppConfigureController",["$scope","$routeParams","$location","Client",function(e,t,o,n){n.getUserInfo().admin||o.path("/"),e.app=null,e.password="",e.location="",e.accessRestriction="",e.disabled=!1,e.error={},e.domain="",e.portBindings={},e.configureApp=function(){e.error.name=null,e.error.password=null;var o={};for(var r in e.portBindings)o[r]=e.portBindings[r].hostPort;n.configureApp(t.appId,e.password,{location:e.location,portBindings:o,accessRestriction:e.accessRestriction},function(o){return o?(403===o.statusCode?(e.error.password="Wrong password provided.",e.password=""):e.error.name="App with the name "+e.app.name+" cannot be configured.",void(e.disabled=!1)):void window.location.replace("#/app/"+t.appId+"/details")})},e.cancel=function(){window.history.back()},n.onReady(function(){e.domain=n.getConfig().fqdn,n.getApp(t.appId,function(t,o){if(e.error=t||{},!t){e.app=o,e.location=o.location,e.portBindings=o.manifest.tcpPorts,e.accessRestriction=o.accessRestriction;for(var n in e.portBindings)e.portBindings[n].hostPort=o.portBindings[n]}})}),document.getElementById("inputLocation").focus()}]),angular.module("Application").controller("AppDetailsController",["$scope","$http","$routeParams","$location","Client",function(e,t,o,n,r){function i(e,t){var o=[];t&&t.datapoints&&(o=t.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var n=new Rickshaw.Graph({element:document.querySelector("#"+e+"CpuChart"),renderer:"area",width:580,height:250,min:0,max:100,series:[{color:"steelblue",data:o||[],name:"cpu"}]});new Rickshaw.Graph.Axis.Time({graph:n}),new Rickshaw.Graph.Axis.Y({graph:n,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"CpuYAxis")}),new Rickshaw.Graph.HoverDetail({graph:n,formatter:function(e,t,o){var n='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=n+e.name+": "+new Number(o).toFixed(2)+"%<br>";return r}})}n.render()}function a(e,t){var o=[];t&&t.datapoints&&(o=t.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var n=new Rickshaw.Graph({element:document.querySelector("#"+e+"MemoryChart"),renderer:"area",width:580,height:250,min:0,max:2147483648,series:[{color:"steelblue",data:o||[],name:"memory"}]});new Rickshaw.Graph.Axis.Time({graph:n}),new Rickshaw.Graph.Axis.Y({graph:n,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"MemoryYAxis")}),new Rickshaw.Graph.HoverDetail({graph:n,formatter:function(e,t,o){var n='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=n+e.name+": "+new Number(o/1048576).toFixed(2)+"MB<br>";return r}})}n.render()}function s(e,t){var o=[];t&&t.datapoints&&(o=t.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var n=new Rickshaw.Graph({element:document.querySelector("#"+e+"DiskChart"),renderer:"area",width:580,height:250,min:0,max:32212254720,series:[{color:"steelblue",data:o||[],name:"apps"}]});new Rickshaw.Graph.Axis.Time({graph:n}),new Rickshaw.Graph.Axis.Y({graph:n,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"DiskYAxis")}),new Rickshaw.Graph.HoverDetail({graph:n,formatter:function(e,t,o){var n='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=n+e.name+": "+new Number(o/1048576).toFixed(2)+"MB<br>";return r}}),new Rickshaw.Graph.Legend({graph:n,element:document.getElementById(e+"DiskLegend")})}n.render()}r.getUserInfo().admin||n.path("/"),e.app={},e.initialized=!1,e.updateAvailable=!1,e.activeTab="day",e.updateVersion=null,e.password="",e.passwordWrong=!1,e.startApp=function(){r.startApp(o.appId,function(e){e&&console.error(e)})},e.stopApp=function(){r.stopApp(o.appId,function(e){e&&console.error(e)})},e.updateApp=function(){e.passwordWrong=!1,r.updateApp(o.appId,e.updateVersion,e.password,function(t){t&&403===t.statusCode?(e.password="",e.passwordWrong=!0,$("#inputPasswordUpdate").focus()):t?console.error(t):($("#updateAppModal").modal("hide"),e.updateAvailable=!1,e.updateVersion=null,e.password="")})},e.uninstallApp=function(){e.passwordWrong=!1,r.uninstallApp(o.appId,e.password,function(t){t&&403===t.statusCode?(e.password="",e.passwordWrong=!0,$("#inputPasswordUninstall").focus()):t?console.error(t):($("#uninstallAppModal").modal("hide"),e.password="",window.location.href="#/")})},e.updateGraphs=function(){var t="nonNegativeDerivative(sumSeries(collectd.localhost.table-"+e.app.id+"-cpu.gauge-user,collectd.localhost.table-"+e.app.id+"-cpu.gauge-system))",o="collectd.localhost.table-"+e.app.id+"-memory.gauge-max_usage_in_bytes",n="collectd.localhost.filecount-"+e.app.id+"-appdata.bytes",l=e.activeTab,c="-24hours";switch(l){case"day":c="-24hours";break;case"month":c="-1month";break;case"year":c="-1year";break;default:console.log("internal errror")}r.graphs([t,o,n],c,function(e,t){return e?console.log(e):(i(l,t[0]),a(l,t[1]),void s(l,t[2]))})},r.onReady(function(){r.getApp(o.appId,function(t,o){if(t)return console.error(t),void(window.location.href="#/");if(e.app=o,e.appLogUrl=r.getAppLogUrl(o.id),r.getConfig().update&&r.getConfig().update.apps)for(var n=r.getConfig().update.apps,i=0;i<n.length;i++)n[i].appId===e.app.appStoreId&&n[i].version!==e.app.version&&(e.updateAvailable=!0,e.updateVersion=n[i].version);e.updateGraphs(),e.initialized=!0})})}]),angular.module("Application").controller("AppInstallController",["$scope","$routeParams","$location","Client","AppStore","$timeout",function(e,t,o,n,r,i){n.getUserInfo().admin||o.path("/"),e.app=null,e.password="",e.location="",e.accessRestriction="",e.disabled=!1,e.error={},e.domain="",e.version=null,e.portBindings={},e.hostPortMin=1025,e.hostPortMax=9999,n.onReady(function(){e.domain=n.getConfig().fqdn,r.getAppById(t.appStoreId,function(t,o){e.error=t||{},t||(e.app=o)}),r.getManifest(t.appStoreId,function(t,o){if(e.error=t||{},!t){e.version=o.version,e.portBindings=o.tcpPorts,e.accessRestriction=o.accessRestriction||"";for(var n in e.portBindings)e.portBindings[n].hostPort=parseInt(n)}})}),e.installApp=function(){e.error.name=null,e.error.password=null;var o={};for(var r in e.portBindings)o[r]=e.portBindings[r].hostPort;n.installApp(t.appStoreId,e.version,e.password,e.app.title,{location:e.location,portBindings:o,accessRestriction:e.accessRestriction},function(t,o){return t?(409===t.statusCode?e.error.name="Application already exists.":403===t.statusCode?(e.error.password="Wrong password provided.",e.password=""):e.error.name="App with the name "+e.app.name+" cannot be installed.",void(e.disabled=!1)):void window.location.replace("#/app/"+o+"/details")})},e.cancel=function(){window.history.back()},e.$on("$viewContentLoaded",function(){i(function(){$("input[autofocus]:visible:first").focus()},1e3)})}]),angular.module("Application").controller("AppStoreController",["$scope","$location","$timeout","Client","AppStore",function(e,t,o,n,r){function i(){r.getApps(function(t,r){return t&&420===t.statusCode?o(i,500):t?(e.loadStatus=e.ERROR,void(e.loadError=t.message)):void n.refreshInstalledApps(function(t){if(t)return e.loadStatus=e.ERROR,void(e.loadError=t.message);for(var o in r){for(var i=!1,a=0;a<e.apps.length;++a)if(r[o].id===e.apps[a].id){i=!0;break}i||e.apps.push(r[o])}e.apps.forEach(function(t,o){n._installedApps&&(t.installed=n._installedApps.some(function(e){return e.appStoreId===t.id})),r[t.id]||e.apps.splice(o,1)}),e.loadStatus=e.LOADED})})}n.getUserInfo().admin||t.path("/"),e.LOADING=1,e.ERROR=2,e.LOADED=3,e.loadStatus=e.LOADING,e.loadError="",e.apps=[],e.installApp=function(e){t.path("/app/"+e.id+"/install")},e.openApp=function(e){for(var t=0;t<n._installedApps.length;t++)if(n._installedApps[t].appStoreId===e.id){window.open("https://"+n._installedApps[t].fqdn);break}},i()}]),angular.module("Application").controller("DashboardController",function(){}),angular.module("Application").controller("GraphsController",["$scope","$location","Client",function(e,t,o){function n(e,t){var o=[];t&&t.datapoints&&(o=t.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var n=new Rickshaw.Graph({element:document.querySelector("#"+e+"CpuChart"),renderer:"area",width:580,height:250,min:0,max:100,series:[{color:"steelblue",data:o,name:"cpu"}]});new Rickshaw.Graph.Axis.Time({graph:n}),new Rickshaw.Graph.Axis.Y({graph:n,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"CpuYAxis")}),new Rickshaw.Graph.HoverDetail({graph:n,formatter:function(e,t,o){var n='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=n+e.name+": "+new Number(o).toFixed(2)+"%<br>";return r}})}n.render()}function r(e,t,o){var n=[],r=[];t&&t.datapoints&&(n=t.datapoints.map(function(e){return{y:e[0],x:e[1]}})),o&&o.datapoints&&(r=o.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var i=new Rickshaw.Graph({element:document.querySelector("#"+e+"NetworkChart"),renderer:"area",width:580,height:250,series:[{color:"steelblue",data:n,name:"tx"},{color:"green",data:r,name:"rx"}]});new Rickshaw.Graph.Axis.Time({graph:i}),new Rickshaw.Graph.Axis.Y({graph:i,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"NetworkYAxis")}),new Rickshaw.Graph.HoverDetail({graph:i,formatter:function(e,t,o){var n='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=n+e.name+": "+new Number(o/1024).toFixed(2)+"KB<br>";return r}})}i.render()}function i(e,t,o){var n=[],r=[];t&&t.datapoints&&(n=t.datapoints.map(function(e){return{y:e[0],x:e[1]}})),o&&o.datapoints&&(r=o.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var i=new Rickshaw.Graph({element:document.querySelector("#"+e+"DiskChart"),renderer:"area",width:580,height:250,min:0,max:32212254720,series:[{color:"steelblue",data:n,name:"apps"},{color:"green",data:r,name:"data"}]});new Rickshaw.Graph.Axis.Time({graph:i}),new Rickshaw.Graph.Axis.Y({graph:i,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"DiskYAxis")}),new Rickshaw.Graph.HoverDetail({graph:i,formatter:function(e,t,o){var n='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=n+e.name+": "+new Number(o/1073741824).toFixed(2)+"GB<br>";return r}}),new Rickshaw.Graph.Legend({graph:i,element:document.getElementById(e+"DiskLegend")})}i.render()}o.getUserInfo().admin||t.path("/"),e.activeTab="day";var a="transformNull(scale(divideSeries(sumSeries(collectd.localhost.cpu-0.cpu-system,collectd.localhost.cpu-0.cpu-nice,collectd.localhost.cpu-0.cpu-user),sumSeries(collectd.localhost.cpu-0.cpu-idle,collectd.localhost.cpu-0.cpu-system,collectd.localhost.cpu-0.cpu-nice,collectd.localhost.cpu-0.cpu-user,collectd.localhost.cpu-0.cpu-wait)), 100), 0)",s="transformNull(collectd.localhost.interface-eth0.if_octets.tx, 0)",l="transformNull(collectd.localhost.interface-eth0.if_octets.rx, 0)",c="transformNull(collectd.localhost.df-loop0.df_complex-used, 0)",p="transformNull(collectd.localhost.df-loop1.df_complex-used, 0)";e.updateGraphs=function(){var t=e.activeTab,u="-24hours";switch(t){case"day":u="-24hours";break;case"month":u="-1month";break;case"year":u="-1year";break;default:console.log("internal errror")}o.graphs([a,s,l,c,p],u,function(e,o){return e?console.log(e):(n(t,o[0]),r(t,o[1],o[2]),void i(t,o[3],o[4]))})},o.onReady(e.updateGraphs)}]),angular.module("Application").controller("SecurityController",["$scope","Client",function(e,t){e.activeClients=[],e.tokenInUse=null,e.removeAccessTokens=function(e,o){e._busy=!0,t.delTokensByClientId(e.id,function(t){return t?console.error(t):($(o.target).addClass("disabled"),void(e._busy=!1))})},t.onReady(function(){e.tokenInUse=t._token,t.getOAuthClients(function(t,o){return t?console.error(t):void(e.activeClients=o)})})}]),angular.module("Application").controller("SettingsController",["$scope","$location","Client",function(e,t,o){o.getUserInfo().admin||t.path("/"),e.user=o.getUserInfo(),e.config=o.getConfig(),e.nakedDomainApp=null,e.drives=[],e.certificateFile=null,e.certificateFileName="",e.keyFile=null,e.keyFileName="",e.setNakedDomain=function(){var t=e.nakedDomainApp?e.nakedDomainApp.id:"admin";o.setNakedDomain(t,function(e){return e?console.error("Error setting naked domain",e):void 0})},e.backup=function(){$("#backupProgressModal").modal("show"),e.$parent.initialized=!1,o.backup(function(t){function n(){o.version(function(t){return t?window.setTimeout(n,1e3):($("#backupProgressModal").modal("hide"),void(e.$parent.initialized=!0))})}t&&console.error(t),window.setTimeout(n,5e3)})},e.reboot=function(){$("#rebootModal").modal("hide"),$("#rebootProgressModal").modal("show"),e.$parent.initialized=!1,o.reboot(function(e){function t(){o.version(function(e){return e?window.setTimeout(t,1e3):($("#rebootProgressModal").modal("hide"),void window.setTimeout(window.location.reload.bind(window.location,!0),1e3))})}e&&console.error(e),window.setTimeout(t,5e3)})},e.update=function(){$("#updateModal").modal("hide"),e.$parent.initialized=!1,o.update(function(e){e&&console.error(e),window.location.href="/update.html"})},document.getElementById("idCertificate").onchange=function(t){e.$apply(function(){e.certificateFile=t.target.files[0],e.certificateFileName=t.target.files[0].name})},document.getElementById("idKey").onchange=function(t){e.$apply(function(){e.keyFile=t.target.files[0],e.keyFileName=t.target.files[0].name})},e.setCertificate=function(){return console.log("Will set the certificate"),e.certificateFile?e.keyFile?void o.setCertificate(e.certificateFile,e.keyFile,function(e){return e?console.log(e):void window.setTimeout(window.location.reload.bind(window.location,!0),3e3)}):console.log("Key not set"):console.log("Certificate not set")},o.onConfig(function(){e.tokenInUse=o._token,o.getApps(function(t,n){t&&console.error("Error loading app list"),e.apps=n,o.getNakedDomain(function(t,o){if(t)return console.error(t);e.nakedDomainApp=null;for(var n=0;n<e.apps.length;n++)if(e.apps[n].id===o){e.nakedDomainApp=e.apps[n];break}}),o.stats(function(t,o){return t?console.error(t):void(e.drives=o.drives)})})})}]),angular.module("Application").controller("UserCreateController",["$scope","$routeParams","$location","Client",function(e,t,o,n){n.getUserInfo().admin||o.path("/"),e.disabled=!1,e.username="",e.email="",e.alreadyTaken="",e.submit=function(){e.alreadyTaken="",e.disabled=!0,n.createUser(e.username,e.email,function(t){return t&&409===t.statusCode?(e.alreadyTaken=e.username,console.error("Username already taken")):(t&&console.error("Unable to create user.",t),void(window.location.href="#/userlist"))})},e.cancel=function(){window.history.back()}}]),angular.module("Application").controller("UserListController",["$scope","$location","Client",function(e,t,o){function n(){o.listUsers(function(t,o){return t?console.error("Unable to get user listing.",t):(e.users=o.users,void(e.ready=!0))})}o.getUserInfo().admin||t.path("/"),e.ready=!1,e.users=[],e.userInfo=o.getUserInfo(),e.userDeleteForm={username:"",password:""},e.isMe=function(e){return e.username===o.getUserInfo().username},e.isAdmin=function(e){return!!e.admin},e.toggleAdmin=function(e){o.setAdmin(e.username,!e.admin,function(t){return t?console.error(t):void(e.admin=!e.admin)})},e.deleteUser=function(t){return e.userDeleteForm.username!==t.username?console.error("Username does not match"):void o.removeUser(t.username,e.userDeleteForm.password,function(e){return e&&401===e.statusCode?console.error("Wrong password"):e?console.error("Unable to delete user.",e):($("#userDeleteModal-"+t.username).modal("hide"),void n())})},e.addUser=function(){window.location.href="#/usercreate"},n()}]),angular.module("Application").controller("UserPasswordController",["$scope","$routeParams","$location","Client",function(e,t,o,n){n.getUserInfo().admin||o.path("/"),e.active=!1,e.currentPassword="",e.newPassword="",e.repeatPassword="",e.validationClass={},e.submit=function(){return e.validationClass.currentPassword="",e.validationClass.newPassword="",e.validationClass.repeatPassword="",e.newPassword!==e.repeatPassword?(document.getElementById("inputRepeatPassword").focus(),e.validationClass.repeatPassword="has-error",void(e.repeatPassword="")):(e.active=!0,void n.changePassword(e.currentPassword,e.newPassword,function(t){t&&403===t.statusCode?(document.getElementById("inputCurrentPassword").focus(),e.validationClass.currentPassword="has-error",e.currentPassword="",e.newPassword="",e.repeatPassword=""):t?console.error("Unable to change password.",t):window.history.back(),e.active=!1}))},e.cancel=function(){window.history.back()},document.getElementById("inputCurrentPassword").focus()}]);
//# sourceMappingURL=data:application/json;base64,