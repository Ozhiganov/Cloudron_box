"use strict";var app=angular.module("Application",["ngRoute","ngAnimate","angular-md5"]);app.config(["$routeProvider",function(e){e.when("/",{redirectTo:"/apps"}).when("/users",{controller:"UsersController",templateUrl:"views/users.html"}).when("/appstore",{controller:"AppStoreController",templateUrl:"views/appstore.html"}).when("/apps",{controller:"AppsController",templateUrl:"views/apps.html"}).when("/dns",{controller:"DnsController",templateUrl:"views/dns.html"}).when("/account",{controller:"AccountController",templateUrl:"views/account.html"}).when("/graphs",{controller:"GraphsController",templateUrl:"views/graphs.html"}).otherwise({redirectTo:"/"})}]);var ISTATES={ISTATE_PENDING_INSTALL:"pending_install",ISTATE_PENDING_CONFIGURE:"pending_configure",ISTATE_PENDING_UNINSTALL:"pending_uninstall",ISTATE_PENDING_RESTORE:"pending_restore",ISTATE_PENDING_UPDATE:"pending_update",ISTATE_ERROR:"error",ISTATE_INSTALLED:"installed"};app.filter("installationActive",function(){return function(e){return e===ISTATES.ISTATE_ERROR?!1:e===ISTATES.ISTATE_INSTALLED?!1:!0}}),app.filter("installationStateLabel",function(){return function(e){switch(e){case ISTATES.ISTATE_PENDING_INSTALL:return"Installing";case ISTATES.ISTATE_PENDING_CONFIGURE:return"Configuring";case ISTATES.ISTATE_PENDING_UNINSTALL:return"Uninstalling";case ISTATES.ISTATE_PENDING_RESTORE:return"Starting";case ISTATES.ISTATE_PENDING_UPDATE:return"Updating";case ISTATES.ISTATE_ERROR:return"Error";case ISTATES.ISTATE_INSTALLED:return"Running";default:return e}}}),app.filter("accessRestrictionLabel",function(){return function(e){return""===e?"public":"roleUser"===e?"private":"roleAdmin"===e?"private (Admins only)":e}}),app.directive("laterName",function(){return{restrict:"A",require:["?ngModel","^?form"],link:function(e,o,n,r){n.$set("name",n.laterName);var t=r[0],a=r[1];t&&a&&(t.$name=n.name,a.$addControl(t),e.$on("$destroy",function(){a.$removeControl(t)}))}}}),angular.module("Application").service("Client",["$http","md5",function(e,o){function n(e,o){Error.call(this),this.name=this.constructor.name,this.statusCode=e,this.message="string"==typeof o?o:JSON.stringify(o)}function r(e){return function(o,r){return 401===r?a.logout():void e(new n(r,o))}}function t(){this._ready=!1,this._configListener=[],this._readyListener=[],this._userInfo={username:null,email:null,admin:!1},this._token=null,this._clientId="cid-webadmin",this._clientSecret="unused",this._config={apiServerOrigin:null,webServerOrigin:null,fqdn:null,ip:null,revision:null,update:{box:null,apps:null},isDev:!1,progress:{},isCustomDomain:!1,developerMode:!1},this._installedApps=[],this.setToken(localStorage.token)}var a=null;return t.prototype.setReady=function(){this._ready||(this._ready=!0,this._readyListener.forEach(function(e){e()}))},t.prototype.onReady=function(e){this._ready&&e(),this._readyListener.push(e)},t.prototype.onConfig=function(e){this._configListener.push(e),e(this._config)},t.prototype.setUserInfo=function(e){this._userInfo.username=e.username,this._userInfo.email=e.email,this._userInfo.admin=!!e.admin,this._userInfo.gravatar="https://www.gravatar.com/avatar/"+o.createHash(e.email.toLowerCase())+".jpg?s=24&d=mm",this._userInfo.gravatarHuge="https://www.gravatar.com/avatar/"+o.createHash(e.email.toLowerCase())+".jpg?s=128&d=mm"},t.prototype.setConfig=function(e){this._config.apiServerOrigin=e.apiServerOrigin,this._config.webServerOrigin=e.webServerOrigin,this._config.version=e.version,this._config.fqdn=e.fqdn,this._config.ip=e.ip,this._config.revision=e.revision,this._config.update=e.update,this._config.isDev=e.isDev,this._config.progress=e.progress,this._config.progress=e.progress,this._config.isCustomDomain=e.isCustomDomain,this._config.developerMode=e.developerMode;var o=this;this._configListener.forEach(function(e){e(o._config)})},t.prototype.getInstalledApps=function(){return this._installedApps},t.prototype.getUserInfo=function(){return this._userInfo},t.prototype.getConfig=function(){return this._config},t.prototype.setToken=function(o){e.defaults.headers.common.Authorization="Bearer "+o,o?localStorage.token=o:localStorage.removeItem("token"),this._token=o},t.prototype.config=function(o){e.get("/api/v1/cloudron/config").success(function(e,r){return 200!==r||"object"!=typeof e?o(new n(r,e)):void o(null,e)}).error(r(o))},t.prototype.userInfo=function(o){var t=this;e.get("/api/v1/profile").success(function(e,r){return 200!==r||"object"!=typeof e?o(new n(r,e)):(t.setUserInfo(e),void o(null,e))}).error(r(o))},t.prototype.changeDeveloperMode=function(o,t,a){var s=this,i={password:t,enabled:o};e.post("/api/v1/developer",i).success(function(e,r){return 200!==r?a(new n(r,e)):(s._config.developerMode=o,void a(null))}).error(r(a))},t.prototype.installApp=function(o,t,a,s,i,p){var l=this,u={appStoreId:o,manifest:t,password:a,location:i.location,portBindings:i.portBindings,accessRestriction:i.accessRestriction};e.post("/api/v1/apps/install",u).success(function(e,o){return 202!==o||"object"!=typeof e?p(new n(o,e)):(e.manifest={title:s},l._installedApps.push(e),void p(null,e.id))}).error(r(p))},t.prototype.uninstallApp=function(o,t,a){var s={password:t};e.post("/api/v1/apps/"+o+"/uninstall",s).success(function(e,o){return 202!==o?a(new n(o,e)):void a(null)}).error(r(a))},t.prototype.configureApp=function(o,t,a,s){var i={appId:o,password:t,location:a.location,portBindings:a.portBindings,accessRestriction:a.accessRestriction};e.post("/api/v1/apps/"+o+"/configure",i).success(function(e,o){return 202!==o?s(new n(o,e)):void s(null)}).error(r(s))},t.prototype.updateApp=function(o,t,a,s,i){e.post("/api/v1/apps/"+o+"/update",{manifest:t,password:s,portBindings:a}).success(function(e,o){return 202!==o?i(new n(o,e)):void i(null)}).error(r(i))},t.prototype.startApp=function(o,t){var a={};e.post("/api/v1/apps/"+o+"/start",a).success(function(e,o){return 202!==o?t(new n(o,e)):void t(null)}).error(r(t))},t.prototype.stopApp=function(o,t){var a={};e.post("/api/v1/apps/"+o+"/stop",a).success(function(e,o){return 202!==o?t(new n(o,e)):void t(null)}).error(r(t))},t.prototype.version=function(o){e.get("/api/v1/cloudron/status").success(function(e,r){return 200!==r||"object"!=typeof e?o(new n(r,e)):void o(null,e)}).error(r(o))},t.prototype.isServerFirstTime=function(o){e.get("/api/v1/cloudron/status").success(function(e,r){return 200!==r||"object"!=typeof e?o(new n(r,e)):void o(null,!e.activated)}).error(r(o))},t.prototype.getNakedDomain=function(o){e.get("/api/v1/settings/naked_domain").success(function(e,r){return 200!==r||"object"!=typeof e?o(new n(r,e)):void o(null,e.appid)}).error(r(o))},t.prototype.setNakedDomain=function(o,t){e.post("/api/v1/settings/naked_domain",{appid:o}).success(function(e,o){return 204!==o?t(new n(o)):void t(null)}).error(r(t))},t.prototype.getApps=function(o){e.get("/api/v1/apps").success(function(e,r){return 200!==r||"object"!=typeof e?o(new n(r,e)):void o(null,e.apps)}).error(r(o))},t.prototype.getApp=function(e,o){var n=null;return this._installedApps.some(function(o){return o.id===e?(n=o,!0):!1}),n?o(null,n):o(new Error("App not found"))},t.prototype.getAppLogStream=function(e){var o=new EventSource("/api/v1/apps/"+e+"/logstream");return o},t.prototype.getAppLogUrl=function(e){return"/api/v1/apps/"+e+"/logs?access_token="+this._token},t.prototype.setAdmin=function(o,t,a){var s={username:o,admin:t};e.post("/api/v1/users/"+o+"/admin",s).success(function(e,o){return 204!==o?a(new n(o,e)):void a(null)}).error(r(a))},t.prototype.createAdmin=function(o,t,a,s,i){var p={username:o,password:t,email:a},l=this;e.post("/api/v1/cloudron/activate?setupToken="+s,p).success(function(e,r){return 201!==r||"object"!=typeof e?i(new n(r,e)):(l.setToken(e.token),l.setUserInfo({username:o,email:a,admin:!0}),void i(null,e.activated))}).error(r(i))},t.prototype.listUsers=function(o){e.get("/api/v1/users").success(function(e,r){return 200!==r||"object"!=typeof e?o(new n(r,e)):void o(null,e)}).error(r(o))},t.prototype.getOAuthClients=function(o){e.get("/api/v1/oauth/clients").success(function(e,r){return 200!==r||"object"!=typeof e?o(new n(r,e)):void o(null,e.clients)}).error(r(o))},t.prototype.delTokensByClientId=function(o,t){e["delete"]("/api/v1/oauth/clients/"+o+"/tokens").success(function(e,o){return 204!==o?t(new n(o,e)):void t(null)}).error(r(t))},t.prototype.update=function(o,t){e.post("/api/v1/cloudron/update",{password:o}).success(function(e,o){return 202!==o||"object"!=typeof e?t(new n(o,e)):void t(null,e)}).error(r(t))},t.prototype.reboot=function(o){e.get("/api/v1/cloudron/reboot").success(function(e,r){return 202!==r||"object"!=typeof e?o(new n(r,e)):void o(null,e)}).error(r(o))},t.prototype.backup=function(o){e.post("/api/v1/cloudron/backups").success(function(e,r){return 202!==r||"object"!=typeof e?o(new n(r,e)):void o(null,e)}).error(r(o))},t.prototype.setCertificate=function(o,t,a){console.log("will set certificate");var s=new FormData;s.append("certificate",o),s.append("key",t),e.post("/api/v1/cloudron/certificate",s,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).success(function(e,o){return 202!==o?a(new n(o,e)):void a(null)}).error(r(a))},t.prototype.graphs=function(o,t,a){var s={params:{target:o,format:"json",from:t}};e.get("/api/v1/cloudron/graphs",s).success(function(e,o){return 200!==o||"object"!=typeof e?a(new n(o,e)):void a(null,e)}).error(r(a))},t.prototype.createUser=function(o,t,a){var s={username:o,email:t};e.post("/api/v1/users",s).success(function(e,o){return 201!==o||"object"!=typeof e?a(new n(o,e)):void a(null,e)}).error(r(a))},t.prototype.removeUser=function(o,t,a){var s={password:t};e({method:"DELETE",url:"/api/v1/users/"+o,data:s,headers:{"Content-Type":"application/json"}}).success(function(e,o){return 204!==o?a(new n(o,e)):void a(null)}).error(r(a))},t.prototype.changePassword=function(o,t,a){var s={password:o,newPassword:t};e.post("/api/v1/users/"+this._userInfo.username+"/password",s).success(function(e,o){return 204!==o?a(new n(o,e)):void a(null,e)}).error(r(a))},t.prototype.changeEmail=function(o,t,a){var s={password:t,email:o};e.put("/api/v1/users/"+this._userInfo.username,s).success(function(e,o){return 204!==o?a(new n(o,e)):void a(null,e)}).error(r(a))},t.prototype.refreshConfig=function(e){var o=this;e="function"==typeof e?e:function(){},this.config(function(n,r){return n?e(n):(o.setConfig(r),void e(null))})},t.prototype.refreshInstalledApps=function(e){var o=this;e="function"==typeof e?e:function(){},this.getApps(function(n,r){if(n)return e(n);r.forEach(function(e){for(var n=!1,r=0;r<o._installedApps.length;++r)if(o._installedApps[r].id===e.id){n=r;break}n!==!1?angular.copy(e,o._installedApps[n]):o._installedApps.push(e)});for(var t=o._installedApps.length-1;t>=0;--t)r.some(function(e){return e.id===o._installedApps[t].id})||o._installedApps.splice(t,1);e(null)})},t.prototype.logout=function(){this.setToken(null),this._userInfo={},window.location.href="/api/v1/session/logout"},t.prototype.exchangeCodeForToken=function(o,t){var a={grant_type:"authorization_code",code:o,redirect_uri:window.location.origin,client_id:this._clientId,client_secret:this._clientSecret};e.post("/api/v1/oauth/token?response_type=token&client_id="+this._clientId,a).success(function(e,o){return 200!==o||"object"!=typeof e?t(new n(o,e)):void t(null,e.access_token)}).error(r(t))},a=new t}]),angular.module("Application").service("AppStore",["$http","Client",function(e,o){function n(e,o){Error.call(this),this.name=this.constructor.name,this.statusCode=e,this.message="string"==typeof o?o:JSON.stringify(o)}function r(){this._appsCache={}}return r.prototype.getApps=function(r){if(null===o.getConfig().apiServerOrigin)return r(new n(420,"Enhance Your Calm"));var t=this;e.get(o.getConfig().apiServerOrigin+"/api/v1/appstore/apps",{params:{boxVersion:o.getConfig().version}}).success(function(e,o){return 200!==o?r(new n(o,e)):(e.apps.forEach(function(e){t._appsCache[e.id]||(t._appsCache[e.id]=e)}),r(null,t._appsCache))}).error(function(e,o){return r(new n(o,e))})},r.prototype.getAppById=function(e,o){if(e in this._appsCache)return o(null,this._appsCache[e]);var r=this;this.getApps(function(t){return t?o(t):e in r._appsCache?o(null,r._appsCache[e]):void o(new n(404,"Not found"))})},r.prototype.getManifest=function(r,t){if(null===o.getConfig().apiServerOrigin)return t(new n(420,"Enhance Your Calm"));var a=o.getConfig().apiServerOrigin+"/api/v1/appstore/apps/"+r+"/manifest";console.log("Getting the manifest of ",r,a),e.get(a).success(function(e,o){return 200!==o?t(new n(o,e)):t(null,e)}).error(function(e,o){return t(new n(o,e))})},new r}]),angular.module("Application").controller("MainController",["$scope","$route","$interval","Client",function(e,o,n,r){e.initialized=!1,e.userInfo=r.getUserInfo(),e.config={},e.update={error:{},password:""},e.isActive=function(e){return o.current?0===o.current.$$route.originalPath.indexOf(e):!1},e.logout=function(o){o.stopPropagation(),e.initialized=!1,r.logout()},e.login=function(){var e=window.location.origin+"/login_callback.html",o="root,profile,apps,roleAdmin";window.location.href="/api/v1/oauth/dialog/authorize?response_type=code&client_id="+r._clientId+"&redirect_uri="+e+"&scope="+o},e.setup=function(){window.location.href="/error.html?errorCode=1"},e.error=function(e){console.error(e),window.location.href="/error.html"},e.showUpdateModal=function(o){e.update.error.password=null,e.update.password="",o.$setPristine(),o.$setUntouched(),$("#updateModal").modal("show")},e.doUpdate=function(){e.update.error.password=null,r.update(e.update.password,function(o){return o?void(403===o.statusCode?(e.update.error.password="Incorrect password",e.update.password=""):console.error("Unable to update.",o)):void(window.location.href="/update.html")})},e.backup=function(){$("#backupProgressModal").modal("show"),e.initialized=!1,r.backup(function(o){function n(){r.version(function(o){return o?window.setTimeout(n,1e3):($("#backupProgressModal").modal("hide"),void(e.initialized=!0))})}o&&console.error(o),window.setTimeout(n,5e3)})},r.isServerFirstTime(function(o,t){return o?e.error(o):t?e.setup():void(localStorage.token?r.refreshConfig(function(o){return o&&401===o.statusCode?e.login():o?e.error(o):(r.getConfig().progress.update&&(window.location.href="/update.html"),void r.userInfo(function(o){return o?e.error(o):void r.refreshInstalledApps(function(o){if(o)return e.error(o);var t=n(r.refreshInstalledApps.bind(r),2e3),a=n(r.refreshConfig.bind(r),5e3);e.$on("$destroy",function(){n.cancel(t),n.cancel(a)}),r.setReady(),e.config=r.getConfig(),e.initialized=!0})}))}):e.login())}),r.onConfig(function(e){e.progress.update&&(window.location.href="/update.html")}),["updateModal"].forEach(function(e){$("#"+e).on("shown.bs.modal",function(){$(this).find("[autofocus]:first").focus()})})}]),angular.module("Application").controller("AccountController",["$scope","$location","Client",function(e,o,n){function r(o){e.passwordchange.error.password=null,e.passwordchange.error.newPassword=null,e.passwordchange.error.newPasswordRepeat=null,e.passwordchange.password="",e.passwordchange.newPassword="",e.passwordchange.newPasswordRepeat="",o&&(o.$setPristine(),o.$setUntouched())}function t(o){e.emailchange.error.email=null,e.emailchange.error.password=null,e.emailchange.email="",e.emailchange.password="",o&&(o.$setPristine(),o.$setUntouched())}function a(){e.developerModeChange.error.password=null,e.developerModeChange.password="",e.developerModeChangeForm.$setPristine(),e.developerModeChangeForm.$setUntouched()}e.user=n.getUserInfo(),e.config=n.getConfig(),e.activeClients=[],e.tokenInUse=null,e.passwordchange={busy:!1,error:{},password:"",newPassword:"",newPasswordRepeat:""},e.emailchange={busy:!1,error:{},email:"",password:""},e.developerModeChange={busy:!1,error:{},password:""},e.doChangePassword=function(o){e.passwordchange.error.password=null,e.passwordchange.error.newPassword=null,e.passwordchange.error.newPasswordRepeat=null,e.passwordchange.busy=!0,n.changePassword(e.passwordchange.password,e.passwordchange.newPassword,function(n){return n?void(403===n.statusCode?(e.passwordchange.error.password=!0,e.passwordchange.password=""):console.error("Unable to change password.",n)):(e.passwordchange.busy=!1,r(o),void $("#passwordChangeModal").modal("hide"))})},e.doChangeEmail=function(o){e.emailchange.error.email=null,e.emailchange.error.password=null,e.emailchange.busy=!0,n.changeEmail(e.emailchange.email,e.emailchange.password,function(r){return r?void(403===r.statusCode?(e.emailchange.error.password=!0,e.emailchange.password=""):console.error("Unable to change email.",r)):(e.emailchange.busy=!1,t(o),n.userInfo(function(){}),void $("#emailChangeModal").modal("hide"))})},e.doChangeDeveloperMode=function(){e.developerModeChange.error.password=null,e.developerModeChange.busy=!0,n.changeDeveloperMode(!e.config.developerMode,e.developerModeChange.password,function(o){return o?void(403===o.statusCode?(e.developerModeChange.error.password=!0,e.developerModeChange.password=""):console.error("Unable to change password.",o)):(e.developerModeChange.busy=!1,a(),void $("#developerModeChangeModal").modal("hide"))})},e.showChangePassword=function(e){r(e),$("#passwordChangeModal").modal("show")},e.showChangeEmail=function(e){t(e),$("#emailChangeModal").modal("show")},e.showChangeDeveloperMode=function(){a(),$("#developerModeChangeModal").modal("show")},e.removeAccessTokens=function(e,o){n.delTokensByClientId(e.id,function(e){return e?console.error(e):void $(o.target).addClass("disabled")})},n.onReady(function(){e.tokenInUse=n._token,n.getOAuthClients(function(o,n){return o?console.error(o):void(e.activeClients=n)})}),["passwordChangeModal","emailChangeModal","developerModeChangeModal"].forEach(function(e){$("#"+e).on("shown.bs.modal",function(){$(this).find("[autofocus]:first").focus()})})}]),angular.module("Application").controller("AppsController",["$scope","$location","Client","AppStore",function(e,o,n,r){e.HOST_PORT_MIN=1024,e.HOST_PORT_MAX=65535,e.installedApps=n.getInstalledApps(),e.config=n.getConfig(),e.appconfigure={busy:!1,error:{},app:{},location:"",password:"",portBindings:{},accessRestriction:""},e.appuninstall={error:{},app:{},password:""},e.appupdate={error:{},app:{},password:"",manifest:{},portBindings:{}},e.reset=function(){e.appconfigure.error={},e.appconfigure.app={},e.appconfigure.location="",e.appconfigure.password="",e.appconfigure.portBindings={},e.appconfigure.accessRestriction="",e.config_form.$setPristine(),e.config_form.$setUntouched(),e.appuninstall.app={},e.appuninstall.error={},e.appuninstall.password="",e.uninstall_form.$setPristine(),e.uninstall_form.$setUntouched()},e.showConfigure=function(o){e.reset(),e.appconfigure.app=o,e.appconfigure.location=o.location,e.appconfigure.accessRestriction=o.accessRestriction,e.appconfigure.portBindingsInfo=o.manifest.tcpPorts||{},e.appconfigure.portBindings=angular.copy(o.portBindings),$("#appConfigureModal").modal("show")},e.doConfigure=function(){e.appconfigure.busy=!0,e.appconfigure.error.name=null,e.appconfigure.error.password=null,n.configureApp(e.appconfigure.app.id,e.appconfigure.password,{location:e.appconfigure.location,portBindings:e.appconfigure.portBindings,accessRestriction:e.appconfigure.accessRestriction},function(o){return o?(403===o.statusCode?(e.appconfigure.error.password="Wrong password provided.",e.appconfigure.password=""):e.appconfigure.error.name="App with the name "+e.appconfigure.app.name+" cannot be configured.",void(e.appconfigure.busy=!1)):(e.appconfigure.busy=!1,$("#appConfigureModal").modal("hide"),void e.reset())})},e.showUninstall=function(o){e.reset(),e.appuninstall.app=o,$("#appUninstallModal").modal("show")},e.doUninstall=function(){e.appuninstall.error.password=null,n.uninstallApp(e.appuninstall.app.id,e.appuninstall.password,function(o){return o?void(403===o.statusCode?(e.appuninstall.password="",e.appuninstall.error.password=!0):console.error(o)):($("#appUninstallModal").modal("hide"),void e.reset())})},e.showUpdate=function(o){e.appupdate.app=o,e.appupdate.error.password=null,r.getManifest(o.appStoreId,function(n,r){if(n)return console.error(n);e.appupdate.manifest=r;var t,a={},s={},i={},p=!1;if(r.tcpPorts)for(t in r.tcpPorts)a[t]=r.tcpPorts[t],o.portBindings[t]?s[t]=o.portBindings[t]:(a[t].isNew=!0,s[t]=r.tcpPorts[t].defaultValue||0,p=!0);if(r.tcpPorts)for(t in o.portBindings)r.tcpPorts[t]||(i[t]=o.portBindings[t],p=!0);else i=angular.copy(o.portBindings),p=!0;p?(e.appupdate.portBindingsInfo=a,e.appupdate.portBindings=s,e.appupdate.obsoletePortBindings=i):(e.appupdate.portBindingsInfo={},e.appupdate.portBindings={},e.appupdate.obsoletePortBindings={}),$("#appUpdateModal").modal("show")})},e.doUpdate=function(o){e.appupdate.error.password=null,n.updateApp(e.appupdate.app.id,e.appupdate.manifest,e.appupdate.portBindings,e.appupdate.password,function(n){return n?void(403===n.statusCode?(e.appupdate.password="",e.appupdate.error.password=!0):console.error(n)):(e.appupdate.app={},e.appupdate.password="",o.$setPristine(),o.$setUntouched(),void $("#appUpdateModal").modal("hide"))})},e.cancel=function(){window.history.back()},["appConfigureModal","appUninstallModal","appUpdateModal"].forEach(function(e){$("#"+e).on("shown.bs.modal",function(){$(this).find("[autofocus]:first").focus()})})}]),angular.module("Application").controller("AppStoreController",["$scope","$location","$timeout","Client","AppStore",function(e,o,n,r,t){function a(){e.ready=!1,t.getApps(function(o,r){return o?(console.error(o),n(a,1e3)):(e.apps=r,void(e.ready=!0))})}r.onReady(function(){r.getUserInfo().admin||o.path("/")}),e.ready=!1,e.apps=[],e.config=r.getConfig(),e.appinstall={busy:!1,error:{},app:{},location:"",password:"",portBindings:{},accessRestriction:""},e.reset=function(){e.appinstall.app={},e.appinstall.location="",e.appinstall.password="",e.appinstall.portBindings={},e.appinstall.accessRestriction="",e.appinstall.error={},e.install_form.$setPristine(),e.install_form.$setUntouched()},e.showInstall=function(o){e.reset(),t.getManifest(o.id,function(n,r){if(n)return console.error(n);o.manifest=r,e.appinstall.app=o,e.appinstall.location=o.location,e.appinstall.portBindingsInfo=r.tcpPorts||{},e.appinstall.portBindings={},e.appinstall.accessRestriction=o.accessRestriction||"";for(var t in r.tcpPorts)e.appinstall.portBindings[t]=r.tcpPorts[t].defaultValue||0;$("#appInstallModal").modal("show")})},e.doInstall=function(){e.appinstall.busy=!0,e.appinstall.error.name=null,e.appinstall.error.password=null,e.appinstall.error.port=null,r.installApp(e.appinstall.app.id,e.appinstall.app.manifest,e.appinstall.password,e.appinstall.app.title,{location:e.appinstall.location,portBindings:e.appinstall.portBindings,accessRestriction:e.appinstall.accessRestriction},function(n){return n?(409===n.statusCode&&-1!==n.message.indexOf("is reserved")?e.appinstall.error.port="This port is already in use.":409===n.statusCode?e.appinstall.error.name="Application already exists.":403===n.statusCode?(e.appinstall.error.password="Wrong password provided.",e.appinstall.password=""):e.appinstall.error.name="App with the name "+e.appinstall.app.name+" cannot be installed.",void(e.appinstall.busy=!1)):(e.appinstall.busy=!1,$("#appInstallModal").modal("hide"),e.reset(),void o.path("/apps"))})},a(),["appInstallModal"].forEach(function(e){$("#"+e).on("shown.bs.modal",function(){$(this).find("[autofocus]:first").focus()})})}]),angular.module("Application").controller("DnsController",["$scope","$location","Client",function(e,o,n){n.onReady(function(){n.getUserInfo().admin||o.path("/")}),e.ready=!1,e.user=n.getUserInfo(),e.config=n.getConfig(),e.nakedDomainApp=null,e.certificateFile=null,e.certificateFileName="",e.keyFile=null,e.keyFileName="",e.setNakedDomain=function(){var o=e.nakedDomainApp?e.nakedDomainApp.id:"admin";n.setNakedDomain(o,function(e){return e?console.error("Error setting naked domain",e):void 0})},e.backup=function(){$("#backupProgressModal").modal("show"),e.$parent.initialized=!1,n.backup(function(o){function r(){n.version(function(o){return o?window.setTimeout(r,1e3):($("#backupProgressModal").modal("hide"),void(e.$parent.initialized=!0))})}o&&console.error(o),window.setTimeout(r,5e3)})},e.update=function(){$("#updateModal").modal("hide"),e.$parent.initialized=!1,n.update(function(e){e&&console.error(e),window.location.href="/update.html"})},document.getElementById("idCertificate").onchange=function(o){e.$apply(function(){e.certificateFile=o.target.files[0],e.certificateFileName=o.target.files[0].name})},document.getElementById("idKey").onchange=function(o){e.$apply(function(){e.keyFile=o.target.files[0],e.keyFileName=o.target.files[0].name})},e.setCertificate=function(){return console.log("Will set the certificate"),e.certificateFile?e.keyFile?void n.setCertificate(e.certificateFile,e.keyFile,function(e){return e?console.log(e):void window.setTimeout(window.location.reload.bind(window.location,!0),3e3)}):console.log("Key not set"):console.log("Certificate not set")},n.onConfig(function(){e.tokenInUse=n._token,n.getApps(function(o,r){o&&console.error("Error loading app list"),e.apps=r,n.getNakedDomain(function(o,n){if(o)return console.error(o);e.nakedDomainApp=null;for(var r=0;r<e.apps.length;r++)if(e.apps[r].id===n){e.nakedDomainApp=e.apps[r];break}e.ready=!0})})})}]),angular.module("Application").controller("GraphsController",["$scope","$location","Client",function(e,o,n){function r(e,o){var n=[];o&&o.datapoints&&(n=o.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var r=new Rickshaw.Graph({element:document.querySelector("#"+e+"CpuChart"),renderer:"area",width:580,height:250,min:0,max:100,series:[{color:"steelblue",data:n,name:"cpu"}]});new Rickshaw.Graph.Axis.Time({graph:r}),new Rickshaw.Graph.Axis.Y({graph:r,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"CpuYAxis")}),new Rickshaw.Graph.HoverDetail({graph:r,formatter:function(e,o,n){var r='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',t=r+e.name+": "+new Number(n).toFixed(2)+"%<br>";return t}})}r.render()}function t(e,o,n){var r=[],t=[];o&&o.datapoints&&(r=o.datapoints.map(function(e){return{y:e[0],x:e[1]}})),n&&n.datapoints&&(t=n.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var a=new Rickshaw.Graph({element:document.querySelector("#"+e+"NetworkChart"),renderer:"area",width:580,height:250,series:[{color:"steelblue",data:r,name:"tx"},{color:"green",data:t,name:"rx"}]});new Rickshaw.Graph.Axis.Time({graph:a}),new Rickshaw.Graph.Axis.Y({graph:a,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"NetworkYAxis")}),new Rickshaw.Graph.HoverDetail({graph:a,formatter:function(e,o,n){var r='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',t=r+e.name+": "+new Number(n/1024).toFixed(2)+"KB<br>";return t}})}a.render()}function a(e,o,n){var r=[],t=[];o&&o.datapoints&&(r=o.datapoints.map(function(e){return{y:e[0],x:e[1]}})),n&&n.datapoints&&(t=n.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var a=new Rickshaw.Graph({element:document.querySelector("#"+e+"DiskChart"),renderer:"area",width:580,height:250,min:0,max:32212254720,series:[{color:"steelblue",data:r,name:"apps"},{color:"green",data:t,name:"data"}]});new Rickshaw.Graph.Axis.Time({graph:a}),new Rickshaw.Graph.Axis.Y({graph:a,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"DiskYAxis")}),new Rickshaw.Graph.HoverDetail({graph:a,formatter:function(e,o,n){var r='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',t=r+e.name+": "+new Number(n/1073741824).toFixed(2)+"GB<br>";return t}}),new Rickshaw.Graph.Legend({graph:a,element:document.getElementById(e+"DiskLegend")})}a.render()}n.getUserInfo().admin||o.path("/"),e.activeTab="day";var s="transformNull(scale(divideSeries(sumSeries(collectd.localhost.cpu-0.cpu-system,collectd.localhost.cpu-0.cpu-nice,collectd.localhost.cpu-0.cpu-user),sumSeries(collectd.localhost.cpu-0.cpu-idle,collectd.localhost.cpu-0.cpu-system,collectd.localhost.cpu-0.cpu-nice,collectd.localhost.cpu-0.cpu-user,collectd.localhost.cpu-0.cpu-wait)), 100), 0)",i="transformNull(collectd.localhost.interface-eth0.if_octets.tx, 0)",p="transformNull(collectd.localhost.interface-eth0.if_octets.rx, 0)",l="transformNull(collectd.localhost.df-loop0.df_complex-used, 0)",u="transformNull(collectd.localhost.df-loop1.df_complex-used, 0)";e.updateGraphs=function(){var o=e.activeTab,c="-24hours";switch(o){case"day":c="-24hours";break;case"month":c="-1month";break;case"year":c="-1year";break;default:console.log("internal errror")}n.graphs([s,i,p,l,u],c,function(e,n){return e?console.log(e):(r(o,n[0]),t(o,n[1],n[2]),void a(o,n[3],n[4]))})},n.onReady(e.updateGraphs)}]),angular.module("Application").controller("UsersController",["$scope","$location","Client",function(e,o,n){function r(){n.listUsers(function(o,n){return o?console.error("Unable to get user listing.",o):(e.users=n.users,void(e.ready=!0))})}n.onReady(function(){n.getUserInfo().admin||o.path("/")}),e.ready=!1,e.users=[],e.userInfo=n.getUserInfo(),e.userremove={busy:!1,error:{},userInfo:{},username:"",password:""},e.useradd={busy:!1,alreadyTaken:!1,error:{},username:"",email:""},e.isMe=function(e){return e.username===n.getUserInfo().username},e.isAdmin=function(e){return!!e.admin},e.toggleAdmin=function(e){n.setAdmin(e.username,!e.admin,function(o){return o?console.error(o):void(e.admin=!e.admin)})},e.doAdd=function(){e.useradd.alreadyTaken="",e.useradd.error.username=null,e.useradd.error.email=null,n.createUser(e.useradd.username,e.useradd.email,function(o){if(o&&409===o.statusCode)return e.useradd.alreadyTaken=e.username,console.error("Username already taken");if(o&&400===o.statusCode){if(-1!==o.message.indexOf("email"))return e.useradd.error.email="Invalid Email",void(e.useradd.email="");if(-1!==o.message.indexOf("username"))return e.useradd.error.username="Invalid Username",void(e.useradd.username="")}else o&&console.error("Unable to create user.",o),r(),$("#userAddModal").modal("hide")})},e.showUserRemove=function(o){e.userremove.error.username=null,e.userremove.error.password=null,e.userremove.userInfo=o,$("#userRemoveModal").modal("show")},e.doUserRemove=function(o){return e.userremove.error.username=null,e.userremove.error.password=null,e.userremove.username!==e.userremove.userInfo.username?(e.userremove.error.username="Username does not match",void(e.userremove.username="")):void n.removeUser(e.userremove.userInfo.id,e.userremove.password,function(n){return n&&403===n.statusCode?(e.userremove.error.password="Incorrect password",void(e.userremove.password="")):n?console.error("Unable to delete user.",n):(e.userremove.userInfo={},e.userremove.username="",e.userremove.password="",o.$setPristine(),o.$setUntouched(),$("#userRemoveModal").modal("hide"),void r())})},r(),["userAddModal","userRemoveModal"].forEach(function(e){$("#"+e).on("shown.bs.modal",function(){$(this).find("[autofocus]:first").focus()})})}]);
//# sourceMappingURL=data:application/json;base64,