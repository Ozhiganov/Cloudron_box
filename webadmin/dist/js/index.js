"use strict";var app=angular.module("Application",["ngRoute","ngAnimate","angular-md5"]);app.config(["$routeProvider",function(e){e.when("/",{redirectTo:"/apps"}).when("/dashboard",{controller:"DashboardController",templateUrl:"views/dashboard.html"}).when("/usercreate",{controller:"UserCreateController",templateUrl:"views/usercreate.html"}).when("/userpassword",{controller:"UserPasswordController",templateUrl:"views/userpassword.html"}).when("/userlist",{controller:"UserListController",templateUrl:"views/userlist.html"}).when("/appstore",{controller:"AppStoreController",templateUrl:"views/appstore.html"}).when("/apps",{controller:"AppListController",templateUrl:"views/applist.html"}).when("/app/:appStoreId/install",{controller:"AppInstallController",templateUrl:"views/appinstall.html"}).when("/app/:appId/configure",{controller:"AppConfigureController",templateUrl:"views/appconfigure.html"}).when("/app/:appId/details",{controller:"AppDetailsController",templateUrl:"views/appdetails.html"}).when("/dns",{controller:"DnsController",templateUrl:"views/dns.html"}).when("/account",{controller:"AccountController",templateUrl:"views/account.html"}).when("/graphs",{controller:"GraphsController",templateUrl:"views/graphs.html"}).when("/security",{controller:"SecurityController",templateUrl:"views/security.html"}).otherwise({redirectTo:"/"})}]),app.filter("installationActive",function(){return function(e){return"error"===e?!1:"installed"===e?!1:!0}}),app.filter("installationStateLabel",function(){return function(e){return"error"===e?"Error":"subdomain_error"===e?"Error":"installed"===e?"Installed":"downloading_image"===e?"Downloading":"pending_install"===e?"Installing":"pending_uninstall"===e?"Uninstalling":"creating_container"===e?"Container":"downloading_manifest"===e?"Manifest":"creating_volume"===e?"Volume":"registering_subdomain"===e?"Subdomain":"allocated_oauth_credentials"===e?"OAuth":e}}),app.filter("accessRestrictionLabel",function(){return function(e){return""===e?"public":"roleUser"===e?"private":"roleAdmin"===e?"private (Admins only)":e}}),app.directive("laterName",function(){return{restrict:"A",require:["?ngModel","^?form"],link:function(e,n,o,t){o.$set("name",o.laterName);var r=t[0],a=t[1];r&&a&&(r.$name=o.name,a.$addControl(r),e.$on("$destroy",function(){a.$removeControl(r)}))}}}),angular.module("Application").service("Client",["$http","md5",function(e,n){function o(e,n){Error.call(this),this.name=this.constructor.name,this.statusCode=e,this.message="string"==typeof n?n:JSON.stringify(n)}function t(e){return function(n,t){return 401===t?a.logout():void e(new o(t,n))}}function r(){this._ready=!1,this._configListener=[],this._readyListener=[],this._userInfo={username:null,email:null,admin:!1},this._token=null,this._clientId="cid-webadmin",this._clientSecret="unused",this._config={apiServerOrigin:null,webServerOrigin:null,fqdn:null,ip:null,revision:null,update:null,isDev:!1,progress:{}},this._installedApps=[],this.setToken(localStorage.token)}var a=null;return r.prototype.setReady=function(){this._ready||(this._ready=!0,this._readyListener.forEach(function(e){e()}))},r.prototype.onReady=function(e){this._ready&&e(),this._readyListener.push(e)},r.prototype.onConfig=function(e){this._configListener.push(e),e(this._config)},r.prototype.setUserInfo=function(e){this._userInfo.username=e.username,this._userInfo.email=e.email,this._userInfo.admin=!!e.admin,this._userInfo.gravatar="https://www.gravatar.com/avatar/"+n.createHash(e.email.toLowerCase())+".jpg?s=24&d=mm",this._userInfo.gravatarHuge="https://www.gravatar.com/avatar/"+n.createHash(e.email.toLowerCase())+".jpg?s=128&d=mm"},r.prototype.setConfig=function(e){this._config.apiServerOrigin=e.apiServerOrigin,this._config.webServerOrigin=e.webServerOrigin,this._config.version=e.version,this._config.fqdn=e.fqdn,this._config.ip=e.ip,this._config.revision=e.revision,this._config.update=e.update,this._config.isDev=e.isDev,this._config.progress=e.progress;var n=this;this._configListener.forEach(function(e){e(n._config)})},r.prototype.getInstalledApps=function(){return this._installedApps},r.prototype.getUserInfo=function(){return this._userInfo},r.prototype.getConfig=function(){return this._config},r.prototype.setToken=function(n){e.defaults.headers.common.Authorization="Bearer "+n,n?localStorage.token=n:localStorage.removeItem("token"),this._token=n},r.prototype.config=function(n){e.get("/api/v1/cloudron/config").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.userInfo=function(n){e.get("/api/v1/profile").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.installApp=function(n,r,a,i,s,p){var l=this,c={appStoreId:n,version:r,password:a,location:s.location,portBindings:s.portBindings,accessRestriction:s.accessRestriction};e.post("/api/v1/apps/install",c).success(function(e,n){return 202!==n||"object"!=typeof e?p(new o(n,e)):(e.manifest={title:i},l._installedApps.push(e),void p(null,e.id))}).error(t(p))},r.prototype.uninstallApp=function(n,r,a){var i={password:r};e.post("/api/v1/apps/"+n+"/uninstall",i).success(function(e,n){return 202!==n?a(new o(n,e)):void a(null)}).error(t(a))},r.prototype.configureApp=function(n,r,a,i){var s={appId:n,password:r,location:a.location,portBindings:a.portBindings,accessRestriction:a.accessRestriction};e.post("/api/v1/apps/"+n+"/configure",s).success(function(e,n){return 202!==n?i(new o(n,e)):void i(null)}).error(t(i))},r.prototype.updateApp=function(n,r,a,i){e.post("/api/v1/apps/"+n+"/update",{version:r,password:a}).success(function(e,n){return 202!==n?i(new o(n,e)):void i(null)}).error(t(i))},r.prototype.startApp=function(n,r){var a={};e.post("/api/v1/apps/"+n+"/start",a).success(function(e,n){return 202!==n?r(new o(n,e)):void r(null)}).error(t(r))},r.prototype.stopApp=function(n,r){var a={};e.post("/api/v1/apps/"+n+"/stop",a).success(function(e,n){return 202!==n?r(new o(n,e)):void r(null)}).error(t(r))},r.prototype.version=function(n){e.get("/api/v1/cloudron/status").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.isServerFirstTime=function(n){e.get("/api/v1/cloudron/status").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,!e.activated)}).error(t(n))},r.prototype.getNakedDomain=function(n){e.get("/api/v1/settings/naked_domain").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e.appid)}).error(t(n))},r.prototype.setNakedDomain=function(n,r){e.post("/api/v1/settings/naked_domain",{appid:n}).success(function(e,n){return 204!==n?r(new o(n)):void r(null)}).error(t(r))},r.prototype.getApps=function(n){e.get("/api/v1/apps").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e.apps)}).error(t(n))},r.prototype.getApp=function(e,n){var o=null;return this._installedApps.some(function(n){return n.id===e?(o=n,!0):!1}),o?n(null,o):n(new Error("App not found"))},r.prototype.getAppLogStream=function(e){var n=new EventSource("/api/v1/apps/"+e+"/logstream");return n},r.prototype.getAppLogUrl=function(e){return"/api/v1/apps/"+e+"/logs?access_token="+this._token},r.prototype.setAdmin=function(n,r,a){var i={username:n,admin:r};e.post("/api/v1/users/"+n+"/admin",i).success(function(e,n){return 204!==n?a(new o(n,e)):void a(null)}).error(t(a))},r.prototype.createAdmin=function(n,r,a,i,s){var p={username:n,password:r,email:a},l=this;e.post("/api/v1/cloudron/activate?setupToken="+i,p).success(function(e,t){return 201!==t||"object"!=typeof e?s(new o(t,e)):(l.setToken(e.token),l.setUserInfo({username:n,email:a,admin:!0}),void s(null,e.activated))}).error(t(s))},r.prototype.listUsers=function(n){e.get("/api/v1/users").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.getOAuthClients=function(n){e.get("/api/v1/oauth/clients").success(function(e,t){return 200!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e.clients)}).error(t(n))},r.prototype.delTokensByClientId=function(n,r){e["delete"]("/api/v1/oauth/clients/"+n+"/tokens").success(function(e,n){return 204!==n?r(new o(n,e)):void r(null)}).error(t(r))},r.prototype.update=function(n){e.get("/api/v1/cloudron/update").success(function(e,t){return 202!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.reboot=function(n){e.get("/api/v1/cloudron/reboot").success(function(e,t){return 202!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.backup=function(n){e.post("/api/v1/cloudron/backups").success(function(e,t){return 202!==t||"object"!=typeof e?n(new o(t,e)):void n(null,e)}).error(t(n))},r.prototype.setCertificate=function(n,r,a){console.log("will set certificate");var i=new FormData;i.append("certificate",n),i.append("key",r),e.post("/api/v1/cloudron/certificate",i,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).success(function(e,n){return 202!==n?a(new o(n,e)):void a(null)}).error(t(a))},r.prototype.graphs=function(n,r,a){var i={params:{target:n,format:"json",from:r}};e.get("/api/v1/cloudron/graphs",i).success(function(e,n){return 200!==n||"object"!=typeof e?a(new o(n,e)):void a(null,e)}).error(t(a))},r.prototype.createUser=function(n,r,a){var i={username:n,email:r};e.post("/api/v1/users",i).success(function(e,n){return 201!==n||"object"!=typeof e?a(new o(n,e)):void a(null,e)}).error(t(a))},r.prototype.removeUser=function(n,r,a){var i={username:n,password:r};e({method:"DELETE",url:"/api/v1/users/"+n,data:i,headers:{"Content-Type":"application/json"}}).success(function(e,n){return 204!==n?a(new o(n,e)):void a(null)}).error(t(a))},r.prototype.changePassword=function(n,r,a){var i={password:n,newPassword:r};e.post("/api/v1/users/"+this._userInfo.username+"/password",i).success(function(e,n){return 204!==n||"object"!=typeof e?a(new o(n,e)):void a(null,e)}).error(t(a))},r.prototype.refreshConfig=function(e){var n=this;e="function"==typeof e?e:function(){},this.config(function(o,t){return o?e(o):(n.setConfig(t),void e(null))})},r.prototype.refreshInstalledApps=function(e){var n=this;e="function"==typeof e?e:function(){},this.getApps(function(o,t){if(o)return e(o);t.forEach(function(e){for(var o=!1,t=0;t<n._installedApps.length;++t)if(n._installedApps[t].id===e.id){o=t;break}o!==!1?angular.copy(e,n._installedApps[o]):n._installedApps.push(e)});for(var r=n._installedApps.length-1;r>=0;--r)t.some(function(e){return e.id===n._installedApps[r].id})||n._installedApps.splice(r,1);e(null)})},r.prototype.logout=function(){this.setToken(null),this._userInfo={},window.location.href="/api/v1/session/logout"},r.prototype.exchangeCodeForToken=function(n,r){var a={grant_type:"authorization_code",code:n,redirect_uri:window.location.origin,client_id:this._clientId,client_secret:this._clientSecret};e.post("/api/v1/oauth/token?response_type=token&client_id="+this._clientId,a).success(function(e,n){return 200!==n||"object"!=typeof e?r(new o(n,e)):void r(null,e.access_token)}).error(t(r))},a=new r}]),angular.module("Application").service("AppStore",["$http","Client",function(e,n){function o(e,n){Error.call(this),this.name=this.constructor.name,this.statusCode=e,this.message="string"==typeof n?n:JSON.stringify(n)}function t(){this._appsCache={}}return t.prototype.getApps=function(t){if(null===n.getConfig().apiServerOrigin)return t(new o(420,"Enhance Your Calm"));var r=this;e.get(n.getConfig().apiServerOrigin+"/api/v1/appstore/apps",{params:{boxVersion:n.getConfig().version}}).success(function(e,n){return 200!==n?t(new o(n,e)):(e.apps.forEach(function(e){r._appsCache[e.id]||(r._appsCache[e.id]=e)}),t(null,r._appsCache))}).error(function(e,n){return t(new o(n,e))})},t.prototype.getAppById=function(e,n){if(e in this._appsCache)return n(null,this._appsCache[e]);var t=this;this.getApps(function(r){return r?n(r):e in t._appsCache?n(null,t._appsCache[e]):void n(new o(404,"Not found"))})},t.prototype.getManifest=function(t,r){if(null===n.getConfig().apiServerOrigin)return r(new o(420,"Enhance Your Calm"));var a=n.getConfig().apiServerOrigin+"/api/v1/appstore/apps/"+t+"/manifest";console.log("Getting the manifest of ",t,a),e.get(a).success(function(e,n){return 200!==n?r(new o(n,e)):r(null,e)}).error(function(e,n){return r(new o(n,e))})},new t}]),angular.module("Application").controller("MainController",["$scope","$route","$interval","Client",function(e,n,o,t){e.initialized=!1,e.userInfo=t.getUserInfo(),e.config={},e.isActive=function(e){return n.current?0===n.current.$$route.originalPath.indexOf(e):!1},e.logout=function(n){n.stopPropagation(),e.initialized=!1,t.logout()},e.login=function(){var e=window.location.origin+"/login_callback.html",n="root,profile,apps,roleAdmin";window.location.href="/api/v1/oauth/dialog/authorize?response_type=code&client_id="+t._clientId+"&redirect_uri="+e+"&scope="+n},e.setup=function(){window.location.href="/error.html?errorCode=1"},e.error=function(e){console.error(e),window.location.href="/error.html"},e.update=function(){$("#updateModal").modal("hide"),e.initialized=!1,t.update(function(e){e&&console.error(e),window.location.href="/update.html"})},e.backup=function(){$("#backupProgressModal").modal("show"),e.initialized=!1,t.backup(function(n){function o(){t.version(function(n){return n?window.setTimeout(o,1e3):($("#backupProgressModal").modal("hide"),void(e.initialized=!0))})}n&&console.error(n),window.setTimeout(o,5e3)})},t.isServerFirstTime(function(n,r){return n?e.error(n):r?e.setup():void(localStorage.token?t.refreshConfig(function(n){return n&&401===n.statusCode?e.login():n?e.error(n):(t.getConfig().progress.update&&(window.location.href="/update.html"),void t.userInfo(function(n,r){return n?e.error(n):(t.setUserInfo(r),void t.refreshInstalledApps(function(n){if(n)return e.error(n);var r=o(t.refreshInstalledApps.bind(t),2e3),a=o(t.refreshConfig.bind(t),5e3);e.$on("$destroy",function(){o.cancel(r),o.cancel(a)}),t.setReady(),e.config=t.getConfig(),e.initialized=!0}))}))}):e.login())}),t.onConfig(function(e){e.progress.update&&(window.location.href="/update.html")})}]),angular.module("Application").controller("AccountController",["$scope","$location","Client",function(e,n,o){e.user=o.getUserInfo(),e.config=o.getConfig(),e.changePassword=function(){n.path("/userpassword")}}]),angular.module("Application").controller("AppConfigureController",["$scope","$routeParams","$location","Client",function(e,n,o,t){t.getUserInfo().admin||o.path("/"),e.app=null,e.password="",e.location="",e.accessRestriction="",e.disabled=!1,e.error={},e.domain="",e.portBindings={},e.configureApp=function(){e.error.name=null,e.error.password=null;var o={};for(var r in e.portBindings)o[r]=e.portBindings[r].hostPort;t.configureApp(n.appId,e.password,{location:e.location,portBindings:o,accessRestriction:e.accessRestriction},function(o){return o?(403===o.statusCode?(e.error.password="Wrong password provided.",e.password=""):e.error.name="App with the name "+e.app.name+" cannot be configured.",void(e.disabled=!1)):void window.location.replace("#/app/"+n.appId+"/details")})},e.cancel=function(){window.history.back()},t.onReady(function(){e.domain=t.getConfig().fqdn,t.getApp(n.appId,function(n,o){if(e.error=n||{},!n){e.app=o,e.location=o.location,e.portBindings=o.manifest.tcpPorts,e.accessRestriction=o.accessRestriction;for(var t in e.portBindings)e.portBindings[t].hostPort=o.portBindings[t]}})}),document.getElementById("inputLocation").focus()}]),angular.module("Application").controller("AppDetailsController",["$scope","$http","$routeParams","$location","Client",function(e,n,o,t,r){function a(e,n){var o=[];n&&n.datapoints&&(o=n.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var t=new Rickshaw.Graph({element:document.querySelector("#"+e+"CpuChart"),renderer:"area",width:580,height:250,min:0,max:100,series:[{color:"steelblue",data:o||[],name:"cpu"}]});new Rickshaw.Graph.Axis.Time({graph:t}),new Rickshaw.Graph.Axis.Y({graph:t,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"CpuYAxis")}),new Rickshaw.Graph.HoverDetail({graph:t,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o).toFixed(2)+"%<br>";return r}})}t.render()}function i(e,n){var o=[];n&&n.datapoints&&(o=n.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var t=new Rickshaw.Graph({element:document.querySelector("#"+e+"MemoryChart"),renderer:"area",width:580,height:250,min:0,max:2147483648,series:[{color:"steelblue",data:o||[],name:"memory"}]});new Rickshaw.Graph.Axis.Time({graph:t}),new Rickshaw.Graph.Axis.Y({graph:t,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"MemoryYAxis")}),new Rickshaw.Graph.HoverDetail({graph:t,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o/1048576).toFixed(2)+"MB<br>";return r}})}t.render()}function s(e,n){var o=[];n&&n.datapoints&&(o=n.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var t=new Rickshaw.Graph({element:document.querySelector("#"+e+"DiskChart"),renderer:"area",width:580,height:250,min:0,max:32212254720,series:[{color:"steelblue",data:o||[],name:"apps"}]});new Rickshaw.Graph.Axis.Time({graph:t}),new Rickshaw.Graph.Axis.Y({graph:t,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"DiskYAxis")}),new Rickshaw.Graph.HoverDetail({graph:t,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o/1048576).toFixed(2)+"MB<br>";return r}}),new Rickshaw.Graph.Legend({graph:t,element:document.getElementById(e+"DiskLegend")})}t.render()}r.getUserInfo().admin||t.path("/"),e.app={},e.initialized=!1,e.updateAvailable=!1,e.activeTab="day",e.updateVersion=null,e.password="",e.passwordWrong=!1,e.startApp=function(){r.startApp(o.appId,function(e){e&&console.error(e)})},e.stopApp=function(){r.stopApp(o.appId,function(e){e&&console.error(e)})},e.updateApp=function(){e.passwordWrong=!1,r.updateApp(o.appId,e.updateVersion,e.password,function(n){n&&403===n.statusCode?(e.password="",e.passwordWrong=!0,$("#inputPasswordUpdate").focus()):n?console.error(n):($("#updateAppModal").modal("hide"),e.updateAvailable=!1,e.updateVersion=null,e.password="")})},e.uninstallApp=function(){e.passwordWrong=!1,r.uninstallApp(o.appId,e.password,function(n){n&&403===n.statusCode?(e.password="",e.passwordWrong=!0,$("#inputPasswordUninstall").focus()):n?console.error(n):($("#uninstallAppModal").modal("hide"),e.password="",window.location.href="#/")})},e.updateGraphs=function(){var n="nonNegativeDerivative(sumSeries(collectd.localhost.table-"+e.app.id+"-cpu.gauge-user,collectd.localhost.table-"+e.app.id+"-cpu.gauge-system))",o="collectd.localhost.table-"+e.app.id+"-memory.gauge-max_usage_in_bytes",t="collectd.localhost.filecount-"+e.app.id+"-appdata.bytes",p=e.activeTab,l="-24hours";switch(p){case"day":l="-24hours";break;case"month":l="-1month";break;case"year":l="-1year";break;default:console.log("internal errror")}r.graphs([n,o,t],l,function(e,n){return e?console.log(e):(a(p,n[0]),i(p,n[1]),void s(p,n[2]))})},r.onReady(function(){r.getApp(o.appId,function(n,o){if(n)return console.error(n),void(window.location.href="#/");if(e.app=o,e.appLogUrl=r.getAppLogUrl(o.id),r.getConfig().update&&r.getConfig().update.apps)for(var t=r.getConfig().update.apps,a=0;a<t.length;a++)t[a].appId===e.app.appStoreId&&t[a].version!==e.app.version&&(e.updateAvailable=!0,e.updateVersion=t[a].version);e.updateGraphs(),e.initialized=!0})})}]),angular.module("Application").controller("AppInstallController",["$scope","$routeParams","$location","Client","AppStore","$timeout",function(e,n,o,t,r,a){t.getUserInfo().admin||o.path("/"),e.app=null,e.password="",e.location="",e.accessRestriction="",e.disabled=!1,e.error={},e.domain="",e.version=null,e.portBindings={},e.hostPortMin=1025,e.hostPortMax=9999,t.onReady(function(){e.domain=t.getConfig().fqdn,r.getAppById(n.appStoreId,function(n,o){e.error=n||{},n||(e.app=o)}),r.getManifest(n.appStoreId,function(n,o){if(e.error=n||{},!n){e.version=o.version,e.portBindings=o.tcpPorts,e.accessRestriction=o.accessRestriction||"";for(var t in e.portBindings)e.portBindings[t].hostPort=parseInt(t)}})}),e.installApp=function(){e.error.name=null,e.error.password=null;var o={};for(var r in e.portBindings)o[r]=e.portBindings[r].hostPort;t.installApp(n.appStoreId,e.version,e.password,e.app.title,{location:e.location,portBindings:o,accessRestriction:e.accessRestriction},function(n,o){return n?(409===n.statusCode?e.error.name="Application already exists.":403===n.statusCode?(e.error.password="Wrong password provided.",e.password=""):e.error.name="App with the name "+e.app.name+" cannot be installed.",void(e.disabled=!1)):void window.location.replace("#/app/"+o+"/details")})},e.cancel=function(){window.history.back()},e.$on("$viewContentLoaded",function(){a(function(){$("input[autofocus]:visible:first").focus()},1e3)})}]),angular.module("Application").controller("AppListController",["$scope","$location","Client",function(e,n,o){e.installedApps=o.getInstalledApps(),e.config=o.getConfig(),e.appconfigure={busy:!1,error:{},app:{},location:"",password:"",portBindings:{},accessRestriction:""},e.showConfigure=function(n){e.appconfigure.app=n,e.appconfigure.location=n.location,e.appconfigure.portBindings=n.manifest.tcpPorts,e.appconfigure.accessRestriction=n.accessRestriction;for(var o in e.appconfigure.portBindings)e.appconfigure.portBindings[o].hostPort=n.portBindings[o];$("#appConfigureModal").modal("show")},e.doConfigure=function(n){e.appconfigure.busy=!0,e.appconfigure.error.name=null,e.appconfigure.error.password=null;var t={};for(var r in e.appconfigure.portBindings)t[r]=e.appconfigure.portBindings[r].hostPort;o.configureApp(e.appconfigure.app.id,e.appconfigure.password,{location:e.appconfigure.location,portBindings:t,accessRestriction:e.appconfigure.accessRestriction},function(o){return o?(403===o.statusCode?(e.appconfigure.error.password="Wrong password provided.",e.appconfigure.password=""):e.appconfigure.error.name="App with the name "+e.appconfigure.app.name+" cannot be configured.",void(e.appconfigure.busy=!1)):(e.appconfigure.busy=!1,e.appconfigure.error={},e.appconfigure.app={},e.appconfigure.location="",e.appconfigure.password="",e.appconfigure.portBindings={},e.appconfigure.accessRestriction="",n.$setPristine(),n.$setUntouched(),void $("#appConfigureModal").modal("hide"))})},e.cancel=function(){window.history.back()}}]),angular.module("Application").controller("AppStoreController",["$scope","$location","$timeout","Client","AppStore",function(e,n,o,t,r){function a(){e.ready=!1,r.getApps(function(n,t){return n?(console.error(n),o(a,1e3)):(e.apps=t,void(e.ready=!0))})}t.getUserInfo().admin||n.path("/"),e.ready=!1,e.apps=[],e.config=t.getConfig(),e.appinstall={busy:!1,error:{},app:{},location:"",password:"",portBindings:{},accessRestriction:""},e.showInstall=function(n){r.getManifest(n.id,function(o,t){if(o)return console.error(o);n.manifest=t,e.appinstall.app=n,e.appinstall.location=n.location,e.appinstall.portBindings=t.tcpPorts,e.appinstall.accessRestriction=n.accessRestriction||"";for(var r in e.appinstall.portBindings)e.appinstall.portBindings[r].hostPort=parseInt(r);$("#appInstallModal").modal("show")})},e.doInstall=function(o){e.appinstall.busy=!0,e.appinstall.error.name=null,e.appinstall.error.password=null;var r={};for(var a in e.appinstall.portBindings)r[a]=e.appinstall.portBindings[a].hostPort;t.installApp(e.appinstall.app.id,e.appinstall.app.manifest.version,e.appinstall.password,e.appinstall.app.title,{location:e.appinstall.location,portBindings:r,accessRestriction:e.appinstall.accessRestriction},function(t){return t?(409===t.statusCode?e.appinstall.error.name="Application already exists.":403===t.statusCode?(e.appinstall.error.password="Wrong password provided.",e.appinstall.password=""):e.appinstall.error.name="App with the name "+e.appinstall.app.name+" cannot be installed.",void(e.appinstall.busy=!1)):(e.appinstall.busy=!1,e.appinstall.error={},e.appinstall.app={},e.appinstall.location="",e.appinstall.password="",e.appinstall.portBindings={},e.appinstall.accessRestriction="",o.$setPristine(),o.$setUntouched(),$("#appInstallModal").modal("hide"),void n.path("/apps"))})},a()}]),angular.module("Application").controller("DashboardController",function(){}),angular.module("Application").controller("DnsController",["$scope","$location","Client",function(e,n,o){o.getUserInfo().admin||n.path("/"),e.ready=!1,e.user=o.getUserInfo(),e.config=o.getConfig(),e.nakedDomainApp=null,e.certificateFile=null,e.certificateFileName="",e.keyFile=null,e.keyFileName="",e.setNakedDomain=function(){var n=e.nakedDomainApp?e.nakedDomainApp.id:"admin";o.setNakedDomain(n,function(e){return e?console.error("Error setting naked domain",e):void 0})},e.backup=function(){$("#backupProgressModal").modal("show"),e.$parent.initialized=!1,o.backup(function(n){function t(){o.version(function(n){return n?window.setTimeout(t,1e3):($("#backupProgressModal").modal("hide"),void(e.$parent.initialized=!0))})}n&&console.error(n),window.setTimeout(t,5e3)})},e.update=function(){$("#updateModal").modal("hide"),e.$parent.initialized=!1,o.update(function(e){e&&console.error(e),window.location.href="/update.html"})},document.getElementById("idCertificate").onchange=function(n){e.$apply(function(){e.certificateFile=n.target.files[0],e.certificateFileName=n.target.files[0].name})},document.getElementById("idKey").onchange=function(n){e.$apply(function(){e.keyFile=n.target.files[0],e.keyFileName=n.target.files[0].name})},e.setCertificate=function(){return console.log("Will set the certificate"),e.certificateFile?e.keyFile?void o.setCertificate(e.certificateFile,e.keyFile,function(e){return e?console.log(e):void window.setTimeout(window.location.reload.bind(window.location,!0),3e3)}):console.log("Key not set"):console.log("Certificate not set")},o.onConfig(function(){e.tokenInUse=o._token,o.getApps(function(n,t){n&&console.error("Error loading app list"),e.apps=t,o.getNakedDomain(function(n,o){if(n)return console.error(n);e.nakedDomainApp=null;for(var t=0;t<e.apps.length;t++)if(e.apps[t].id===o){e.nakedDomainApp=e.apps[t];break}e.ready=!0})})})}]),angular.module("Application").controller("GraphsController",["$scope","$location","Client",function(e,n,o){function t(e,n){var o=[];n&&n.datapoints&&(o=n.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var t=new Rickshaw.Graph({element:document.querySelector("#"+e+"CpuChart"),renderer:"area",width:580,height:250,min:0,max:100,series:[{color:"steelblue",data:o,name:"cpu"}]});new Rickshaw.Graph.Axis.Time({graph:t}),new Rickshaw.Graph.Axis.Y({graph:t,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"CpuYAxis")}),new Rickshaw.Graph.HoverDetail({graph:t,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o).toFixed(2)+"%<br>";return r}})}t.render()}function r(e,n,o){var t=[],r=[];n&&n.datapoints&&(t=n.datapoints.map(function(e){return{y:e[0],x:e[1]}})),o&&o.datapoints&&(r=o.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var a=new Rickshaw.Graph({element:document.querySelector("#"+e+"NetworkChart"),renderer:"area",width:580,height:250,series:[{color:"steelblue",data:t,name:"tx"},{color:"green",data:r,name:"rx"}]});new Rickshaw.Graph.Axis.Time({graph:a}),new Rickshaw.Graph.Axis.Y({graph:a,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"NetworkYAxis")}),new Rickshaw.Graph.HoverDetail({graph:a,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o/1024).toFixed(2)+"KB<br>";return r}})}a.render()}function a(e,n,o){var t=[],r=[];n&&n.datapoints&&(t=n.datapoints.map(function(e){return{y:e[0],x:e[1]}})),o&&o.datapoints&&(r=o.datapoints.map(function(e){return{y:e[0],x:e[1]}}));{var a=new Rickshaw.Graph({element:document.querySelector("#"+e+"DiskChart"),renderer:"area",width:580,height:250,min:0,max:32212254720,series:[{color:"steelblue",data:t,name:"apps"},{color:"green",data:r,name:"data"}]});new Rickshaw.Graph.Axis.Time({graph:a}),new Rickshaw.Graph.Axis.Y({graph:a,orientation:"left",tickFormat:Rickshaw.Fixtures.Number.formatKMBT,element:document.getElementById(e+"DiskYAxis")}),new Rickshaw.Graph.HoverDetail({graph:a,formatter:function(e,n,o){var t='<span class="detail_swatch" style="background-color: '+e.color+'"></span>',r=t+e.name+": "+new Number(o/1073741824).toFixed(2)+"GB<br>";return r}}),new Rickshaw.Graph.Legend({graph:a,element:document.getElementById(e+"DiskLegend")})}a.render()}o.getUserInfo().admin||n.path("/"),e.activeTab="day";var i="transformNull(scale(divideSeries(sumSeries(collectd.localhost.cpu-0.cpu-system,collectd.localhost.cpu-0.cpu-nice,collectd.localhost.cpu-0.cpu-user),sumSeries(collectd.localhost.cpu-0.cpu-idle,collectd.localhost.cpu-0.cpu-system,collectd.localhost.cpu-0.cpu-nice,collectd.localhost.cpu-0.cpu-user,collectd.localhost.cpu-0.cpu-wait)), 100), 0)",s="transformNull(collectd.localhost.interface-eth0.if_octets.tx, 0)",p="transformNull(collectd.localhost.interface-eth0.if_octets.rx, 0)",l="transformNull(collectd.localhost.df-loop0.df_complex-used, 0)",c="transformNull(collectd.localhost.df-loop1.df_complex-used, 0)";e.updateGraphs=function(){var n=e.activeTab,u="-24hours";switch(n){case"day":u="-24hours";break;case"month":u="-1month";break;case"year":u="-1year";break;default:console.log("internal errror")}o.graphs([i,s,p,l,c],u,function(e,o){return e?console.log(e):(t(n,o[0]),r(n,o[1],o[2]),void a(n,o[3],o[4]))})},o.onReady(e.updateGraphs)}]),angular.module("Application").controller("SecurityController",["$scope","Client",function(e,n){e.activeClients=[],e.tokenInUse=null,e.ready=!1,e.removeAccessTokens=function(e,o){e._busy=!0,n.delTokensByClientId(e.id,function(n){return n?console.error(n):($(o.target).addClass("disabled"),void(e._busy=!1))})},n.onReady(function(){e.tokenInUse=n._token,n.getOAuthClients(function(n,o){return n?console.error(n):(e.activeClients=o,void(e.ready=!0))})})}]),angular.module("Application").controller("UserCreateController",["$scope","$routeParams","$location","Client",function(e,n,o,t){t.getUserInfo().admin||o.path("/"),e.disabled=!1,e.username="",e.email="",e.alreadyTaken="",e.submit=function(){e.alreadyTaken="",e.disabled=!0,t.createUser(e.username,e.email,function(n){return n&&409===n.statusCode?(e.alreadyTaken=e.username,console.error("Username already taken")):(n&&console.error("Unable to create user.",n),void(window.location.href="#/userlist"))})},e.cancel=function(){window.history.back()}}]),angular.module("Application").controller("UserListController",["$scope","$location","Client",function(e,n,o){function t(){o.listUsers(function(n,o){return n?console.error("Unable to get user listing.",n):(e.users=o.users,void(e.ready=!0))})}o.getUserInfo().admin||n.path("/"),e.ready=!1,e.users=[],e.userInfo=o.getUserInfo(),e.userremove={busy:!1,error:{},userInfo:{},username:"",password:""},e.useradd={busy:!1,alreadyTaken:!1,error:{},username:"",email:""},e.isMe=function(e){return e.username===o.getUserInfo().username},e.isAdmin=function(e){return!!e.admin},e.toggleAdmin=function(e){o.setAdmin(e.username,!e.admin,function(n){return n?console.error(n):void(e.admin=!e.admin)})},e.doAdd=function(){e.useradd.alreadyTaken="",e.useradd.error.username=null,e.useradd.error.email=null,o.createUser(e.useradd.username,e.useradd.email,function(n){if(n&&409===n.statusCode)return e.useradd.alreadyTaken=e.username,console.error("Username already taken");if(n&&400===n.statusCode){if(-1!==n.message.indexOf("email"))return e.useradd.error.email="Invalid Email",void(e.useradd.email="");
if(-1!==n.message.indexOf("username"))return e.useradd.error.username="Invalid Username",void(e.useradd.username="")}else n&&console.error("Unable to create user.",n),t(),$("#userAddModal").modal("hide")})},e.showUserRemove=function(n){e.userremove.error.username=null,e.userremove.error.password=null,e.userremove.userInfo=n,$("#userRemoveModal").modal("show")},e.doUserRemove=function(n){return e.userremove.error.username=null,e.userremove.error.password=null,e.userremove.username!==e.userremove.userInfo.username?(e.userremove.error.username="Username does not match",void(e.userremove.username="")):void o.removeUser(e.userremove.username,e.userremove.password,function(o){return o&&403===o.statusCode?(e.userremove.error.password="Incorrect password",void(e.userremove.password="")):o?console.error("Unable to delete user.",o):(e.userremove.userInfo={},e.userremove.username="",e.userremove.password="",n.$setPristine(),n.$setUntouched(),$("#userRemoveModal").modal("hide"),void t())})},t()}]),angular.module("Application").controller("UserPasswordController",["$scope","$routeParams","$location","Client",function(e,n,o,t){t.getUserInfo().admin||o.path("/"),e.active=!1,e.currentPassword="",e.newPassword="",e.repeatPassword="",e.validationClass={},e.submit=function(){return e.validationClass.currentPassword="",e.validationClass.newPassword="",e.validationClass.repeatPassword="",e.newPassword!==e.repeatPassword?(document.getElementById("inputRepeatPassword").focus(),e.validationClass.repeatPassword="has-error",void(e.repeatPassword="")):(e.active=!0,void t.changePassword(e.currentPassword,e.newPassword,function(n){n&&403===n.statusCode?(document.getElementById("inputCurrentPassword").focus(),e.validationClass.currentPassword="has-error",e.currentPassword="",e.newPassword="",e.repeatPassword=""):n?console.error("Unable to change password.",n):window.history.back(),e.active=!1}))},e.cancel=function(){window.history.back()},document.getElementById("inputCurrentPassword").focus()}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiY2xpZW50LmpzIiwiYXBwc3RvcmUuanMiLCJtYWluLmpzIiwiYWNjb3VudC5qcyIsImFwcGNvbmZpZ3VyZS5qcyIsImFwcGRldGFpbHMuanMiLCJhcHBpbnN0YWxsLmpzIiwiYXBwbGlzdC5qcyIsImRhc2hib2FyZC5qcyIsImRucy5qcyIsImdyYXBocy5qcyIsInNlY3VyaXR5LmpzIiwidXNlcmNyZWF0ZS5qcyIsInVzZXJsaXN0LmpzIiwidXNlcnBhc3N3b3JkLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJyZWRpcmVjdFRvIiwiY29udHJvbGxlciIsInRlbXBsYXRlVXJsIiwib3RoZXJ3aXNlIiwiZmlsdGVyIiwiaW5wdXQiLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInJlcXVpcmUiLCJsaW5rIiwic2NvcGUiLCJlbGVtIiwiYXR0cnMiLCJjdHJscyIsIiRzZXQiLCJsYXRlck5hbWUiLCJtb2RlbEN0cmwiLCJmb3JtQ3RybCIsIiRuYW1lIiwibmFtZSIsIiRhZGRDb250cm9sIiwiJG9uIiwiJHJlbW92ZUNvbnRyb2wiLCJzZXJ2aWNlIiwiJGh0dHAiLCJtZDUiLCJDbGllbnRFcnJvciIsInN0YXR1c0NvZGUiLCJtZXNzYWdlIiwiRXJyb3IiLCJjYWxsIiwidGhpcyIsImNvbnN0cnVjdG9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlZmF1bHRFcnJvckhhbmRsZXIiLCJjYWxsYmFjayIsImRhdGEiLCJzdGF0dXMiLCJjbGllbnQiLCJsb2dvdXQiLCJDbGllbnQiLCJfcmVhZHkiLCJfY29uZmlnTGlzdGVuZXIiLCJfcmVhZHlMaXN0ZW5lciIsIl91c2VySW5mbyIsInVzZXJuYW1lIiwiZW1haWwiLCJhZG1pbiIsIl90b2tlbiIsIl9jbGllbnRJZCIsIl9jbGllbnRTZWNyZXQiLCJfY29uZmlnIiwiYXBpU2VydmVyT3JpZ2luIiwid2ViU2VydmVyT3JpZ2luIiwiZnFkbiIsImlwIiwicmV2aXNpb24iLCJ1cGRhdGUiLCJpc0RldiIsInByb2dyZXNzIiwiX2luc3RhbGxlZEFwcHMiLCJzZXRUb2tlbiIsImxvY2FsU3RvcmFnZSIsInRva2VuIiwicHJvdG90eXBlIiwic2V0UmVhZHkiLCJmb3JFYWNoIiwib25SZWFkeSIsInB1c2giLCJvbkNvbmZpZyIsInNldFVzZXJJbmZvIiwidXNlckluZm8iLCJncmF2YXRhciIsImNyZWF0ZUhhc2giLCJ0b0xvd2VyQ2FzZSIsImdyYXZhdGFySHVnZSIsInNldENvbmZpZyIsInZlcnNpb24iLCJ0aGF0IiwiZ2V0SW5zdGFsbGVkQXBwcyIsImdldFVzZXJJbmZvIiwiZ2V0Q29uZmlnIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwiQXV0aG9yaXphdGlvbiIsInJlbW92ZUl0ZW0iLCJnZXQiLCJzdWNjZXNzIiwiZXJyb3IiLCJpbnN0YWxsQXBwIiwiaWQiLCJwYXNzd29yZCIsInRpdGxlIiwiYXBwU3RvcmVJZCIsImxvY2F0aW9uIiwicG9ydEJpbmRpbmdzIiwiYWNjZXNzUmVzdHJpY3Rpb24iLCJwb3N0IiwibWFuaWZlc3QiLCJ1bmluc3RhbGxBcHAiLCJhcHBJZCIsImNvbmZpZ3VyZUFwcCIsInVwZGF0ZUFwcCIsInN0YXJ0QXBwIiwic3RvcEFwcCIsImlzU2VydmVyRmlyc3RUaW1lIiwiYWN0aXZhdGVkIiwiZ2V0TmFrZWREb21haW4iLCJhcHBpZCIsInNldE5ha2VkRG9tYWluIiwiZ2V0QXBwcyIsImFwcHMiLCJnZXRBcHAiLCJhcHBGb3VuZCIsInNvbWUiLCJnZXRBcHBMb2dTdHJlYW0iLCJzb3VyY2UiLCJFdmVudFNvdXJjZSIsImdldEFwcExvZ1VybCIsInNldEFkbWluIiwicGF5bG9hZCIsImNyZWF0ZUFkbWluIiwic2V0dXBUb2tlbiIsImxpc3RVc2VycyIsImdldE9BdXRoQ2xpZW50cyIsImNsaWVudHMiLCJkZWxUb2tlbnNCeUNsaWVudElkIiwicmVib290IiwiYmFja3VwIiwic2V0Q2VydGlmaWNhdGUiLCJjZXJ0aWZpY2F0ZUZpbGUiLCJrZXlGaWxlIiwiY29uc29sZSIsImxvZyIsImZkIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJDb250ZW50LVR5cGUiLCJ1bmRlZmluZWQiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiaWRlbnRpdHkiLCJncmFwaHMiLCJ0YXJnZXRzIiwiZnJvbSIsInBhcmFtcyIsInRhcmdldCIsImZvcm1hdCIsImNyZWF0ZVVzZXIiLCJyZW1vdmVVc2VyIiwibWV0aG9kIiwidXJsIiwiY2hhbmdlUGFzc3dvcmQiLCJjdXJyZW50UGFzc3dvcmQiLCJuZXdQYXNzd29yZCIsInJlZnJlc2hDb25maWciLCJyZXN1bHQiLCJyZWZyZXNoSW5zdGFsbGVkQXBwcyIsImZvdW5kIiwiaSIsImxlbmd0aCIsImNvcHkiLCJzcGxpY2UiLCJ3aW5kb3ciLCJocmVmIiwiZXhjaGFuZ2VDb2RlRm9yVG9rZW4iLCJhdXRoQ29kZSIsImdyYW50X3R5cGUiLCJjb2RlIiwicmVkaXJlY3RfdXJpIiwib3JpZ2luIiwiY2xpZW50X2lkIiwiY2xpZW50X3NlY3JldCIsImFjY2Vzc190b2tlbiIsIkFwcFN0b3JlRXJyb3IiLCJBcHBTdG9yZSIsIl9hcHBzQ2FjaGUiLCJib3hWZXJzaW9uIiwiZ2V0QXBwQnlJZCIsImdldE1hbmlmZXN0IiwibWFuaWZlc3RVcmwiLCIkc2NvcGUiLCIkcm91dGUiLCIkaW50ZXJ2YWwiLCJpbml0aWFsaXplZCIsImlzQWN0aXZlIiwiY3VycmVudCIsIiQkcm91dGUiLCJvcmlnaW5hbFBhdGgiLCJpbmRleE9mIiwiZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJsb2dpbiIsImNhbGxiYWNrVVJMIiwic2V0dXAiLCIkIiwibW9kYWwiLCJjaGVja0lmRG9uZSIsInNldFRpbWVvdXQiLCJpc0ZpcnN0VGltZSIsInJlZnJlc2hBcHBzVGltZXIiLCJiaW5kIiwicmVmcmVzaENvbmZpZ1RpbWVyIiwiY2FuY2VsIiwiJGxvY2F0aW9uIiwidXNlciIsInBhdGgiLCIkcm91dGVQYXJhbXMiLCJkaXNhYmxlZCIsImRvbWFpbiIsImNvbnRhaW5lclBvcnQiLCJob3N0UG9ydCIsInJlcGxhY2UiLCJoaXN0b3J5IiwiYmFjayIsInRjcFBvcnRzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImZvY3VzIiwicmVuZGVyQ3B1IiwiYWN0aXZlVGFiIiwiY3B1RGF0YSIsInRyYW5zZm9ybWVkQ3B1IiwiZGF0YXBvaW50cyIsIm1hcCIsInBvaW50IiwieSIsIngiLCJjcHVHcmFwaCIsIlJpY2tzaGF3IiwiR3JhcGgiLCJlbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInJlbmRlcmVyIiwid2lkdGgiLCJoZWlnaHQiLCJtaW4iLCJtYXgiLCJzZXJpZXMiLCJjb2xvciIsIkF4aXMiLCJUaW1lIiwiZ3JhcGgiLCJZIiwib3JpZW50YXRpb24iLCJ0aWNrRm9ybWF0IiwiRml4dHVyZXMiLCJOdW1iZXIiLCJmb3JtYXRLTUJUIiwiSG92ZXJEZXRhaWwiLCJmb3JtYXR0ZXIiLCJzd2F0Y2giLCJjb250ZW50IiwidG9GaXhlZCIsInJlbmRlciIsInJlbmRlck1lbW9yeSIsIm1lbW9yeURhdGEiLCJ0cmFuc2Zvcm1lZE1lbW9yeSIsIm1lbW9yeUdyYXBoIiwicmVuZGVyRGlzayIsImRpc2tEYXRhIiwidHJhbnNmb3JtZWREaXNrIiwiZGlza0dyYXBoIiwiTGVnZW5kIiwidXBkYXRlQXZhaWxhYmxlIiwidXBkYXRlVmVyc2lvbiIsInBhc3N3b3JkV3JvbmciLCJ1cGRhdGVHcmFwaHMiLCJjcHVVc2FnZVRhcmdldCIsIm1lbW9yeVVzYWdlVGFyZ2V0IiwiZGlza1VzYWdlVGFyZ2V0IiwiYXBwTG9nVXJsIiwiYXBwVXBkYXRlcyIsIiR0aW1lb3V0IiwiaG9zdFBvcnRNaW4iLCJob3N0UG9ydE1heCIsInBvcnQiLCJwYXJzZUludCIsImluc3RhbGxlZEFwcHMiLCJhcHBjb25maWd1cmUiLCJidXN5Iiwic2hvd0NvbmZpZ3VyZSIsImRvQ29uZmlndXJlIiwiZm9ybSIsIiRzZXRQcmlzdGluZSIsIiRzZXRVbnRvdWNoZWQiLCJyZWZyZXNoIiwicmVhZHkiLCJhcHBpbnN0YWxsIiwic2hvd0luc3RhbGwiLCJkb0luc3RhbGwiLCJuYWtlZERvbWFpbkFwcCIsImNlcnRpZmljYXRlRmlsZU5hbWUiLCJrZXlGaWxlTmFtZSIsIiRwYXJlbnQiLCJvbmNoYW5nZSIsIiRhcHBseSIsImZpbGVzIiwicmVsb2FkIiwidG9rZW5JblVzZSIsInJlbmRlck5ldHdvcmsiLCJ0eERhdGEiLCJyeERhdGEiLCJ0cmFuc2Zvcm1lZFR4IiwidHJhbnNmb3JtZWRSeCIsIm5ldHdvcmtHcmFwaCIsImFwcHNVc2VkRGF0YSIsImRhdGFVc2VkRGF0YSIsInRyYW5zZm9ybWVkQXBwc1VzZWQiLCJ0cmFuc2Zvcm1lZERhdGFVc2VkIiwibmV0d29ya1VzYWdlVHhUYXJnZXQiLCJuZXR3b3JrVXNhZ2VSeFRhcmdldCIsImRpc2tVc2FnZUFwcHNVc2VkVGFyZ2V0IiwiZGlza1VzYWdlRGF0YVVzZWRUYXJnZXQiLCJhY3RpdmVDbGllbnRzIiwicmVtb3ZlQWNjZXNzVG9rZW5zIiwiX2J1c3kiLCJhZGRDbGFzcyIsImFscmVhZHlUYWtlbiIsInN1Ym1pdCIsInVzZXJzIiwidXNlcnJlbW92ZSIsInVzZXJhZGQiLCJpc01lIiwiaXNBZG1pbiIsInRvZ2dsZUFkbWluIiwiZG9BZGQiLCJzaG93VXNlclJlbW92ZSIsImRvVXNlclJlbW92ZSIsImFjdGl2ZSIsInJlcGVhdFBhc3N3b3JkIiwidmFsaWRhdGlvbkNsYXNzIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUtBLElBQUFBLEtBQUFDLFFBQUFDLE9BQUEsZUFBQSxVQUFBLFlBQUEsZUFHQUYsS0FBQUcsUUFBQSxpQkFBQSxTQUFBQyxHQUNBQSxFQUFBQyxLQUFBLEtBQ0FDLFdBQUEsVUFDQUQsS0FBQSxjQUNBRSxXQUFBLHNCQUNBQyxZQUFBLHlCQUNBSCxLQUFBLGVBQ0FFLFdBQUEsdUJBQ0FDLFlBQUEsMEJBQ0FILEtBQUEsaUJBQ0FFLFdBQUEseUJBQ0FDLFlBQUEsNEJBQ0FILEtBQUEsYUFDQUUsV0FBQSxxQkFD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RUFBQW9KLFFBQUEsTUFJQXBKLEVBQUFzQixPQUFBLFdBQ0F4QyxPQUFBa0QsUUFBQUMsUUFHQUUsU0FBQUMsZUFBQSx3QkFBQUMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbCBhbmd1bGFyOmZhbHNlICovXG5cbi8vIGNyZWF0ZSBtYWluIGFwcGxpY2F0aW9uIG1vZHVsZVxudmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicsIFsnbmdSb3V0ZScsICduZ0FuaW1hdGUnLCAnYW5ndWxhci1tZDUnXSk7XG5cbi8vIHNldHVwIGFsbCBtYWpvciBhcHBsaWNhdGlvbiByb3V0ZXNcbmFwcC5jb25maWcoWyckcm91dGVQcm92aWRlcicsIGZ1bmN0aW9uICgkcm91dGVQcm92aWRlcikge1xuICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy8nLCB7XG4gICAgICAgIHJlZGlyZWN0VG86ICcvYXBwcydcbiAgICB9KS53aGVuKCcvZGFzaGJvYXJkJywge1xuICAgICAgICBjb250cm9sbGVyOiAnRGFzaGJvYXJkQ29udHJvbGxlcicsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvZGFzaGJvYXJkLmh0bWwnXG4gICAgfSkud2hlbignL3VzZXJjcmVhdGUnLCB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdVc2VyQ3JlYXRlQ29udHJvbGxlcicsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvdXNlcmNyZWF0ZS5odG1sJ1xuICAgIH0pLndoZW4oJy91c2VycGFzc3dvcmQnLCB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdVc2VyUGFzc3dvcmRDb250cm9sbGVyJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy91c2VycGFzc3dvcmQuaHRtbCdcbiAgICB9KS53aGVuKCcvdXNlcmxpc3QnLCB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdVc2VyTGlzdENvbnRyb2xsZXInLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3VzZXJsaXN0Lmh0bWwnXG4gICAgfSkud2hlbignL2FwcHN0b3JlJywge1xuICAgICAgICBjb250cm9sbGVyOiAnQXBwU3RvcmVDb250cm9sbGVyJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9hcHBzdG9yZS5odG1sJ1xuICAgIH0pLndoZW4oJy9hcHBzJywge1xuICAgICAgICBjb250cm9sbGVyOiAnQXBwTGlzdENvbnRyb2xsZXInLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2FwcGxpc3QuaHRtbCdcbiAgICB9KS53aGVuKCcvYXBwLzphcHBTdG9yZUlkL2luc3RhbGwnLCB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdBcHBJbnN0YWxsQ29udHJvbGxlcicsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvYXBwaW5zdGFsbC5odG1sJ1xuICAgIH0pLndoZW4oJy9hcHAvOmFwcElkL2NvbmZpZ3VyZScsIHtcbiAgICAgICAgY29udHJvbGxlcjogJ0FwcENvbmZpZ3VyZUNvbnRyb2xsZXInLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2FwcGNvbmZpZ3VyZS5odG1sJ1xuICAgIH0pLndoZW4oJy9hcHAvOmFwcElkL2RldGFpbHMnLCB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdBcHBEZXRhaWxzQ29udHJvbGxlcicsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvYXBwZGV0YWlscy5odG1sJ1xuICAgIH0pLndoZW4oJy9kbnMnLCB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdEbnNDb250cm9sbGVyJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9kbnMuaHRtbCdcbiAgICB9KS53aGVuKCcvYWNjb3VudCcsIHtcbiAgICAgICAgY29udHJvbGxlcjogJ0FjY291bnRDb250cm9sbGVyJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9hY2NvdW50Lmh0bWwnXG4gICAgfSkud2hlbignL2dyYXBocycsIHtcbiAgICAgICAgY29udHJvbGxlcjogJ0dyYXBoc0NvbnRyb2xsZXInLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2dyYXBocy5odG1sJ1xuICAgIH0pLndoZW4oJy9zZWN1cml0eScsIHtcbiAgICAgICAgY29udHJvbGxlcjogJ1NlY3VyaXR5Q29udHJvbGxlcicsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3Mvc2VjdXJpdHkuaHRtbCdcbiAgICB9KS5vdGhlcndpc2UoeyByZWRpcmVjdFRvOiAnLyd9KTtcbn1dKTtcblxuYXBwLmZpbHRlcignaW5zdGFsbGF0aW9uQWN0aXZlJywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dCA9PT0gJ2Vycm9yJykgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoaW5wdXQgPT09ICdpbnN0YWxsZWQnKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG59KTtcblxuYXBwLmZpbHRlcignaW5zdGFsbGF0aW9uU3RhdGVMYWJlbCcsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQgPT09ICdlcnJvcicpIHJldHVybiAnRXJyb3InO1xuICAgICAgICBpZiAoaW5wdXQgPT09ICdzdWJkb21haW5fZXJyb3InKSByZXR1cm4gJ0Vycm9yJztcbiAgICAgICAgaWYgKGlucHV0ID09PSAnaW5zdGFsbGVkJykgcmV0dXJuICdJbnN0YWxsZWQnO1xuICAgICAgICBpZiAoaW5wdXQgPT09ICdkb3dubG9hZGluZ19pbWFnZScpIHJldHVybiAnRG93bmxvYWRpbmcnO1xuICAgICAgICBpZiAoaW5wdXQgPT09ICdwZW5kaW5nX2luc3RhbGwnKSByZXR1cm4gJ0luc3RhbGxpbmcnO1xuICAgICAgICBpZiAoaW5wdXQgPT09ICdwZW5kaW5nX3VuaW5zdGFsbCcpIHJldHVybiAnVW5pbnN0YWxsaW5nJztcbiAgICAgICAgaWYgKGlucHV0ID09PSAnY3JlYXRpbmdfY29udGFpbmVyJykgcmV0dXJuICdDb250YWluZXInO1xuICAgICAgICBpZiAoaW5wdXQgPT09ICdkb3dubG9hZGluZ19tYW5pZmVzdCcpIHJldHVybiAnTWFuaWZlc3QnO1xuICAgICAgICBpZiAoaW5wdXQgPT09ICdjcmVhdGluZ192b2x1bWUnKSByZXR1cm4gJ1ZvbHVtZSc7XG4gICAgICAgIGlmIChpbnB1dCA9PT0gJ3JlZ2lzdGVyaW5nX3N1YmRvbWFpbicpIHJldHVybiAnU3ViZG9tYWluJztcbiAgICAgICAgaWYgKGlucHV0ID09PSAnYWxsb2NhdGVkX29hdXRoX2NyZWRlbnRpYWxzJykgcmV0dXJuICdPQXV0aCc7XG5cbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH07XG59KTtcblxuYXBwLmZpbHRlcignYWNjZXNzUmVzdHJpY3Rpb25MYWJlbCcsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQgPT09ICcnKSByZXR1cm4gJ3B1YmxpYyc7XG4gICAgICAgIGlmIChpbnB1dCA9PT0gJ3JvbGVVc2VyJykgcmV0dXJuICdwcml2YXRlJztcbiAgICAgICAgaWYgKGlucHV0ID09PSAncm9sZUFkbWluJykgcmV0dXJuICdwcml2YXRlIChBZG1pbnMgb25seSknO1xuXG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9O1xufSk7XG5cbi8vIGN1c3RvbSBkaXJlY3RpdmUgZm9yIGR5bmFtaWMgbmFtZXMgaW4gZm9ybXNcbi8vIFNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIzNjE2NTc4L2lzc3VlLXJlZ2lzdGVyaW5nLWZvcm0tY29udHJvbC13aXRoLWludGVycG9sYXRlZC1uYW1lI2Fuc3dlci0yMzYxNzQwMVxuYXBwLmRpcmVjdGl2ZSgnbGF0ZXJOYW1lJywgZnVuY3Rpb24gKCkgeyAgICAgICAgICAgICAgICAgICAvLyAoMilcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICByZXF1aXJlOiBbJz9uZ01vZGVsJywgJ14/Zm9ybSddLCAgICAgICAgICAgICAgICAgICAvLyAoMylcbiAgICAgICAgbGluazogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW0sIGF0dHJzLCBjdHJscykge1xuICAgICAgICAgICAgYXR0cnMuJHNldCgnbmFtZScsIGF0dHJzLmxhdGVyTmFtZSk7XG5cbiAgICAgICAgICAgIHZhciBtb2RlbEN0cmwgPSBjdHJsc1swXTsgICAgICAgICAgICAgICAgICAgICAgLy8gKDMpXG4gICAgICAgICAgICB2YXIgZm9ybUN0cmwgID0gY3RybHNbMV07ICAgICAgICAgICAgICAgICAgICAgIC8vICgzKVxuICAgICAgICAgICAgaWYgKG1vZGVsQ3RybCAmJiBmb3JtQ3RybCkge1xuICAgICAgICAgICAgICAgIG1vZGVsQ3RybC4kbmFtZSA9IGF0dHJzLm5hbWU7ICAgICAgICAgICAgICAvLyAoNClcbiAgICAgICAgICAgICAgICBmb3JtQ3RybC4kYWRkQ29udHJvbChtb2RlbEN0cmwpOyAgICAgICAgICAgLy8gKDIpXG4gICAgICAgICAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybUN0cmwuJHJlbW92ZUNvbnRyb2wobW9kZWxDdHJsKTsgICAgLy8gKDUpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBnbG9iYWwgYW5ndWxhciAqL1xuLyogZ2xvYmFsIEV2ZW50U291cmNlICovXG5cbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpLnNlcnZpY2UoJ0NsaWVudCcsIFsnJGh0dHAnLCAnbWQ1JywgZnVuY3Rpb24gKCRodHRwLCBtZDUpIHtcbiAgICB2YXIgY2xpZW50ID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIENsaWVudEVycm9yKHN0YXR1c0NvZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeShtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IDQwMSkgcmV0dXJuIGNsaWVudC5sb2dvdXQoKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBDbGllbnQoKSB7XG4gICAgICAgIHRoaXMuX3JlYWR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2NvbmZpZ0xpc3RlbmVyID0gW107XG4gICAgICAgIHRoaXMuX3JlYWR5TGlzdGVuZXIgPSBbXTtcbiAgICAgICAgdGhpcy5fdXNlckluZm8gPSB7XG4gICAgICAgICAgICB1c2VybmFtZTogbnVsbCxcbiAgICAgICAgICAgIGVtYWlsOiBudWxsLFxuICAgICAgICAgICAgYWRtaW46IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3Rva2VuID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY2xpZW50SWQgPSAnY2lkLXdlYmFkbWluJztcbiAgICAgICAgdGhpcy5fY2xpZW50U2VjcmV0ID0gJ3VudXNlZCc7XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IHtcbiAgICAgICAgICAgIGFwaVNlcnZlck9yaWdpbjogbnVsbCxcbiAgICAgICAgICAgIHdlYlNlcnZlck9yaWdpbjogbnVsbCxcbiAgICAgICAgICAgIGZxZG46IG51bGwsXG4gICAgICAgICAgICBpcDogbnVsbCxcbiAgICAgICAgICAgIHJldmlzaW9uOiBudWxsLFxuICAgICAgICAgICAgdXBkYXRlOiBudWxsLFxuICAgICAgICAgICAgaXNEZXY6IGZhbHNlLFxuICAgICAgICAgICAgcHJvZ3Jlc3M6IHt9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2luc3RhbGxlZEFwcHMgPSBbXTtcblxuICAgICAgICB0aGlzLnNldFRva2VuKGxvY2FsU3RvcmFnZS50b2tlbik7XG4gICAgfVxuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5zZXRSZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlYWR5KSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5fcmVhZHkgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yZWFkeUxpc3RlbmVyLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5vblJlYWR5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZWFkeSkgY2FsbGJhY2soKTtcbiAgICAgICAgdGhpcy5fcmVhZHlMaXN0ZW5lci5wdXNoKGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5vbkNvbmZpZyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9jb25maWdMaXN0ZW5lci5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5fY29uZmlnKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5zZXRVc2VySW5mbyA9IGZ1bmN0aW9uICh1c2VySW5mbykge1xuICAgICAgICAvLyBJbiBvcmRlciB0byBrZWVwIHRoZSBhbmd1bGFyIGJpbmRpbmdzIGFsaXZlLCBzZXQgZWFjaCBwcm9wZXJ0eSBpbmRpdmlkdWFsbHlcbiAgICAgICAgdGhpcy5fdXNlckluZm8udXNlcm5hbWUgPSB1c2VySW5mby51c2VybmFtZTtcbiAgICAgICAgdGhpcy5fdXNlckluZm8uZW1haWwgPSB1c2VySW5mby5lbWFpbDtcbiAgICAgICAgdGhpcy5fdXNlckluZm8uYWRtaW4gPSAhIXVzZXJJbmZvLmFkbWluO1xuICAgICAgICB0aGlzLl91c2VySW5mby5ncmF2YXRhciA9ICdodHRwczovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyLycgKyBtZDUuY3JlYXRlSGFzaCh1c2VySW5mby5lbWFpbC50b0xvd2VyQ2FzZSgpKSArICcuanBnP3M9MjQmZD1tbSc7XG4gICAgICAgIHRoaXMuX3VzZXJJbmZvLmdyYXZhdGFySHVnZSA9ICdodHRwczovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyLycgKyBtZDUuY3JlYXRlSGFzaCh1c2VySW5mby5lbWFpbC50b0xvd2VyQ2FzZSgpKSArICcuanBnP3M9MTI4JmQ9bW0nO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLnNldENvbmZpZyA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgLy8gSW4gb3JkZXIgdG8ga2VlcCB0aGUgYW5ndWxhciBiaW5kaW5ncyBhbGl2ZSwgc2V0IGVhY2ggcHJvcGVydHkgaW5kaXZpZHVhbGx5IChUT0RPOiBqdXN0IHVzZSBhbmd1bGFyLmNvcHkgPylcbiAgICAgICAgdGhpcy5fY29uZmlnLmFwaVNlcnZlck9yaWdpbiA9IGNvbmZpZy5hcGlTZXJ2ZXJPcmlnaW47XG4gICAgICAgIHRoaXMuX2NvbmZpZy53ZWJTZXJ2ZXJPcmlnaW4gPSBjb25maWcud2ViU2VydmVyT3JpZ2luO1xuICAgICAgICB0aGlzLl9jb25maWcudmVyc2lvbiA9IGNvbmZpZy52ZXJzaW9uO1xuICAgICAgICB0aGlzLl9jb25maWcuZnFkbiA9IGNvbmZpZy5mcWRuO1xuICAgICAgICB0aGlzLl9jb25maWcuaXAgPSBjb25maWcuaXA7XG4gICAgICAgIHRoaXMuX2NvbmZpZy5yZXZpc2lvbiA9IGNvbmZpZy5yZXZpc2lvbjtcbiAgICAgICAgdGhpcy5fY29uZmlnLnVwZGF0ZSA9IGNvbmZpZy51cGRhdGU7XG4gICAgICAgIHRoaXMuX2NvbmZpZy5pc0RldiA9IGNvbmZpZy5pc0RldjtcbiAgICAgICAgdGhpcy5fY29uZmlnLnByb2dyZXNzID0gY29uZmlnLnByb2dyZXNzO1xuXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICB0aGlzLl9jb25maWdMaXN0ZW5lci5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2sodGhhdC5fY29uZmlnKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuZ2V0SW5zdGFsbGVkQXBwcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbGxlZEFwcHM7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuZ2V0VXNlckluZm8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91c2VySW5mbztcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRDb25maWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWc7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuc2V0VG9rZW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCZWFyZXIgJyArIHRva2VuO1xuICAgICAgICBpZiAoIXRva2VuKSBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndG9rZW4nKTtcbiAgICAgICAgZWxzZSBsb2NhbFN0b3JhZ2UudG9rZW4gPSB0b2tlbjtcbiAgICAgICAgdGhpcy5fdG9rZW4gPSB0b2tlbjtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBSZXN0IEFQSSB3cmFwcGVyc1xuICAgICAqL1xuICAgIENsaWVudC5wcm90b3R5cGUuY29uZmlnID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICRodHRwLmdldCgnL2FwaS92MS9jbG91ZHJvbi9jb25maWcnKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUudXNlckluZm8gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL3YxL3Byb2ZpbGUnKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuaW5zdGFsbEFwcCA9IGZ1bmN0aW9uIChpZCwgdmVyc2lvbiwgcGFzc3dvcmQsIHRpdGxlLCBjb25maWcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIGRhdGEgPSB7IGFwcFN0b3JlSWQ6IGlkLCB2ZXJzaW9uOiB2ZXJzaW9uLCBwYXNzd29yZDogcGFzc3dvcmQsIGxvY2F0aW9uOiBjb25maWcubG9jYXRpb24sIHBvcnRCaW5kaW5nczogY29uZmlnLnBvcnRCaW5kaW5ncywgYWNjZXNzUmVzdHJpY3Rpb246IGNvbmZpZy5hY2Nlc3NSZXN0cmljdGlvbiB9O1xuICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3YxL2FwcHMvaW5zdGFsbCcsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAyIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcblxuICAgICAgICAgICAgLy8gcHV0IG5ldyBhcHAgd2l0aCBhbWVuZGVkIHRpdGxlIGluIGNhY2hlXG4gICAgICAgICAgICBkYXRhLm1hbmlmZXN0ID0geyB0aXRsZTogdGl0bGUgfTtcbiAgICAgICAgICAgIHRoYXQuX2luc3RhbGxlZEFwcHMucHVzaChkYXRhKTtcblxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YS5pZCk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS51bmluc3RhbGxBcHAgPSBmdW5jdGlvbiAoYXBwSWQsIHBhc3N3b3JkLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZGF0YSA9IHsgcGFzc3dvcmQ6IHBhc3N3b3JkIH07XG4gICAgICAgICRodHRwLnBvc3QoJy9hcGkvdjEvYXBwcy8nICsgYXBwSWQgKyAnL3VuaW5zdGFsbCcsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAyKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5jb25maWd1cmVBcHAgPSBmdW5jdGlvbiAoaWQsIHBhc3N3b3JkLCBjb25maWcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBkYXRhID0geyBhcHBJZDogaWQsIHBhc3N3b3JkOiBwYXNzd29yZCwgbG9jYXRpb246IGNvbmZpZy5sb2NhdGlvbiwgcG9ydEJpbmRpbmdzOiBjb25maWcucG9ydEJpbmRpbmdzLCBhY2Nlc3NSZXN0cmljdGlvbjogY29uZmlnLmFjY2Vzc1Jlc3RyaWN0aW9uIH07XG4gICAgICAgICRodHRwLnBvc3QoJy9hcGkvdjEvYXBwcy8nICsgaWQgKyAnL2NvbmZpZ3VyZScsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAyKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS51cGRhdGVBcHAgPSBmdW5jdGlvbiAoaWQsIHZlcnNpb24sIHBhc3N3b3JkLCBjYWxsYmFjaykge1xuICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3YxL2FwcHMvJyArIGlkICsgJy91cGRhdGUnLCB7IHZlcnNpb246IHZlcnNpb24sIHBhc3N3b3JkOiBwYXNzd29yZCB9KS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IDIwMikgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuc3RhcnRBcHAgPSBmdW5jdGlvbiAoaWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBkYXRhID0geyB9O1xuICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3YxL2FwcHMvJyArIGlkICsgJy9zdGFydCcsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAyKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5zdG9wQXBwID0gZnVuY3Rpb24gKGlkLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZGF0YSA9IHsgfTtcbiAgICAgICAgJGh0dHAucG9zdCgnL2FwaS92MS9hcHBzLycgKyBpZCArICcvc3RvcCcsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAyKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS52ZXJzaW9uID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICRodHRwLmdldCgnL2FwaS92MS9jbG91ZHJvbi9zdGF0dXMnKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuaXNTZXJ2ZXJGaXJzdFRpbWUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL3YxL2Nsb3Vkcm9uL3N0YXR1cycpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDAgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgIWRhdGEuYWN0aXZhdGVkKTtcbiAgICAgICAgfSkuZXJyb3IoZGVmYXVsdEVycm9ySGFuZGxlcihjYWxsYmFjaykpO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLmdldE5ha2VkRG9tYWluID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICRodHRwLmdldCgnL2FwaS92MS9zZXR0aW5ncy9uYWtlZF9kb21haW4nKVxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDAgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YS5hcHBpZCk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5zZXROYWtlZERvbWFpbiA9IGZ1bmN0aW9uIChhcHBpZCwgY2FsbGJhY2spIHtcbiAgICAgICAgJGh0dHAucG9zdCgnL2FwaS92MS9zZXR0aW5ncy9uYWtlZF9kb21haW4nLCB7IGFwcGlkOiBhcHBpZCB9KS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IDIwNCkgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuZ2V0QXBwcyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAkaHR0cC5nZXQoJy9hcGkvdjEvYXBwcycpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEuYXBwcyk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRBcHAgPSBmdW5jdGlvbiAoYXBwSWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBhcHBGb3VuZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2luc3RhbGxlZEFwcHMuc29tZShmdW5jdGlvbiAoYXBwKSB7XG4gICAgICAgICAgICBpZiAoYXBwLmlkID09PSBhcHBJZCkge1xuICAgICAgICAgICAgICAgIGFwcEZvdW5kID0gYXBwO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChhcHBGb3VuZCkgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGFwcEZvdW5kKTtcbiAgICAgICAgZWxzZSByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKCdBcHAgbm90IGZvdW5kJykpO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLmdldEFwcExvZ1N0cmVhbSA9IGZ1bmN0aW9uIChhcHBJZCkge1xuICAgICAgICB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvYXBpL3YxL2FwcHMvJyArIGFwcElkICsgJy9sb2dzdHJlYW0nKTtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRBcHBMb2dVcmwgPSBmdW5jdGlvbiAoYXBwSWQpIHtcbiAgICAgICAgcmV0dXJuICcvYXBpL3YxL2FwcHMvJyArIGFwcElkICsgJy9sb2dzP2FjY2Vzc190b2tlbj0nICsgdGhpcy5fdG9rZW47XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuc2V0QWRtaW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIGFkbWluLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcGF5bG9hZCA9IHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICAgIGFkbWluOiBhZG1pblxuICAgICAgICB9O1xuXG4gICAgICAgICRodHRwLnBvc3QoJy9hcGkvdjEvdXNlcnMvJyArIHVzZXJuYW1lICsgJy9hZG1pbicsIHBheWxvYWQpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjA0KSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5jcmVhdGVBZG1pbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQsIGVtYWlsLCBzZXR1cFRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcGF5bG9hZCA9IHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZCxcbiAgICAgICAgICAgIGVtYWlsOiBlbWFpbFxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3YxL2Nsb3Vkcm9uL2FjdGl2YXRlP3NldHVwVG9rZW49JyArIHNldHVwVG9rZW4sIHBheWxvYWQpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDEgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuXG4gICAgICAgICAgICB0aGF0LnNldFRva2VuKGRhdGEudG9rZW4pO1xuICAgICAgICAgICAgdGhhdC5zZXRVc2VySW5mbyh7IHVzZXJuYW1lOiB1c2VybmFtZSwgZW1haWw6IGVtYWlsLCBhZG1pbjogdHJ1ZSB9KTtcblxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YS5hY3RpdmF0ZWQpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUubGlzdFVzZXJzID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICRodHRwLmdldCgnL2FwaS92MS91c2VycycpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDAgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5nZXRPQXV0aENsaWVudHMgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL3YxL29hdXRoL2NsaWVudHMnKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEuY2xpZW50cyk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5kZWxUb2tlbnNCeUNsaWVudElkID0gZnVuY3Rpb24gKGlkLCBjYWxsYmFjaykge1xuICAgICAgICAkaHR0cC5kZWxldGUoJy9hcGkvdjEvb2F1dGgvY2xpZW50cy8nICsgaWQgKyAnL3Rva2VucycpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDQpIHJldHVybiBjYWxsYmFjayhuZXcgQ2xpZW50RXJyb3Ioc3RhdHVzLCBkYXRhKSk7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgfSkuZXJyb3IoZGVmYXVsdEVycm9ySGFuZGxlcihjYWxsYmFjaykpO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAkaHR0cC5nZXQoJy9hcGkvdjEvY2xvdWRyb24vdXBkYXRlJykuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IDIwMiB8fCB0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpIHJldHVybiBjYWxsYmFjayhuZXcgQ2xpZW50RXJyb3Ioc3RhdHVzLCBkYXRhKSk7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBkYXRhKTtcbiAgICAgICAgfSkuZXJyb3IoZGVmYXVsdEVycm9ySGFuZGxlcihjYWxsYmFjaykpO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLnJlYm9vdCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAkaHR0cC5nZXQoJy9hcGkvdjEvY2xvdWRyb24vcmVib290Jykuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IDIwMiB8fCB0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpIHJldHVybiBjYWxsYmFjayhuZXcgQ2xpZW50RXJyb3Ioc3RhdHVzLCBkYXRhKSk7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBkYXRhKTtcbiAgICAgICAgfSkuZXJyb3IoZGVmYXVsdEVycm9ySGFuZGxlcihjYWxsYmFjaykpO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLmJhY2t1cCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3YxL2Nsb3Vkcm9uL2JhY2t1cHMnKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAyIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuc2V0Q2VydGlmaWNhdGUgPSBmdW5jdGlvbiAoY2VydGlmaWNhdGVGaWxlLCBrZXlGaWxlLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zb2xlLmxvZygnd2lsbCBzZXQgY2VydGlmaWNhdGUnKTtcblxuICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgZmQuYXBwZW5kKCdjZXJ0aWZpY2F0ZScsIGNlcnRpZmljYXRlRmlsZSk7XG4gICAgICAgIGZkLmFwcGVuZCgna2V5Jywga2V5RmlsZSk7XG5cbiAgICAgICAgJGh0dHAucG9zdCgnL2FwaS92MS9jbG91ZHJvbi9jZXJ0aWZpY2F0ZScsIGZkLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWQgfSxcbiAgICAgICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGFuZ3VsYXIuaWRlbnRpdHlcbiAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IDIwMikgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuZ3JhcGhzID0gZnVuY3Rpb24gKHRhcmdldHMsIGZyb20sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldHMsXG4gICAgICAgICAgICAgICAgZm9ybWF0OiAnanNvbicsXG4gICAgICAgICAgICAgICAgZnJvbTogZnJvbVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRodHRwLmdldCgnL2FwaS92MS9jbG91ZHJvbi9ncmFwaHMnLCBjb25maWcpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGNhbGxiYWNrKG5ldyBDbGllbnRFcnJvcihzdGF0dXMsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgICAgICB9KS5lcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSk7XG4gICAgfTtcblxuICAgIENsaWVudC5wcm90b3R5cGUuY3JlYXRlVXNlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgZW1haWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgICAgICAgICAgZW1haWw6IGVtYWlsXG4gICAgICAgIH07XG5cbiAgICAgICAgJGh0dHAucG9zdCgnL2FwaS92MS91c2VycycsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDEgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5yZW1vdmVVc2VyID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsXG4gICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgICAgfTtcblxuICAgICAgICAkaHR0cCh7IG1ldGhvZDogJ0RFTEVURScsIHVybDogJy9hcGkvdjEvdXNlcnMvJyArIHVzZXJuYW1lLCBkYXRhOiBkYXRhLCBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfX0pLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDQpIHJldHVybiBjYWxsYmFjayhuZXcgQ2xpZW50RXJyb3Ioc3RhdHVzLCBkYXRhKSk7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgfSkuZXJyb3IoZGVmYXVsdEVycm9ySGFuZGxlcihjYWxsYmFjaykpO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLmNoYW5nZVBhc3N3b3JkID0gZnVuY3Rpb24gKGN1cnJlbnRQYXNzd29yZCwgbmV3UGFzc3dvcmQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgcGFzc3dvcmQ6IGN1cnJlbnRQYXNzd29yZCxcbiAgICAgICAgICAgIG5ld1Bhc3N3b3JkOiBuZXdQYXNzd29yZFxuICAgICAgICB9O1xuXG4gICAgICAgICRodHRwLnBvc3QoJy9hcGkvdjEvdXNlcnMvJyArIHRoaXMuX3VzZXJJbmZvLnVzZXJuYW1lICsgJy9wYXNzd29yZCcsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDQgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5yZWZyZXNoQ29uZmlnID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICBjYWxsYmFjayA9IHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGxiYWNrIDogZnVuY3Rpb24gKCkge307XG5cbiAgICAgICAgdGhpcy5jb25maWcoZnVuY3Rpb24gKGVycm9yLCByZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcblxuICAgICAgICAgICAgdGhhdC5zZXRDb25maWcocmVzdWx0KTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LnByb3RvdHlwZS5yZWZyZXNoSW5zdGFsbGVkQXBwcyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgY2FsbGJhY2sgPSB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicgPyBjYWxsYmFjayA6IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgICAgIHRoaXMuZ2V0QXBwcyhmdW5jdGlvbiAoZXJyb3IsIGFwcHMpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcblxuICAgICAgICAgICAgLy8gaW5zZXJ0IG9yIHVwZGF0ZSBuZXcgYXBwc1xuICAgICAgICAgICAgYXBwcy5mb3JFYWNoKGZ1bmN0aW9uIChhcHApIHtcbiAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhhdC5faW5zdGFsbGVkQXBwcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5faW5zdGFsbGVkQXBwc1tpXS5pZCA9PT0gYXBwLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChmb3VuZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5jb3B5KGFwcCwgdGhhdC5faW5zdGFsbGVkQXBwc1tmb3VuZF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX2luc3RhbGxlZEFwcHMucHVzaChhcHApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBmaWx0ZXIgb3V0IG9sZCBlbnRyaWVzLCBnb2luZyBiYWNrd2FyZHMgdG8gYWxsb3cgc3BsaWNpbmdcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IHRoYXQuX2luc3RhbGxlZEFwcHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWFwcHMuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gKGVsZW0uaWQgPT09IHRoYXQuX2luc3RhbGxlZEFwcHNbaV0uaWQpOyB9KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9pbnN0YWxsZWRBcHBzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zZXRUb2tlbihudWxsKTtcbiAgICAgICAgdGhpcy5fdXNlckluZm8gPSB7fTtcblxuICAgICAgICAvLyBsb2dvdXQgZnJvbSBPQXV0aCBzZXNzaW9uXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9hcGkvdjEvc2Vzc2lvbi9sb2dvdXQnO1xuICAgIH07XG5cbiAgICBDbGllbnQucHJvdG90eXBlLmV4Y2hhbmdlQ29kZUZvclRva2VuID0gZnVuY3Rpb24gKGF1dGhDb2RlLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgIGdyYW50X3R5cGU6ICdhdXRob3JpemF0aW9uX2NvZGUnLFxuICAgICAgICAgICAgY29kZTogYXV0aENvZGUsXG4gICAgICAgICAgICByZWRpcmVjdF91cmk6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sXG4gICAgICAgICAgICBjbGllbnRfaWQ6IHRoaXMuX2NsaWVudElkLFxuICAgICAgICAgICAgY2xpZW50X3NlY3JldDogdGhpcy5fY2xpZW50U2VjcmV0XG4gICAgICAgIH07XG5cbiAgICAgICAgJGh0dHAucG9zdCgnL2FwaS92MS9vYXV0aC90b2tlbj9yZXNwb25zZV90eXBlPXRva2VuJmNsaWVudF9pZD0nICsgdGhpcy5fY2xpZW50SWQsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDAgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gY2FsbGJhY2sobmV3IENsaWVudEVycm9yKHN0YXR1cywgZGF0YSkpO1xuXG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBkYXRhLmFjY2Vzc190b2tlbik7XG4gICAgICAgIH0pLmVycm9yKGRlZmF1bHRFcnJvckhhbmRsZXIoY2FsbGJhY2spKTtcbiAgICB9O1xuXG4gICAgY2xpZW50ID0gbmV3IENsaWVudCgpO1xuICAgIHJldHVybiBjbGllbnQ7XG59XSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpLmNvbnRyb2xsZXIoJ0FwcFN0b3JlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRsb2NhdGlvbicsICckdGltZW91dCcsICdDbGllbnQnLCAnQXBwU3RvcmUnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICR0aW1lb3V0LCBDbGllbnQsIEFwcFN0b3JlKSB7XG4gICAgaWYgKCFDbGllbnQuZ2V0VXNlckluZm8oKS5hZG1pbikgJGxvY2F0aW9uLnBhdGgoJy8nKTtcblxuICAgICRzY29wZS5yZWFkeSA9IGZhbHNlO1xuICAgICRzY29wZS5hcHBzID0gW107XG4gICAgJHNjb3BlLmNvbmZpZyA9IENsaWVudC5nZXRDb25maWcoKTtcblxuICAgICRzY29wZS5hcHBpbnN0YWxsID0ge1xuICAgICAgICBidXN5OiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHt9LFxuICAgICAgICBhcHA6IHt9LFxuICAgICAgICBsb2NhdGlvbjogJycsXG4gICAgICAgIHBhc3N3b3JkOiAnJyxcbiAgICAgICAgcG9ydEJpbmRpbmdzOiB7fSxcbiAgICAgICAgYWNjZXNzUmVzdHJpY3Rpb246ICcnXG4gICAgfTtcblxuICAgICRzY29wZS5zaG93SW5zdGFsbCA9IGZ1bmN0aW9uIChhcHApIHtcbiAgICAgICAgQXBwU3RvcmUuZ2V0TWFuaWZlc3QoYXBwLmlkLCBmdW5jdGlvbiAoZXJyb3IsIG1hbmlmZXN0KSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybiBjb25zb2xlLmVycm9yKGVycm9yKTtcblxuICAgICAgICAgICAgLy8gYWRkIG1hbmlmZXN0IHRvIGFwcCBvYmplY3RcbiAgICAgICAgICAgIGFwcC5tYW5pZmVzdCA9IG1hbmlmZXN0O1xuXG4gICAgICAgICAgICAkc2NvcGUuYXBwaW5zdGFsbC5hcHAgPSBhcHA7XG4gICAgICAgICAgICAkc2NvcGUuYXBwaW5zdGFsbC5sb2NhdGlvbiA9IGFwcC5sb2NhdGlvbjtcbiAgICAgICAgICAgICRzY29wZS5hcHBpbnN0YWxsLnBvcnRCaW5kaW5ncyA9IG1hbmlmZXN0LnRjcFBvcnRzO1xuICAgICAgICAgICAgJHNjb3BlLmFwcGluc3RhbGwuYWNjZXNzUmVzdHJpY3Rpb24gPSBhcHAuYWNjZXNzUmVzdHJpY3Rpb24gfHwgJyc7XG4gICAgICAgICAgICBmb3IgKHZhciBwb3J0IGluICRzY29wZS5hcHBpbnN0YWxsLnBvcnRCaW5kaW5ncykge1xuICAgICAgICAgICAgICAgICRzY29wZS5hcHBpbnN0YWxsLnBvcnRCaW5kaW5nc1twb3J0XS5ob3N0UG9ydCA9IHBhcnNlSW50KHBvcnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkKCcjYXBwSW5zdGFsbE1vZGFsJykubW9kYWwoJ3Nob3cnKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICRzY29wZS5kb0luc3RhbGwgPSBmdW5jdGlvbiAoZm9ybSkge1xuICAgICAgICAkc2NvcGUuYXBwaW5zdGFsbC5idXN5ID0gdHJ1ZTtcbiAgICAgICAgJHNjb3BlLmFwcGluc3RhbGwuZXJyb3IubmFtZSA9IG51bGw7XG4gICAgICAgICRzY29wZS5hcHBpbnN0YWxsLmVycm9yLnBhc3N3b3JkID0gbnVsbDtcblxuICAgICAgICB2YXIgcG9ydEJpbmRpbmdzID0geyB9O1xuICAgICAgICBmb3IgKHZhciBjb250YWluZXJQb3J0IGluICRzY29wZS5hcHBpbnN0YWxsLnBvcnRCaW5kaW5ncykge1xuICAgICAgICAgICAgcG9ydEJpbmRpbmdzW2NvbnRhaW5lclBvcnRdID0gJHNjb3BlLmFwcGluc3RhbGwucG9ydEJpbmRpbmdzW2NvbnRhaW5lclBvcnRdLmhvc3RQb3J0O1xuICAgICAgICB9XG5cbiAgICAgICAgQ2xpZW50Lmluc3RhbGxBcHAoJHNjb3BlLmFwcGluc3RhbGwuYXBwLmlkLCAkc2NvcGUuYXBwaW5zdGFsbC5hcHAubWFuaWZlc3QudmVyc2lvbiwgJHNjb3BlLmFwcGluc3RhbGwucGFzc3dvcmQsICRzY29wZS5hcHBpbnN0YWxsLmFwcC50aXRsZSwgeyBsb2NhdGlvbjogJHNjb3BlLmFwcGluc3RhbGwubG9jYXRpb24sIHBvcnRCaW5kaW5nczogcG9ydEJpbmRpbmdzLCBhY2Nlc3NSZXN0cmljdGlvbjogJHNjb3BlLmFwcGluc3RhbGwuYWNjZXNzUmVzdHJpY3Rpb24gfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3Iuc3RhdHVzQ29kZSA9PT0gNDA5KSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBpbnN0YWxsLmVycm9yLm5hbWUgPSAnQXBwbGljYXRpb24gYWxyZWFkeSBleGlzdHMuJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yLnN0YXR1c0NvZGUgPT09IDQwMykge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwaW5zdGFsbC5lcnJvci5wYXNzd29yZCA9ICdXcm9uZyBwYXNzd29yZCBwcm92aWRlZC4nO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwaW5zdGFsbC5wYXNzd29yZCA9ICcnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBpbnN0YWxsLmVycm9yLm5hbWUgPSAnQXBwIHdpdGggdGhlIG5hbWUgJyArICRzY29wZS5hcHBpbnN0YWxsLmFwcC5uYW1lICsgJyBjYW5ub3QgYmUgaW5zdGFsbGVkLic7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFwcGluc3RhbGwuYnVzeSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHNjb3BlLmFwcGluc3RhbGwuYnVzeSA9IGZhbHNlO1xuICAgICAgICAgICAgJHNjb3BlLmFwcGluc3RhbGwuZXJyb3IgPSB7fTtcbiAgICAgICAgICAgICRzY29wZS5hcHBpbnN0YWxsLmFwcCA9IHt9O1xuICAgICAgICAgICAgJHNjb3BlLmFwcGluc3RhbGwubG9jYXRpb24gPSAnJztcbiAgICAgICAgICAgICRzY29wZS5hcHBpbnN0YWxsLnBhc3N3b3JkID0gJyc7XG4gICAgICAgICAgICAkc2NvcGUuYXBwaW5zdGFsbC5wb3J0QmluZGluZ3MgPSB7fTtcbiAgICAgICAgICAgICRzY29wZS5hcHBpbnN0YWxsLmFjY2Vzc1Jlc3RyaWN0aW9uID0gJyc7XG5cbiAgICAgICAgICAgIGZvcm0uJHNldFByaXN0aW5lKCk7XG4gICAgICAgICAgICBmb3JtLiRzZXRVbnRvdWNoZWQoKTtcblxuICAgICAgICAgICAgJCgnI2FwcEluc3RhbGxNb2RhbCcpLm1vZGFsKCdoaWRlJyk7XG5cbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvYXBwcycpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVmcmVzaCgpIHtcbiAgICAgICAgJHNjb3BlLnJlYWR5ID0gZmFsc2U7XG5cbiAgICAgICAgQXBwU3RvcmUuZ2V0QXBwcyhmdW5jdGlvbiAoZXJyb3IsIGFwcHMpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiAkdGltZW91dChyZWZyZXNoLCAxMDAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHNjb3BlLmFwcHMgPSBhcHBzO1xuICAgICAgICAgICAgJHNjb3BlLnJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVmcmVzaCgpO1xufV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKS5jb250cm9sbGVyKCdNYWluQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRyb3V0ZScsICckaW50ZXJ2YWwnLCAnQ2xpZW50JywgZnVuY3Rpb24gKCRzY29wZSwgJHJvdXRlLCAkaW50ZXJ2YWwsIENsaWVudCkge1xuICAgICRzY29wZS5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICRzY29wZS51c2VySW5mbyA9IENsaWVudC5nZXRVc2VySW5mbygpO1xuICAgICRzY29wZS5jb25maWcgPSB7fTtcblxuICAgICRzY29wZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgaWYgKCEkcm91dGUuY3VycmVudCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gJHJvdXRlLmN1cnJlbnQuJCRyb3V0ZS5vcmlnaW5hbFBhdGguaW5kZXhPZih1cmwpID09PSAwO1xuICAgIH07XG5cbiAgICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAkc2NvcGUuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgQ2xpZW50LmxvZ291dCgpO1xuICAgIH07XG5cbiAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjYWxsYmFja1VSTCA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyAnL2xvZ2luX2NhbGxiYWNrLmh0bWwnO1xuICAgICAgICB2YXIgc2NvcGUgPSAncm9vdCxwcm9maWxlLGFwcHMscm9sZUFkbWluJztcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL2FwaS92MS9vYXV0aC9kaWFsb2cvYXV0aG9yaXplP3Jlc3BvbnNlX3R5cGU9Y29kZSZjbGllbnRfaWQ9JyArIENsaWVudC5fY2xpZW50SWQgKyAnJnJlZGlyZWN0X3VyaT0nICsgY2FsbGJhY2tVUkwgKyAnJnNjb3BlPScgKyBzY29wZTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLnNldHVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvZXJyb3IuaHRtbD9lcnJvckNvZGU9MSc7XG4gICAgfTtcblxuICAgICRzY29wZS5lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL2Vycm9yLmh0bWwnO1xuICAgIH07XG5cbiAgICAkc2NvcGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkKCcjdXBkYXRlTW9kYWwnKS5tb2RhbCgnaGlkZScpO1xuXG4gICAgICAgICRzY29wZS5pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgICAgIENsaWVudC51cGRhdGUoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvdXBkYXRlLmh0bWwnO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmJhY2t1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJCgnI2JhY2t1cFByb2dyZXNzTW9kYWwnKS5tb2RhbCgnc2hvdycpO1xuXG4gICAgICAgICRzY29wZS5pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgICAgIENsaWVudC5iYWNrdXAoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuXG4gICAgICAgICAgICAvLyBUT0RPIHRoaXMgZG9lcyBsb29rIGxpa2Ugd2Ugc2hvdWxkIHVzZSBwcm9ncmVzcy5qc29uP1xuICAgICAgICAgICAgLy8gbm93IHN0YXJ0IHF1ZXJ5XG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja0lmRG9uZSgpIHtcbiAgICAgICAgICAgICAgICBDbGllbnQudmVyc2lvbihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoY2hlY2tJZkRvbmUsIDEwMDApO1xuXG4gICAgICAgICAgICAgICAgICAgICQoJyNiYWNrdXBQcm9ncmVzc01vZGFsJykubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoY2hlY2tJZkRvbmUsIDUwMDApO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgQ2xpZW50LmlzU2VydmVyRmlyc3RUaW1lKGZ1bmN0aW9uIChlcnJvciwgaXNGaXJzdFRpbWUpIHtcbiAgICAgICAgaWYgKGVycm9yKSByZXR1cm4gJHNjb3BlLmVycm9yKGVycm9yKTtcbiAgICAgICAgaWYgKGlzRmlyc3RUaW1lKSByZXR1cm4gJHNjb3BlLnNldHVwKCk7XG5cbiAgICAgICAgLy8gd2UgdXNlIHRoZSBjb25maWcgcmVxdWVzdCBhcyBhbiBpbmRpY2F0b3IgaWYgdGhlIHRva2VuIGlzIHN0aWxsIHZhbGlkXG4gICAgICAgIC8vIFRPRE8gd2Ugc2hvdWxkIHByb2JhYmx5IGF0dGFjaCBzdWNoIGEgaGFuZGxlciBmb3IgZWFjaCByZXF1ZXN0LCBhcyB0aGUgdG9rZW4gY2FuIGdldCBpbnZhbGlkXG4gICAgICAgIC8vIGF0IGFueSB0aW1lIVxuICAgICAgICBpZiAobG9jYWxTdG9yYWdlLnRva2VuKSB7XG4gICAgICAgICAgICBDbGllbnQucmVmcmVzaENvbmZpZyhmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgJiYgZXJyb3Iuc3RhdHVzQ29kZSA9PT0gNDAxKSByZXR1cm4gJHNjb3BlLmxvZ2luKCk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm4gJHNjb3BlLmVycm9yKGVycm9yKTtcblxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHdlIGFyZSBhY3R1YWxseSB1cGRhdGVpbmdcbiAgICAgICAgICAgICAgICBpZiAoQ2xpZW50LmdldENvbmZpZygpLnByb2dyZXNzLnVwZGF0ZSkgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL3VwZGF0ZS5odG1sJztcblxuICAgICAgICAgICAgICAgIENsaWVudC51c2VySW5mbyhmdW5jdGlvbiAoZXJyb3IsIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybiAkc2NvcGUuZXJyb3IoZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgICAgIENsaWVudC5zZXRVc2VySW5mbyhyZXN1bHQpO1xuXG4gICAgICAgICAgICAgICAgICAgIENsaWVudC5yZWZyZXNoSW5zdGFsbGVkQXBwcyhmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuICRzY29wZS5lcnJvcihlcnJvcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtpY2sgb2ZmIGluc3RhbGxlZCBhcHBzIGFuZCBjb25maWcgcG9sbGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZnJlc2hBcHBzVGltZXIgPSAkaW50ZXJ2YWwoQ2xpZW50LnJlZnJlc2hJbnN0YWxsZWRBcHBzLmJpbmQoQ2xpZW50KSwgMjAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmcmVzaENvbmZpZ1RpbWVyID0gJGludGVydmFsKENsaWVudC5yZWZyZXNoQ29uZmlnLmJpbmQoQ2xpZW50KSwgNTAwMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocmVmcmVzaEFwcHNUaW1lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChyZWZyZXNoQ29uZmlnVGltZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vdyBtYXJrIHRoZSBDbGllbnQgdG8gYmUgcmVhZHlcbiAgICAgICAgICAgICAgICAgICAgICAgIENsaWVudC5zZXRSZWFkeSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29uZmlnID0gQ2xpZW50LmdldENvbmZpZygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHNjb3BlLmxvZ2luKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIHdhaXQgdGlsbCB0aGUgdmlldyBoYXMgbG9hZGVkIHVudGlsIHNob3dpbmcgYSBtb2RhbCBkaWFsb2dcbiAgICBDbGllbnQub25Db25maWcoZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnLnByb2dyZXNzLnVwZGF0ZSkge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL3VwZGF0ZS5odG1sJztcbiAgICAgICAgfVxuICAgIH0pO1xufV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKS5jb250cm9sbGVyKCdBY2NvdW50Q29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRsb2NhdGlvbicsICdDbGllbnQnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sIENsaWVudCkge1xuICAgICRzY29wZS51c2VyID0gQ2xpZW50LmdldFVzZXJJbmZvKCk7XG4gICAgJHNjb3BlLmNvbmZpZyA9IENsaWVudC5nZXRDb25maWcoKTtcblxuICAgICRzY29wZS5jaGFuZ2VQYXNzd29yZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy91c2VycGFzc3dvcmQnKTtcbiAgICAgICAgLy8gd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnIy91c2VycGFzc3dvcmQnO1xuICAgIH07XG59XSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpLmNvbnRyb2xsZXIoJ0FwcENvbmZpZ3VyZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJywgJ0NsaWVudCcsIGZ1bmN0aW9uICgkc2NvcGUsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uLCBDbGllbnQpIHtcbiAgICBpZiAoIUNsaWVudC5nZXRVc2VySW5mbygpLmFkbWluKSAkbG9jYXRpb24ucGF0aCgnLycpO1xuXG4gICAgJHNjb3BlLmFwcCA9IG51bGw7XG4gICAgJHNjb3BlLnBhc3N3b3JkID0gJyc7XG4gICAgJHNjb3BlLmxvY2F0aW9uID0gJyc7XG4gICAgJHNjb3BlLmFjY2Vzc1Jlc3RyaWN0aW9uID0gJyc7XG4gICAgJHNjb3BlLmRpc2FibGVkID0gZmFsc2U7XG4gICAgJHNjb3BlLmVycm9yID0ge307XG4gICAgJHNjb3BlLmRvbWFpbiA9ICcnO1xuICAgICRzY29wZS5wb3J0QmluZGluZ3MgPSB7IH07XG5cbiAgICAkc2NvcGUuY29uZmlndXJlQXBwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkc2NvcGUuZXJyb3IubmFtZSA9IG51bGw7XG4gICAgICAgICRzY29wZS5lcnJvci5wYXNzd29yZCA9IG51bGw7XG5cbiAgICAgICAgdmFyIHBvcnRCaW5kaW5ncyA9IHsgfTtcbiAgICAgICAgZm9yICh2YXIgY29udGFpbmVyUG9ydCBpbiAkc2NvcGUucG9ydEJpbmRpbmdzKSB7XG4gICAgICAgICAgICBwb3J0QmluZGluZ3NbY29udGFpbmVyUG9ydF0gPSAkc2NvcGUucG9ydEJpbmRpbmdzW2NvbnRhaW5lclBvcnRdLmhvc3RQb3J0O1xuICAgICAgICB9XG5cbiAgICAgICAgQ2xpZW50LmNvbmZpZ3VyZUFwcCgkcm91dGVQYXJhbXMuYXBwSWQsICRzY29wZS5wYXNzd29yZCwgeyBsb2NhdGlvbjogJHNjb3BlLmxvY2F0aW9uLCBwb3J0QmluZGluZ3M6IHBvcnRCaW5kaW5ncywgYWNjZXNzUmVzdHJpY3Rpb246ICRzY29wZS5hY2Nlc3NSZXN0cmljdGlvbiB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5zdGF0dXNDb2RlID09PSA0MDMpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yLnBhc3N3b3JkID0gJ1dyb25nIHBhc3N3b3JkIHByb3ZpZGVkLic7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wYXNzd29yZCA9ICcnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvci5uYW1lID0gJ0FwcCB3aXRoIHRoZSBuYW1lICcgKyAkc2NvcGUuYXBwLm5hbWUgKyAnIGNhbm5vdCBiZSBjb25maWd1cmVkLic7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSgnIy9hcHAvJyArICRyb3V0ZVBhcmFtcy5hcHBJZCArICcvZGV0YWlscycpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuICAgIH07XG5cbiAgICBDbGllbnQub25SZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgICRzY29wZS5kb21haW4gPSBDbGllbnQuZ2V0Q29uZmlnKCkuZnFkbjtcblxuICAgICAgICBDbGllbnQuZ2V0QXBwKCRyb3V0ZVBhcmFtcy5hcHBJZCwgZnVuY3Rpb24gKGVycm9yLCBhcHApIHtcbiAgICAgICAgICAgICRzY29wZS5lcnJvciA9IGVycm9yIHx8IHsgfTtcbiAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuO1xuXG4gICAgICAgICAgICAkc2NvcGUuYXBwID0gYXBwO1xuICAgICAgICAgICAgJHNjb3BlLmxvY2F0aW9uID0gYXBwLmxvY2F0aW9uO1xuICAgICAgICAgICAgJHNjb3BlLnBvcnRCaW5kaW5ncyA9IGFwcC5tYW5pZmVzdC50Y3BQb3J0cztcbiAgICAgICAgICAgICRzY29wZS5hY2Nlc3NSZXN0cmljdGlvbiA9IGFwcC5hY2Nlc3NSZXN0cmljdGlvbjtcbiAgICAgICAgICAgIGZvciAodmFyIGNvbnRhaW5lclBvcnQgaW4gJHNjb3BlLnBvcnRCaW5kaW5ncykge1xuICAgICAgICAgICAgICAgICRzY29wZS5wb3J0QmluZGluZ3NbY29udGFpbmVyUG9ydF0uaG9zdFBvcnQgPSBhcHAucG9ydEJpbmRpbmdzW2NvbnRhaW5lclBvcnRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dExvY2F0aW9uJykuZm9jdXMoKTtcbn1dKTtcbiIsIi8qIGdsb2JhbCAkOnRydWUgKi9cbi8qIGdsb2JhbCBSaWNrc2hhdzp0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJykuY29udHJvbGxlcignQXBwRGV0YWlsc0NvbnRyb2xsZXInLCBbJyRzY29wZScsICckaHR0cCcsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJywgJ0NsaWVudCcsIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgQ2xpZW50KSB7XG4gICAgaWYgKCFDbGllbnQuZ2V0VXNlckluZm8oKS5hZG1pbikgJGxvY2F0aW9uLnBhdGgoJy8nKTtcblxuICAgICRzY29wZS5hcHAgPSB7fTtcbiAgICAkc2NvcGUuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAkc2NvcGUudXBkYXRlQXZhaWxhYmxlID0gZmFsc2U7XG4gICAgJHNjb3BlLmFjdGl2ZVRhYiA9ICdkYXknO1xuICAgICRzY29wZS51cGRhdGVWZXJzaW9uID0gbnVsbDtcbiAgICAkc2NvcGUucGFzc3dvcmQgPSAnJztcbiAgICAkc2NvcGUucGFzc3dvcmRXcm9uZyA9IGZhbHNlO1xuXG4gICAgJHNjb3BlLnN0YXJ0QXBwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBDbGllbnQuc3RhcnRBcHAoJHJvdXRlUGFyYW1zLmFwcElkLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUuc3RvcEFwcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgQ2xpZW50LnN0b3BBcHAoJHJvdXRlUGFyYW1zLmFwcElkLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUudXBkYXRlQXBwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkc2NvcGUucGFzc3dvcmRXcm9uZyA9IGZhbHNlO1xuXG4gICAgICAgIENsaWVudC51cGRhdGVBcHAoJHJvdXRlUGFyYW1zLmFwcElkLCAkc2NvcGUudXBkYXRlVmVyc2lvbiwgJHNjb3BlLnBhc3N3b3JkLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvciAmJiBlcnJvci5zdGF0dXNDb2RlID09PSA0MDMpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucGFzc3dvcmQgPSAnJztcbiAgICAgICAgICAgICAgICAkc2NvcGUucGFzc3dvcmRXcm9uZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgJCgnI2lucHV0UGFzc3dvcmRVcGRhdGUnKS5mb2N1cygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKCcjdXBkYXRlQXBwTW9kYWwnKS5tb2RhbCgnaGlkZScpO1xuICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVBdmFpbGFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlVmVyc2lvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnBhc3N3b3JkID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUudW5pbnN0YWxsQXBwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkc2NvcGUucGFzc3dvcmRXcm9uZyA9IGZhbHNlO1xuXG4gICAgICAgIENsaWVudC51bmluc3RhbGxBcHAoJHJvdXRlUGFyYW1zLmFwcElkLCAkc2NvcGUucGFzc3dvcmQsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yICYmIGVycm9yLnN0YXR1c0NvZGUgPT09IDQwMykge1xuICAgICAgICAgICAgICAgICRzY29wZS5wYXNzd29yZCA9ICcnO1xuICAgICAgICAgICAgICAgICRzY29wZS5wYXNzd29yZFdyb25nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAkKCcjaW5wdXRQYXNzd29yZFVuaW5zdGFsbCcpLmZvY3VzKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoJyN1bmluc3RhbGxBcHBNb2RhbCcpLm1vZGFsKCdoaWRlJyk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnBhc3N3b3JkID0gJyc7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnIy8nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVuZGVyQ3B1KGFjdGl2ZVRhYiwgY3B1RGF0YSkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtZWRDcHUgPSBbIF07XG5cbiAgICAgICAgaWYgKGNwdURhdGEgJiYgY3B1RGF0YS5kYXRhcG9pbnRzKSB0cmFuc2Zvcm1lZENwdSA9IGNwdURhdGEuZGF0YXBvaW50cy5tYXAoZnVuY3Rpb24gKHBvaW50KSB7IHJldHVybiB7IHk6IHBvaW50WzBdLCB4OiBwb2ludFsxXSB9IH0pO1xuXG4gICAgICAgIHZhciBjcHVHcmFwaCA9IG5ldyBSaWNrc2hhdy5HcmFwaCh7XG4gICAgICAgICAgICBlbGVtZW50OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIGFjdGl2ZVRhYiArICdDcHVDaGFydCcpLFxuICAgICAgICAgICAgcmVuZGVyZXI6ICdhcmVhJyxcbiAgICAgICAgICAgIHdpZHRoOiA1ODAsXG4gICAgICAgICAgICBoZWlnaHQ6IDI1MCxcbiAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgIG1heDogMTAwLFxuICAgICAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgICAgIGNvbG9yOiAnc3RlZWxibHVlJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB0cmFuc2Zvcm1lZENwdSB8fCBbIF0sXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NwdSdcbiAgICAgICAgICAgIH1dXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBjcHVYQXhpcyA9IG5ldyBSaWNrc2hhdy5HcmFwaC5BeGlzLlRpbWUoeyBncmFwaDogY3B1R3JhcGggfSk7XG4gICAgICAgIHZhciBjcHVZQXhpcyA9IG5ldyBSaWNrc2hhdy5HcmFwaC5BeGlzLlkoe1xuICAgICAgICAgICAgZ3JhcGg6IGNwdUdyYXBoLFxuICAgICAgICAgICAgb3JpZW50YXRpb246ICdsZWZ0JyxcbiAgICAgICAgICAgIHRpY2tGb3JtYXQ6IFJpY2tzaGF3LkZpeHR1cmVzLk51bWJlci5mb3JtYXRLTUJULFxuICAgICAgICAgICAgZWxlbWVudDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYWN0aXZlVGFiICsgJ0NwdVlBeGlzJyksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBjcHVIb3ZlckRldGFpbCA9IG5ldyBSaWNrc2hhdy5HcmFwaC5Ib3ZlckRldGFpbCh7XG4gICAgICAgICAgICBncmFwaDogY3B1R3JhcGgsXG4gICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKHNlcmllcywgeCwgeSkge1xuICAgICAgICAgICAgICAgIHZhciBzd2F0Y2ggPSAnPHNwYW4gY2xhc3M9XCJkZXRhaWxfc3dhdGNoXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAnICsgc2VyaWVzLmNvbG9yICsgJ1wiPjwvc3Bhbj4nO1xuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gc3dhdGNoICsgc2VyaWVzLm5hbWUgKyBcIjogXCIgKyBuZXcgTnVtYmVyKHkpLnRvRml4ZWQoMikgKyAnJTxicj4nO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjcHVHcmFwaC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJNZW1vcnkoYWN0aXZlVGFiLCBtZW1vcnlEYXRhKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1lZE1lbW9yeSA9IFsgXTtcblxuICAgICAgICBpZiAobWVtb3J5RGF0YSAmJiBtZW1vcnlEYXRhLmRhdGFwb2ludHMpIHRyYW5zZm9ybWVkTWVtb3J5ID0gbWVtb3J5RGF0YS5kYXRhcG9pbnRzLm1hcChmdW5jdGlvbiAocG9pbnQpIHsgcmV0dXJuIHsgeTogcG9pbnRbMF0sIHg6IHBvaW50WzFdIH0gfSk7XG5cbiAgICAgICAgdmFyIG1lbW9yeUdyYXBoID0gbmV3IFJpY2tzaGF3LkdyYXBoKHtcbiAgICAgICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgYWN0aXZlVGFiICsgJ01lbW9yeUNoYXJ0JyksXG4gICAgICAgICAgICByZW5kZXJlcjogJ2FyZWEnLFxuICAgICAgICAgICAgd2lkdGg6IDU4MCxcbiAgICAgICAgICAgIGhlaWdodDogMjUwLFxuICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgbWF4OiAyICogMTAyNCAqIDEwMjQgKiAxMDI0LCAvLyAyZ2JcbiAgICAgICAgICAgIHNlcmllczogWyB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICdzdGVlbGJsdWUnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHRyYW5zZm9ybWVkTWVtb3J5IHx8IFsgXSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnbWVtb3J5J1xuICAgICAgICAgICAgfSBdXG4gICAgICAgIH0gKTtcblxuICAgICAgICB2YXIgbWVtb3J5WEF4aXMgPSBuZXcgUmlja3NoYXcuR3JhcGguQXhpcy5UaW1lKHsgZ3JhcGg6IG1lbW9yeUdyYXBoIH0pO1xuICAgICAgICB2YXIgbWVtb3J5WUF4aXMgPSBuZXcgUmlja3NoYXcuR3JhcGguQXhpcy5ZKHtcbiAgICAgICAgICAgIGdyYXBoOiBtZW1vcnlHcmFwaCxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiAnbGVmdCcsXG4gICAgICAgICAgICB0aWNrRm9ybWF0OiBSaWNrc2hhdy5GaXh0dXJlcy5OdW1iZXIuZm9ybWF0S01CVCxcbiAgICAgICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGFjdGl2ZVRhYiArICdNZW1vcnlZQXhpcycpLFxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgbWVtb3J5SG92ZXJEZXRhaWwgPSBuZXcgUmlja3NoYXcuR3JhcGguSG92ZXJEZXRhaWwoe1xuICAgICAgICAgICAgZ3JhcGg6IG1lbW9yeUdyYXBoLFxuICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihzZXJpZXMsIHgsIHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3dhdGNoID0gJzxzcGFuIGNsYXNzPVwiZGV0YWlsX3N3YXRjaFwiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogJyArIHNlcmllcy5jb2xvciArICdcIj48L3NwYW4+JztcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IHN3YXRjaCArIHNlcmllcy5uYW1lICsgXCI6IFwiICsgbmV3IE51bWJlcih5LygxMDI0KjEwMjQpKS50b0ZpeGVkKDIpICsgJ01CPGJyPic7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1lbW9yeUdyYXBoLnJlbmRlcigpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlckRpc2soYWN0aXZlVGFiLCBkaXNrRGF0YSkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtZWREaXNrID0gWyBdO1xuXG4gICAgICAgIGlmIChkaXNrRGF0YSAmJiBkaXNrRGF0YS5kYXRhcG9pbnRzKSB0cmFuc2Zvcm1lZERpc2sgPSBkaXNrRGF0YS5kYXRhcG9pbnRzLm1hcChmdW5jdGlvbiAocG9pbnQpIHsgcmV0dXJuIHsgeTogcG9pbnRbMF0sIHg6IHBvaW50WzFdIH0gfSk7XG5cbiAgICAgICAgdmFyIGRpc2tHcmFwaCA9IG5ldyBSaWNrc2hhdy5HcmFwaCh7XG4gICAgICAgICAgICBlbGVtZW50OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIGFjdGl2ZVRhYiArICdEaXNrQ2hhcnQnKSxcbiAgICAgICAgICAgIHJlbmRlcmVyOiAnYXJlYScsXG4gICAgICAgICAgICB3aWR0aDogNTgwLFxuICAgICAgICAgICAgaGVpZ2h0OiAyNTAsXG4gICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICBtYXg6IDMwICogMTAyNCAqIDEwMjQgKiAxMDI0LCAvLyAzMGdiXG4gICAgICAgICAgICBzZXJpZXM6IFt7XG4gICAgICAgICAgICAgICAgY29sb3I6ICdzdGVlbGJsdWUnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHRyYW5zZm9ybWVkRGlzayB8fCBbIF0sXG4gICAgICAgICAgICAgICAgbmFtZTogJ2FwcHMnXG4gICAgICAgICAgICB9XVxuICAgICAgICB9ICk7XG5cbiAgICAgICAgdmFyIGRpc2tYQXhpcyA9IG5ldyBSaWNrc2hhdy5HcmFwaC5BeGlzLlRpbWUoeyBncmFwaDogZGlza0dyYXBoIH0pO1xuICAgICAgICB2YXIgZGlza1lBeGlzID0gbmV3IFJpY2tzaGF3LkdyYXBoLkF4aXMuWSh7XG4gICAgICAgICAgICBncmFwaDogZGlza0dyYXBoLFxuICAgICAgICAgICAgb3JpZW50YXRpb246ICdsZWZ0JyxcbiAgICAgICAgICAgIHRpY2tGb3JtYXQ6IFJpY2tzaGF3LkZpeHR1cmVzLk51bWJlci5mb3JtYXRLTUJULFxuICAgICAgICAgICAgZWxlbWVudDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYWN0aXZlVGFiICsgJ0Rpc2tZQXhpcycpLFxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgZGlza0hvdmVyRGV0YWlsID0gbmV3IFJpY2tzaGF3LkdyYXBoLkhvdmVyRGV0YWlsKHtcbiAgICAgICAgICAgIGdyYXBoOiBkaXNrR3JhcGgsXG4gICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKHNlcmllcywgeCwgeSkge1xuICAgICAgICAgICAgICAgIHZhciBzd2F0Y2ggPSAnPHNwYW4gY2xhc3M9XCJkZXRhaWxfc3dhdGNoXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAnICsgc2VyaWVzLmNvbG9yICsgJ1wiPjwvc3Bhbj4nO1xuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gc3dhdGNoICsgc2VyaWVzLm5hbWUgKyBcIjogXCIgKyBuZXcgTnVtYmVyKHkvKDEwMjQgKiAxMDI0KSkudG9GaXhlZCgyKSArICdNQjxicj4nO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgZGlza0xlZ2VuZCA9IG5ldyBSaWNrc2hhdy5HcmFwaC5MZWdlbmQoe1xuICAgICAgICAgICAgZ3JhcGg6IGRpc2tHcmFwaCxcbiAgICAgICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGFjdGl2ZVRhYiArICdEaXNrTGVnZW5kJylcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGlza0dyYXBoLnJlbmRlcigpO1xuICAgIH1cblxuICAgICRzY29wZS51cGRhdGVHcmFwaHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjcHVVc2FnZVRhcmdldCA9XG4gICAgICAgICAgICAnbm9uTmVnYXRpdmVEZXJpdmF0aXZlKCcgK1xuICAgICAgICAgICAgICAgICdzdW1TZXJpZXMoY29sbGVjdGQubG9jYWxob3N0LnRhYmxlLScgKyAkc2NvcGUuYXBwLmlkICsgJy1jcHUuZ2F1Z2UtdXNlciwnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbGxlY3RkLmxvY2FsaG9zdC50YWJsZS0nICsgJHNjb3BlLmFwcC5pZCArICctY3B1LmdhdWdlLXN5c3RlbSkpJzsgLy8gYXNzdW1lcyAxMDAgamlmZmllcyBwZXIgc2VjIChVU0VSX0haKVxuXG4gICAgICAgIHZhciBtZW1vcnlVc2FnZVRhcmdldCA9ICdjb2xsZWN0ZC5sb2NhbGhvc3QudGFibGUtJyArICRzY29wZS5hcHAuaWQgKyAnLW1lbW9yeS5nYXVnZS1tYXhfdXNhZ2VfaW5fYnl0ZXMnO1xuXG4gICAgICAgIHZhciBkaXNrVXNhZ2VUYXJnZXQgPSAnY29sbGVjdGQubG9jYWxob3N0LmZpbGVjb3VudC0nICsgJHNjb3BlLmFwcC5pZCArICctYXBwZGF0YS5ieXRlcyc7XG5cbiAgICAgICAgdmFyIGFjdGl2ZVRhYiA9ICRzY29wZS5hY3RpdmVUYWI7XG4gICAgICAgIHZhciBmcm9tID0gJy0yNGhvdXJzJztcbiAgICAgICAgc3dpdGNoIChhY3RpdmVUYWIpIHtcbiAgICAgICAgY2FzZSAnZGF5JzogZnJvbSA9ICctMjRob3Vycyc7IGJyZWFrO1xuICAgICAgICBjYXNlICdtb250aCc6IGZyb20gPSAnLTFtb250aCc7IGJyZWFrO1xuICAgICAgICBjYXNlICd5ZWFyJzogZnJvbSA9ICctMXllYXInOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogY29uc29sZS5sb2coJ2ludGVybmFsIGVycnJvcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgQ2xpZW50LmdyYXBocyhbIGNwdVVzYWdlVGFyZ2V0LCBtZW1vcnlVc2FnZVRhcmdldCwgZGlza1VzYWdlVGFyZ2V0IF0sIGZyb20sIGZ1bmN0aW9uIChlcnJvciwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm4gY29uc29sZS5sb2coZXJyb3IpO1xuXG4gICAgICAgICAgICByZW5kZXJDcHUoYWN0aXZlVGFiLCBkYXRhWzBdKTtcblxuICAgICAgICAgICAgcmVuZGVyTWVtb3J5KGFjdGl2ZVRhYiwgZGF0YVsxXSk7XG5cbiAgICAgICAgICAgIHJlbmRlckRpc2soYWN0aXZlVGFiLCBkYXRhWzJdKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIENsaWVudC5vblJlYWR5KGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBDbGllbnQuZ2V0QXBwKCRyb3V0ZVBhcmFtcy5hcHBJZCwgZnVuY3Rpb24gKGVycm9yLCBhcHApIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJyMvJztcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRzY29wZS5hcHAgPSBhcHA7XG4gICAgICAgICAgICAkc2NvcGUuYXBwTG9nVXJsID0gQ2xpZW50LmdldEFwcExvZ1VybChhcHAuaWQpO1xuXG4gICAgICAgICAgICBpZiAoQ2xpZW50LmdldENvbmZpZygpLnVwZGF0ZSAmJiBDbGllbnQuZ2V0Q29uZmlnKCkudXBkYXRlLmFwcHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXBwVXBkYXRlcyA9IENsaWVudC5nZXRDb25maWcoKS51cGRhdGUuYXBwcztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFwcFVwZGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFwcFVwZGF0ZXNbaV0uYXBwSWQgPT09ICRzY29wZS5hcHAuYXBwU3RvcmVJZCAmJiBhcHBVcGRhdGVzW2ldLnZlcnNpb24gIT09ICAkc2NvcGUuYXBwLnZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVBdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZVZlcnNpb24gPSBhcHBVcGRhdGVzW2ldLnZlcnNpb247XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRzY29wZS51cGRhdGVHcmFwaHMoKTtcblxuICAgICAgICAgICAgJHNjb3BlLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpLmNvbnRyb2xsZXIoJ0FwcEluc3RhbGxDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbicsICdDbGllbnQnLCAnQXBwU3RvcmUnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbiAoJHNjb3BlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgQ2xpZW50LCBBcHBTdG9yZSwgJHRpbWVvdXQpIHtcbiAgICBpZiAoIUNsaWVudC5nZXRVc2VySW5mbygpLmFkbWluKSAkbG9jYXRpb24ucGF0aCgnLycpO1xuXG4gICAgJHNjb3BlLmFwcCA9IG51bGw7XG4gICAgJHNjb3BlLnBhc3N3b3JkID0gJyc7XG4gICAgJHNjb3BlLmxvY2F0aW9uID0gJyc7XG4gICAgJHNjb3BlLmFjY2Vzc1Jlc3RyaWN0aW9uID0gJyc7XG4gICAgJHNjb3BlLmRpc2FibGVkID0gZmFsc2U7XG4gICAgJHNjb3BlLmVycm9yID0geyB9O1xuICAgICRzY29wZS5kb21haW4gPSAnJztcbiAgICAkc2NvcGUudmVyc2lvbiA9IG51bGw7XG4gICAgJHNjb3BlLnBvcnRCaW5kaW5ncyA9IHsgfTtcbiAgICAkc2NvcGUuaG9zdFBvcnRNaW4gPSAxMDI1O1xuICAgICRzY29wZS5ob3N0UG9ydE1heCA9IDk5OTk7XG5cbiAgICBDbGllbnQub25SZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgICRzY29wZS5kb21haW4gPSBDbGllbnQuZ2V0Q29uZmlnKCkuZnFkbjtcblxuICAgICAgICBBcHBTdG9yZS5nZXRBcHBCeUlkKCRyb3V0ZVBhcmFtcy5hcHBTdG9yZUlkLCBmdW5jdGlvbiAoZXJyb3IsIGFwcCkge1xuICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gZXJyb3IgfHwgeyB9O1xuICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAkc2NvcGUuYXBwID0gYXBwO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBUT0RPOiB0aGlzIHNob3VsZCBiZSBiYXNlZCBvbiBib3hWZXJzaW9uXG4gICAgICAgIEFwcFN0b3JlLmdldE1hbmlmZXN0KCRyb3V0ZVBhcmFtcy5hcHBTdG9yZUlkLCBmdW5jdGlvbiAoZXJyb3IsIG1hbmlmZXN0KSB7XG4gICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSBlcnJvciB8fCB7IH07XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcbiAgICAgICAgICAgICRzY29wZS52ZXJzaW9uID0gbWFuaWZlc3QudmVyc2lvbjtcbiAgICAgICAgICAgICRzY29wZS5wb3J0QmluZGluZ3MgPSBtYW5pZmVzdC50Y3BQb3J0cztcbiAgICAgICAgICAgICRzY29wZS5hY2Nlc3NSZXN0cmljdGlvbiA9IG1hbmlmZXN0LmFjY2Vzc1Jlc3RyaWN0aW9uIHx8ICcnO1xuICAgICAgICAgICAgLy8gZGVmYXVsdCBzZXR0aW5nIGlzIHRvIG1hcCBwb3J0cyBhcyB0aGV5IGFyZSBpbiBtYW5pZmVzdFxuICAgICAgICAgICAgZm9yICh2YXIgcG9ydCBpbiAkc2NvcGUucG9ydEJpbmRpbmdzKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnBvcnRCaW5kaW5nc1twb3J0XS5ob3N0UG9ydCA9IHBhcnNlSW50KHBvcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgICRzY29wZS5pbnN0YWxsQXBwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkc2NvcGUuZXJyb3IubmFtZSA9IG51bGw7XG4gICAgICAgICRzY29wZS5lcnJvci5wYXNzd29yZCA9IG51bGw7XG5cbiAgICAgICAgdmFyIHBvcnRCaW5kaW5ncyA9IHsgfTtcbiAgICAgICAgZm9yICh2YXIgcG9ydCBpbiAkc2NvcGUucG9ydEJpbmRpbmdzKSB7XG4gICAgICAgICAgICBwb3J0QmluZGluZ3NbcG9ydF0gPSAkc2NvcGUucG9ydEJpbmRpbmdzW3BvcnRdLmhvc3RQb3J0O1xuICAgICAgICB9XG5cbiAgICAgICAgQ2xpZW50Lmluc3RhbGxBcHAoJHJvdXRlUGFyYW1zLmFwcFN0b3JlSWQsICRzY29wZS52ZXJzaW9uLCAkc2NvcGUucGFzc3dvcmQsICRzY29wZS5hcHAudGl0bGUsIHsgbG9jYXRpb246ICRzY29wZS5sb2NhdGlvbiwgcG9ydEJpbmRpbmdzOiBwb3J0QmluZGluZ3MsIGFjY2Vzc1Jlc3RyaWN0aW9uOiAkc2NvcGUuYWNjZXNzUmVzdHJpY3Rpb24gfSwgZnVuY3Rpb24gKGVycm9yLCBhcHBJZCkge1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLnN0YXR1c0NvZGUgPT09IDQwOSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IubmFtZSA9ICdBcHBsaWNhdGlvbiBhbHJlYWR5IGV4aXN0cy4nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3Iuc3RhdHVzQ29kZSA9PT0gNDAzKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvci5wYXNzd29yZCA9ICdXcm9uZyBwYXNzd29yZCBwcm92aWRlZC4nO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFzc3dvcmQgPSAnJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IubmFtZSA9ICdBcHAgd2l0aCB0aGUgbmFtZSAnICsgJHNjb3BlLmFwcC5uYW1lICsgJyBjYW5ub3QgYmUgaW5zdGFsbGVkLic7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSgnIy9hcHAvJyArIGFwcElkICsgJy9kZXRhaWxzJyk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKCk7XG4gICAgfTtcblxuICAgIC8vIGhhY2sgZm9yIGF1dG9mb2N1cyB3aXRoIGFuZ3VsYXJcbiAgICAkc2NvcGUuJG9uKCckdmlld0NvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHsgJCgnaW5wdXRbYXV0b2ZvY3VzXTp2aXNpYmxlOmZpcnN0JykuZm9jdXMoKTsgfSwgMTAwMCk7XG4gICAgfSk7XG59XSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpLmNvbnRyb2xsZXIoJ0FwcExpc3RDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJ0NsaWVudCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgQ2xpZW50KSB7XG4gICAgJHNjb3BlLmluc3RhbGxlZEFwcHMgPSBDbGllbnQuZ2V0SW5zdGFsbGVkQXBwcygpO1xuICAgICRzY29wZS5jb25maWcgPSBDbGllbnQuZ2V0Q29uZmlnKCk7XG5cbiAgICAkc2NvcGUuYXBwY29uZmlndXJlID0ge1xuICAgICAgICBidXN5OiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHt9LFxuICAgICAgICBhcHA6IHt9LFxuICAgICAgICBsb2NhdGlvbjogJycsXG4gICAgICAgIHBhc3N3b3JkOiAnJyxcbiAgICAgICAgcG9ydEJpbmRpbmdzOiB7fSxcbiAgICAgICAgYWNjZXNzUmVzdHJpY3Rpb246ICcnXG4gICAgfTtcblxuICAgICRzY29wZS5zaG93Q29uZmlndXJlID0gZnVuY3Rpb24gKGFwcCkge1xuICAgICAgICAkc2NvcGUuYXBwY29uZmlndXJlLmFwcCA9IGFwcDtcbiAgICAgICAgJHNjb3BlLmFwcGNvbmZpZ3VyZS5sb2NhdGlvbiA9IGFwcC5sb2NhdGlvbjtcbiAgICAgICAgJHNjb3BlLmFwcGNvbmZpZ3VyZS5wb3J0QmluZGluZ3MgPSBhcHAubWFuaWZlc3QudGNwUG9ydHM7XG4gICAgICAgICRzY29wZS5hcHBjb25maWd1cmUuYWNjZXNzUmVzdHJpY3Rpb24gPSBhcHAuYWNjZXNzUmVzdHJpY3Rpb247XG4gICAgICAgIGZvciAodmFyIGNvbnRhaW5lclBvcnQgaW4gJHNjb3BlLmFwcGNvbmZpZ3VyZS5wb3J0QmluZGluZ3MpIHtcbiAgICAgICAgICAgICRzY29wZS5hcHBjb25maWd1cmUucG9ydEJpbmRpbmdzW2NvbnRhaW5lclBvcnRdLmhvc3RQb3J0ID0gYXBwLnBvcnRCaW5kaW5nc1tjb250YWluZXJQb3J0XTtcbiAgICAgICAgfVxuXG4gICAgICAgICQoJyNhcHBDb25maWd1cmVNb2RhbCcpLm1vZGFsKCdzaG93Jyk7XG4gICAgfTtcblxuICAgICRzY29wZS5kb0NvbmZpZ3VyZSA9IGZ1bmN0aW9uIChmb3JtKSB7XG5cbiAgICAgICAgJHNjb3BlLmFwcGNvbmZpZ3VyZS5idXN5ID0gdHJ1ZTtcbiAgICAgICAgJHNjb3BlLmFwcGNvbmZpZ3VyZS5lcnJvci5uYW1lID0gbnVsbDtcbiAgICAgICAgJHNjb3BlLmFwcGNvbmZpZ3VyZS5lcnJvci5wYXNzd29yZCA9IG51bGw7XG5cbiAgICAgICAgdmFyIHBvcnRCaW5kaW5ncyA9IHsgfTtcbiAgICAgICAgZm9yICh2YXIgY29udGFpbmVyUG9ydCBpbiAkc2NvcGUuYXBwY29uZmlndXJlLnBvcnRCaW5kaW5ncykge1xuICAgICAgICAgICAgcG9ydEJpbmRpbmdzW2NvbnRhaW5lclBvcnRdID0gJHNjb3BlLmFwcGNvbmZpZ3VyZS5wb3J0QmluZGluZ3NbY29udGFpbmVyUG9ydF0uaG9zdFBvcnQ7XG4gICAgICAgIH1cblxuICAgICAgICBDbGllbnQuY29uZmlndXJlQXBwKCRzY29wZS5hcHBjb25maWd1cmUuYXBwLmlkLCAkc2NvcGUuYXBwY29uZmlndXJlLnBhc3N3b3JkLCB7IGxvY2F0aW9uOiAkc2NvcGUuYXBwY29uZmlndXJlLmxvY2F0aW9uLCBwb3J0QmluZGluZ3M6IHBvcnRCaW5kaW5ncywgYWNjZXNzUmVzdHJpY3Rpb246ICRzY29wZS5hcHBjb25maWd1cmUuYWNjZXNzUmVzdHJpY3Rpb24gfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3Iuc3RhdHVzQ29kZSA9PT0gNDAzKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBjb25maWd1cmUuZXJyb3IucGFzc3dvcmQgPSAnV3JvbmcgcGFzc3dvcmQgcHJvdmlkZWQuJztcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcGNvbmZpZ3VyZS5wYXNzd29yZCA9ICcnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBjb25maWd1cmUuZXJyb3IubmFtZSA9ICdBcHAgd2l0aCB0aGUgbmFtZSAnICsgJHNjb3BlLmFwcGNvbmZpZ3VyZS5hcHAubmFtZSArICcgY2Fubm90IGJlIGNvbmZpZ3VyZWQuJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYXBwY29uZmlndXJlLmJ1c3kgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRzY29wZS5hcHBjb25maWd1cmUuYnVzeSA9IGZhbHNlO1xuICAgICAgICAgICAgJHNjb3BlLmFwcGNvbmZpZ3VyZS5lcnJvciA9IHt9O1xuICAgICAgICAgICAgJHNjb3BlLmFwcGNvbmZpZ3VyZS5hcHAgPSB7fTtcbiAgICAgICAgICAgICRzY29wZS5hcHBjb25maWd1cmUubG9jYXRpb24gPSAnJztcbiAgICAgICAgICAgICRzY29wZS5hcHBjb25maWd1cmUucGFzc3dvcmQgPSAnJztcbiAgICAgICAgICAgICRzY29wZS5hcHBjb25maWd1cmUucG9ydEJpbmRpbmdzID0ge307XG4gICAgICAgICAgICAkc2NvcGUuYXBwY29uZmlndXJlLmFjY2Vzc1Jlc3RyaWN0aW9uID0gJyc7XG5cbiAgICAgICAgICAgIGZvcm0uJHNldFByaXN0aW5lKCk7XG4gICAgICAgICAgICBmb3JtLiRzZXRVbnRvdWNoZWQoKTtcblxuICAgICAgICAgICAgJCgnI2FwcENvbmZpZ3VyZU1vZGFsJykubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgICB9O1xufV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKS5jb250cm9sbGVyKCdEYXNoYm9hcmRDb250cm9sbGVyJywgZnVuY3Rpb24gKCkge1xuXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJykuY29udHJvbGxlcignRG5zQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRsb2NhdGlvbicsICdDbGllbnQnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sIENsaWVudCkge1xuICAgIGlmICghQ2xpZW50LmdldFVzZXJJbmZvKCkuYWRtaW4pICRsb2NhdGlvbi5wYXRoKCcvJyk7XG5cbiAgICAkc2NvcGUucmVhZHkgPSBmYWxzZTtcbiAgICAkc2NvcGUudXNlciA9IENsaWVudC5nZXRVc2VySW5mbygpO1xuICAgICRzY29wZS5jb25maWcgPSBDbGllbnQuZ2V0Q29uZmlnKCk7XG4gICAgJHNjb3BlLm5ha2VkRG9tYWluQXBwID0gbnVsbDtcbiAgICAkc2NvcGUuY2VydGlmaWNhdGVGaWxlID0gbnVsbDtcbiAgICAkc2NvcGUuY2VydGlmaWNhdGVGaWxlTmFtZSA9ICcnO1xuICAgICRzY29wZS5rZXlGaWxlID0gbnVsbDtcbiAgICAkc2NvcGUua2V5RmlsZU5hbWUgPSAnJztcblxuICAgICRzY29wZS5zZXROYWtlZERvbWFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFwcGlkID0gJHNjb3BlLm5ha2VkRG9tYWluQXBwID8gJHNjb3BlLm5ha2VkRG9tYWluQXBwLmlkIDogJ2FkbWluJztcblxuICAgICAgICBDbGllbnQuc2V0TmFrZWREb21haW4oYXBwaWQsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm4gY29uc29sZS5lcnJvcignRXJyb3Igc2V0dGluZyBuYWtlZCBkb21haW4nLCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUuYmFja3VwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkKCcjYmFja3VwUHJvZ3Jlc3NNb2RhbCcpLm1vZGFsKCdzaG93Jyk7XG4gICAgICAgICRzY29wZS4kcGFyZW50LmluaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICAgICAgQ2xpZW50LmJhY2t1cChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikgY29uc29sZS5lcnJvcihlcnJvcik7XG5cbiAgICAgICAgICAgIC8vIG5vdyBzdGFydCBxdWVyeVxuICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tJZkRvbmUoKSB7XG4gICAgICAgICAgICAgICAgQ2xpZW50LnZlcnNpb24oZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGNoZWNrSWZEb25lLCAxMDAwKTtcblxuICAgICAgICAgICAgICAgICAgICAkKCcjYmFja3VwUHJvZ3Jlc3NNb2RhbCcpLm1vZGFsKCdoaWRlJyk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kcGFyZW50LmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoY2hlY2tJZkRvbmUsIDUwMDApO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJCgnI3VwZGF0ZU1vZGFsJykubW9kYWwoJ2hpZGUnKTtcblxuICAgICAgICAkc2NvcGUuJHBhcmVudC5pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgICAgIENsaWVudC51cGRhdGUoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvdXBkYXRlLmh0bWwnO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lkQ2VydGlmaWNhdGUnKS5vbmNoYW5nZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRzY29wZS5jZXJ0aWZpY2F0ZUZpbGUgPSBldmVudC50YXJnZXQuZmlsZXNbMF07XG4gICAgICAgICAgICAkc2NvcGUuY2VydGlmaWNhdGVGaWxlTmFtZSA9IGV2ZW50LnRhcmdldC5maWxlc1swXS5uYW1lO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lkS2V5Jykub25jaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc2NvcGUua2V5RmlsZSA9IGV2ZW50LnRhcmdldC5maWxlc1swXTtcbiAgICAgICAgICAgICRzY29wZS5rZXlGaWxlTmFtZSA9IGV2ZW50LnRhcmdldC5maWxlc1swXS5uYW1lO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLnNldENlcnRpZmljYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnV2lsbCBzZXQgdGhlIGNlcnRpZmljYXRlJyk7XG5cbiAgICAgICAgaWYgKCEkc2NvcGUuY2VydGlmaWNhdGVGaWxlKSByZXR1cm4gY29uc29sZS5sb2coJ0NlcnRpZmljYXRlIG5vdCBzZXQnKTtcbiAgICAgICAgaWYgKCEkc2NvcGUua2V5RmlsZSkgcmV0dXJuIGNvbnNvbGUubG9nKCdLZXkgbm90IHNldCcpO1xuXG4gICAgICAgIENsaWVudC5zZXRDZXJ0aWZpY2F0ZSgkc2NvcGUuY2VydGlmaWNhdGVGaWxlLCAkc2NvcGUua2V5RmlsZSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybiBjb25zb2xlLmxvZyhlcnJvcik7XG5cbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQuYmluZCh3aW5kb3cubG9jYXRpb24sIHRydWUpLCAzMDAwKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIENsaWVudC5vbkNvbmZpZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICRzY29wZS50b2tlbkluVXNlID0gQ2xpZW50Ll90b2tlbjtcblxuICAgICAgICBDbGllbnQuZ2V0QXBwcyhmdW5jdGlvbiAoZXJyb3IsIGFwcHMpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBhcHAgbGlzdCcpO1xuICAgICAgICAgICAgJHNjb3BlLmFwcHMgPSBhcHBzO1xuXG4gICAgICAgICAgICBDbGllbnQuZ2V0TmFrZWREb21haW4oZnVuY3Rpb24gKGVycm9yLCBhcHBpZCkge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ha2VkRG9tYWluQXBwID0gbnVsbDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5hcHBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYXBwc1tpXS5pZCA9PT0gYXBwaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uYWtlZERvbWFpbkFwcCA9ICRzY29wZS5hcHBzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUucmVhZHkgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufV0pO1xuIiwiLyogZ2xvYmFsOlJpY2tzaGF3OnRydWUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKS5jb250cm9sbGVyKCdHcmFwaHNDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJ0NsaWVudCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgQ2xpZW50KSB7XG4gICAgaWYgKCFDbGllbnQuZ2V0VXNlckluZm8oKS5hZG1pbikgJGxvY2F0aW9uLnBhdGgoJy8nKTtcblxuICAgICRzY29wZS5hY3RpdmVUYWIgPSAnZGF5JztcblxuICAgIHZhciBjcHVVc2FnZVRhcmdldCA9ICd0cmFuc2Zvcm1OdWxsKCcgK1xuICAgICdzY2FsZShkaXZpZGVTZXJpZXMoJyArXG4gICAgICAgICdzdW1TZXJpZXMoY29sbGVjdGQubG9jYWxob3N0LmNwdS0wLmNwdS1zeXN0ZW0sY29sbGVjdGQubG9jYWxob3N0LmNwdS0wLmNwdS1uaWNlLGNvbGxlY3RkLmxvY2FsaG9zdC5jcHUtMC5jcHUtdXNlciksJyArXG4gICAgICAgICdzdW1TZXJpZXMoY29sbGVjdGQubG9jYWxob3N0LmNwdS0wLmNwdS1pZGxlLGNvbGxlY3RkLmxvY2FsaG9zdC5jcHUtMC5jcHUtc3lzdGVtLGNvbGxlY3RkLmxvY2FsaG9zdC5jcHUtMC5jcHUtbmljZSxjb2xsZWN0ZC5sb2NhbGhvc3QuY3B1LTAuY3B1LXVzZXIsY29sbGVjdGQubG9jYWxob3N0LmNwdS0wLmNwdS13YWl0KSksIDEwMCksIDApJztcblxuICAgIHZhciBuZXR3b3JrVXNhZ2VUeFRhcmdldCA9ICd0cmFuc2Zvcm1OdWxsKGNvbGxlY3RkLmxvY2FsaG9zdC5pbnRlcmZhY2UtZXRoMC5pZl9vY3RldHMudHgsIDApJztcbiAgICB2YXIgbmV0d29ya1VzYWdlUnhUYXJnZXQgPSAndHJhbnNmb3JtTnVsbChjb2xsZWN0ZC5sb2NhbGhvc3QuaW50ZXJmYWNlLWV0aDAuaWZfb2N0ZXRzLnJ4LCAwKSc7XG5cbiAgICB2YXIgZGlza1VzYWdlQXBwc1VzZWRUYXJnZXQgPSAndHJhbnNmb3JtTnVsbChjb2xsZWN0ZC5sb2NhbGhvc3QuZGYtbG9vcDAuZGZfY29tcGxleC11c2VkLCAwKSc7XG4gICAgdmFyIGRpc2tVc2FnZURhdGFVc2VkVGFyZ2V0ID0gJ3RyYW5zZm9ybU51bGwoY29sbGVjdGQubG9jYWxob3N0LmRmLWxvb3AxLmRmX2NvbXBsZXgtdXNlZCwgMCknO1xuXG4gICAgZnVuY3Rpb24gcmVuZGVyQ3B1KGFjdGl2ZVRhYiwgY3B1RGF0YSkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtZWRDcHUgPSBbIF07XG5cbiAgICAgICAgaWYgKGNwdURhdGEgJiYgY3B1RGF0YS5kYXRhcG9pbnRzKSB0cmFuc2Zvcm1lZENwdSA9IGNwdURhdGEuZGF0YXBvaW50cy5tYXAoZnVuY3Rpb24gKHBvaW50KSB7IHJldHVybiB7IHk6IHBvaW50WzBdLCB4OiBwb2ludFsxXSB9IH0pO1xuXG4gICAgICAgIHZhciBjcHVHcmFwaCA9IG5ldyBSaWNrc2hhdy5HcmFwaCh7XG4gICAgICAgICAgICBlbGVtZW50OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIGFjdGl2ZVRhYiArICdDcHVDaGFydCcpLFxuICAgICAgICAgICAgcmVuZGVyZXI6ICdhcmVhJyxcbiAgICAgICAgICAgIHdpZHRoOiA1ODAsXG4gICAgICAgICAgICBoZWlnaHQ6IDI1MCxcbiAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgIG1heDogMTAwLFxuICAgICAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgICAgIGNvbG9yOiAnc3RlZWxibHVlJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB0cmFuc2Zvcm1lZENwdSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnY3B1J1xuICAgICAgICAgICAgfV1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGNwdVhBeGlzID0gbmV3IFJpY2tzaGF3LkdyYXBoLkF4aXMuVGltZSh7IGdyYXBoOiBjcHVHcmFwaCB9KTtcbiAgICAgICAgdmFyIGNwdVlBeGlzID0gbmV3IFJpY2tzaGF3LkdyYXBoLkF4aXMuWSh7XG4gICAgICAgICAgICBncmFwaDogY3B1R3JhcGgsXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogJ2xlZnQnLFxuICAgICAgICAgICAgdGlja0Zvcm1hdDogUmlja3NoYXcuRml4dHVyZXMuTnVtYmVyLmZvcm1hdEtNQlQsXG4gICAgICAgICAgICBlbGVtZW50OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhY3RpdmVUYWIgKyAnQ3B1WUF4aXMnKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGNwdUhvdmVyRGV0YWlsID0gbmV3IFJpY2tzaGF3LkdyYXBoLkhvdmVyRGV0YWlsKHtcbiAgICAgICAgICAgIGdyYXBoOiBjcHVHcmFwaCxcbiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oc2VyaWVzLCB4LCB5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN3YXRjaCA9ICc8c3BhbiBjbGFzcz1cImRldGFpbF9zd2F0Y2hcIiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6ICcgKyBzZXJpZXMuY29sb3IgKyAnXCI+PC9zcGFuPic7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBzd2F0Y2ggKyBzZXJpZXMubmFtZSArIFwiOiBcIiArIG5ldyBOdW1iZXIoeSkudG9GaXhlZCgyKSArICclPGJyPic7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNwdUdyYXBoLnJlbmRlcigpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlck5ldHdvcmsoYWN0aXZlVGFiLCB0eERhdGEsIHJ4RGF0YSkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtZWRUeCA9IFsgXSwgdHJhbnNmb3JtZWRSeCA9IFsgXTtcblxuICAgICAgICBpZiAodHhEYXRhICYmIHR4RGF0YS5kYXRhcG9pbnRzKSB0cmFuc2Zvcm1lZFR4ID0gdHhEYXRhLmRhdGFwb2ludHMubWFwKGZ1bmN0aW9uIChwb2ludCkgeyByZXR1cm4geyB5OiBwb2ludFswXSwgeDogcG9pbnRbMV0gfSB9KTtcbiAgICAgICAgaWYgKHJ4RGF0YSAmJiByeERhdGEuZGF0YXBvaW50cykgdHJhbnNmb3JtZWRSeCA9IHJ4RGF0YS5kYXRhcG9pbnRzLm1hcChmdW5jdGlvbiAocG9pbnQpIHsgcmV0dXJuIHsgeTogcG9pbnRbMF0sIHg6IHBvaW50WzFdIH0gfSk7XG5cbiAgICAgICAgdmFyIG5ldHdvcmtHcmFwaCA9IG5ldyBSaWNrc2hhdy5HcmFwaCh7XG4gICAgICAgICAgICBlbGVtZW50OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIGFjdGl2ZVRhYiArICdOZXR3b3JrQ2hhcnQnKSxcbiAgICAgICAgICAgIHJlbmRlcmVyOiAnYXJlYScsXG4gICAgICAgICAgICB3aWR0aDogNTgwLFxuICAgICAgICAgICAgaGVpZ2h0OiAyNTAsXG4gICAgICAgICAgICBzZXJpZXM6IFsge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAnc3RlZWxibHVlJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB0cmFuc2Zvcm1lZFR4LFxuICAgICAgICAgICAgICAgIG5hbWU6ICd0eCdcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJ2dyZWVuJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB0cmFuc2Zvcm1lZFJ4LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdyeCdcbiAgICAgICAgICAgIH0gXVxuICAgICAgICB9ICk7XG5cbiAgICAgICAgdmFyIG5ldHdvcmtYQXhpcyA9IG5ldyBSaWNrc2hhdy5HcmFwaC5BeGlzLlRpbWUoeyBncmFwaDogbmV0d29ya0dyYXBoIH0pO1xuICAgICAgICB2YXIgbmV0d29ya1lBeGlzID0gbmV3IFJpY2tzaGF3LkdyYXBoLkF4aXMuWSh7XG4gICAgICAgICAgICBncmFwaDogbmV0d29ya0dyYXBoLFxuICAgICAgICAgICAgb3JpZW50YXRpb246ICdsZWZ0JyxcbiAgICAgICAgICAgIHRpY2tGb3JtYXQ6IFJpY2tzaGF3LkZpeHR1cmVzLk51bWJlci5mb3JtYXRLTUJULFxuICAgICAgICAgICAgZWxlbWVudDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYWN0aXZlVGFiICsgJ05ldHdvcmtZQXhpcycpLFxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgbmV0d29ya0hvdmVyRGV0YWlsID0gbmV3IFJpY2tzaGF3LkdyYXBoLkhvdmVyRGV0YWlsKHtcbiAgICAgICAgICAgIGdyYXBoOiBuZXR3b3JrR3JhcGgsXG4gICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKHNlcmllcywgeCwgeSkge1xuICAgICAgICAgICAgICAgIHZhciBzd2F0Y2ggPSAnPHNwYW4gY2xhc3M9XCJkZXRhaWxfc3dhdGNoXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAnICsgc2VyaWVzLmNvbG9yICsgJ1wiPjwvc3Bhbj4nO1xuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gc3dhdGNoICsgc2VyaWVzLm5hbWUgKyBcIjogXCIgKyBuZXcgTnVtYmVyKHkvMTAyNCkudG9GaXhlZCgyKSArICdLQjxicj4nO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBuZXR3b3JrR3JhcGgucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVuZGVyRGlzayhhY3RpdmVUYWIsIGFwcHNVc2VkRGF0YSwgZGF0YVVzZWREYXRhKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1lZEFwcHNVc2VkID0gWyBdLCB0cmFuc2Zvcm1lZERhdGFVc2VkID0gWyBdO1xuXG4gICAgICAgIGlmIChhcHBzVXNlZERhdGEgJiYgYXBwc1VzZWREYXRhLmRhdGFwb2ludHMpIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkQXBwc1VzZWQgPSBhcHBzVXNlZERhdGEuZGF0YXBvaW50cy5tYXAoZnVuY3Rpb24gKHBvaW50KSB7IHJldHVybiB7IHk6IHBvaW50WzBdLCB4OiBwb2ludFsxXSB9OyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhVXNlZERhdGEgJiYgZGF0YVVzZWREYXRhLmRhdGFwb2ludHMpIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkRGF0YVVzZWQgPSBkYXRhVXNlZERhdGEuZGF0YXBvaW50cy5tYXAoZnVuY3Rpb24gKHBvaW50KSB7IHJldHVybiB7IHk6IHBvaW50WzBdLCB4OiBwb2ludFsxXSB9OyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaXNrR3JhcGggPSBuZXcgUmlja3NoYXcuR3JhcGgoe1xuICAgICAgICAgICAgZWxlbWVudDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyBhY3RpdmVUYWIgKyAnRGlza0NoYXJ0JyksXG4gICAgICAgICAgICByZW5kZXJlcjogJ2FyZWEnLFxuICAgICAgICAgICAgd2lkdGg6IDU4MCxcbiAgICAgICAgICAgIGhlaWdodDogMjUwLFxuICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgbWF4OiAzMCAqIDEwMjQgKiAxMDI0ICogMTAyNCwgLy8gMzBnYlxuICAgICAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgICAgIGNvbG9yOiAnc3RlZWxibHVlJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB0cmFuc2Zvcm1lZEFwcHNVc2VkLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdhcHBzJ1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAnZ3JlZW4nLFxuICAgICAgICAgICAgICAgIGRhdGE6IHRyYW5zZm9ybWVkRGF0YVVzZWQsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2RhdGEnXG4gICAgICAgICAgICB9XVxuICAgICAgICB9ICk7XG5cbiAgICAgICAgdmFyIGRpc2tYQXhpcyA9IG5ldyBSaWNrc2hhdy5HcmFwaC5BeGlzLlRpbWUoeyBncmFwaDogZGlza0dyYXBoIH0pO1xuICAgICAgICB2YXIgZGlza1lBeGlzID0gbmV3IFJpY2tzaGF3LkdyYXBoLkF4aXMuWSh7XG4gICAgICAgICAgICBncmFwaDogZGlza0dyYXBoLFxuICAgICAgICAgICAgb3JpZW50YXRpb246ICdsZWZ0JyxcbiAgICAgICAgICAgIHRpY2tGb3JtYXQ6IFJpY2tzaGF3LkZpeHR1cmVzLk51bWJlci5mb3JtYXRLTUJULFxuICAgICAgICAgICAgZWxlbWVudDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYWN0aXZlVGFiICsgJ0Rpc2tZQXhpcycpLFxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgZGlza0hvdmVyRGV0YWlsID0gbmV3IFJpY2tzaGF3LkdyYXBoLkhvdmVyRGV0YWlsKHtcbiAgICAgICAgICAgIGdyYXBoOiBkaXNrR3JhcGgsXG4gICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKHNlcmllcywgeCwgeSkge1xuICAgICAgICAgICAgICAgIHZhciBzd2F0Y2ggPSAnPHNwYW4gY2xhc3M9XCJkZXRhaWxfc3dhdGNoXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAnICsgc2VyaWVzLmNvbG9yICsgJ1wiPjwvc3Bhbj4nO1xuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gc3dhdGNoICsgc2VyaWVzLm5hbWUgKyBcIjogXCIgKyBuZXcgTnVtYmVyKHkvKDEwMjQgKiAxMDI0ICogMTAyNCkpLnRvRml4ZWQoMikgKyAnR0I8YnI+JztcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGRpc2tMZWdlbmQgPSBuZXcgUmlja3NoYXcuR3JhcGguTGVnZW5kKHtcbiAgICAgICAgICAgIGdyYXBoOiBkaXNrR3JhcGgsXG4gICAgICAgICAgICBlbGVtZW50OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhY3RpdmVUYWIgKyAnRGlza0xlZ2VuZCcpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRpc2tHcmFwaC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICAkc2NvcGUudXBkYXRlR3JhcGhzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWN0aXZlVGFiID0gJHNjb3BlLmFjdGl2ZVRhYjtcbiAgICAgICB2YXIgZnJvbSA9ICctMjRob3Vycyc7XG4gICAgICAgIHN3aXRjaCAoYWN0aXZlVGFiKSB7XG4gICAgICAgIGNhc2UgJ2RheSc6IGZyb20gPSAnLTI0aG91cnMnOyBicmVhaztcbiAgICAgICAgY2FzZSAnbW9udGgnOiBmcm9tID0gJy0xbW9udGgnOyBicmVhaztcbiAgICAgICAgY2FzZSAneWVhcic6IGZyb20gPSAnLTF5ZWFyJzsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IGNvbnNvbGUubG9nKCdpbnRlcm5hbCBlcnJyb3InKTtcbiAgICAgICAgfVxuXG4gICAgICAgIENsaWVudC5ncmFwaHMoWyBjcHVVc2FnZVRhcmdldCwgbmV0d29ya1VzYWdlVHhUYXJnZXQsIG5ldHdvcmtVc2FnZVJ4VGFyZ2V0LCBkaXNrVXNhZ2VBcHBzVXNlZFRhcmdldCwgZGlza1VzYWdlRGF0YVVzZWRUYXJnZXQgXSwgZnJvbSwgZnVuY3Rpb24gKGVycm9yLCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybiBjb25zb2xlLmxvZyhlcnJvcik7XG5cbiAgICAgICAgICAgIHJlbmRlckNwdShhY3RpdmVUYWIsIGRhdGFbMF0pO1xuXG4gICAgICAgICAgICByZW5kZXJOZXR3b3JrKGFjdGl2ZVRhYiwgZGF0YVsxXSwgZGF0YVsyXSk7XG5cbiAgICAgICAgICAgIHJlbmRlckRpc2soYWN0aXZlVGFiLCBkYXRhWzNdLCBkYXRhWzRdKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIENsaWVudC5vblJlYWR5KCRzY29wZS51cGRhdGVHcmFwaHMpO1xufV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKS5jb250cm9sbGVyKCdTZWN1cml0eUNvbnRyb2xsZXInLCBbJyRzY29wZScsICdDbGllbnQnLCBmdW5jdGlvbiAoJHNjb3BlLCBDbGllbnQpIHtcbiAgICAkc2NvcGUuYWN0aXZlQ2xpZW50cyA9IFtdO1xuICAgICRzY29wZS50b2tlbkluVXNlID0gbnVsbDtcbiAgICAkc2NvcGUucmVhZHkgPSBmYWxzZTtcblxuICAgICRzY29wZS5yZW1vdmVBY2Nlc3NUb2tlbnMgPSBmdW5jdGlvbiAoY2xpZW50LCBldmVudCkge1xuICAgICAgICBjbGllbnQuX2J1c3kgPSB0cnVlO1xuXG4gICAgICAgIENsaWVudC5kZWxUb2tlbnNCeUNsaWVudElkKGNsaWVudC5pZCwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybiBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIGNsaWVudC5fYnVzeSA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgQ2xpZW50Lm9uUmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAkc2NvcGUudG9rZW5JblVzZSA9IENsaWVudC5fdG9rZW47XG5cbiAgICAgICAgQ2xpZW50LmdldE9BdXRoQ2xpZW50cyhmdW5jdGlvbiAoZXJyb3IsIGFjdGl2ZUNsaWVudHMpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuXG4gICAgICAgICAgICAkc2NvcGUuYWN0aXZlQ2xpZW50cyA9IGFjdGl2ZUNsaWVudHM7XG4gICAgICAgICAgICAkc2NvcGUucmVhZHkgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1dKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJykuY29udHJvbGxlcignVXNlckNyZWF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJywgJ0NsaWVudCcsIGZ1bmN0aW9uICgkc2NvcGUsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uLCBDbGllbnQpIHtcbiAgICBpZiAoIUNsaWVudC5nZXRVc2VySW5mbygpLmFkbWluKSAkbG9jYXRpb24ucGF0aCgnLycpO1xuXG4gICAgJHNjb3BlLmRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAkc2NvcGUudXNlcm5hbWUgPSAnJztcbiAgICAkc2NvcGUuZW1haWwgPSAnJztcbiAgICAkc2NvcGUuYWxyZWFkeVRha2VuID0gJyc7XG5cbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkc2NvcGUuYWxyZWFkeVRha2VuID0gJyc7XG5cbiAgICAgICAgJHNjb3BlLmRpc2FibGVkID0gdHJ1ZTtcblxuICAgICAgICBDbGllbnQuY3JlYXRlVXNlcigkc2NvcGUudXNlcm5hbWUsICRzY29wZS5lbWFpbCwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgJiYgZXJyb3Iuc3RhdHVzQ29kZSA9PT0gNDA5KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmFscmVhZHlUYWtlbiA9ICRzY29wZS51c2VybmFtZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcignVXNlcm5hbWUgYWxyZWFkeSB0YWtlbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycm9yKSBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gY3JlYXRlIHVzZXIuJywgZXJyb3IpO1xuXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcjL3VzZXJsaXN0JztcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgICB9O1xufV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKS5jb250cm9sbGVyKCdVc2VyTGlzdENvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9jYXRpb24nLCAnQ2xpZW50JywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCBDbGllbnQpIHtcbiAgICBpZiAoIUNsaWVudC5nZXRVc2VySW5mbygpLmFkbWluKSAkbG9jYXRpb24ucGF0aCgnLycpO1xuXG4gICAgJHNjb3BlLnJlYWR5ID0gZmFsc2U7XG4gICAgJHNjb3BlLnVzZXJzID0gW107XG4gICAgJHNjb3BlLnVzZXJJbmZvID0gQ2xpZW50LmdldFVzZXJJbmZvKCk7XG5cbiAgICAkc2NvcGUudXNlcnJlbW92ZSA9IHtcbiAgICAgICAgYnVzeTogZmFsc2UsXG4gICAgICAgIGVycm9yOiB7fSxcbiAgICAgICAgdXNlckluZm86IHt9LFxuICAgICAgICB1c2VybmFtZTogJycsXG4gICAgICAgIHBhc3N3b3JkOiAnJ1xuICAgIH07XG5cbiAgICAkc2NvcGUudXNlcmFkZCA9IHtcbiAgICAgICAgYnVzeTogZmFsc2UsXG4gICAgICAgIGFscmVhZHlUYWtlbjogZmFsc2UsXG4gICAgICAgIGVycm9yOiB7fSxcbiAgICAgICAgdXNlcm5hbWU6ICcnLFxuICAgICAgICBlbWFpbDogJydcbiAgICB9O1xuXG4gICAgJHNjb3BlLmlzTWUgPSBmdW5jdGlvbiAodXNlcikge1xuICAgICAgICByZXR1cm4gdXNlci51c2VybmFtZSA9PT0gQ2xpZW50LmdldFVzZXJJbmZvKCkudXNlcm5hbWU7XG4gICAgfTtcblxuICAgICRzY29wZS5pc0FkbWluID0gZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgcmV0dXJuICEhdXNlci5hZG1pbjtcbiAgICB9O1xuXG4gICAgJHNjb3BlLnRvZ2dsZUFkbWluID0gZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgQ2xpZW50LnNldEFkbWluKHVzZXIudXNlcm5hbWUsICF1c2VyLmFkbWluLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuXG4gICAgICAgICAgICB1c2VyLmFkbWluID0gIXVzZXIuYWRtaW47XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUuZG9BZGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRzY29wZS51c2VyYWRkLmFscmVhZHlUYWtlbiA9ICcnO1xuICAgICAgICAkc2NvcGUudXNlcmFkZC5lcnJvci51c2VybmFtZSA9IG51bGw7XG4gICAgICAgICRzY29wZS51c2VyYWRkLmVycm9yLmVtYWlsID0gbnVsbDtcblxuICAgICAgICBDbGllbnQuY3JlYXRlVXNlcigkc2NvcGUudXNlcmFkZC51c2VybmFtZSwgJHNjb3BlLnVzZXJhZGQuZW1haWwsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yICYmIGVycm9yLnN0YXR1c0NvZGUgPT09IDQwOSkge1xuICAgICAgICAgICAgICAgICRzY29wZS51c2VyYWRkLmFscmVhZHlUYWtlbiA9ICRzY29wZS51c2VybmFtZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcignVXNlcm5hbWUgYWxyZWFkeSB0YWtlbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycm9yICYmIGVycm9yLnN0YXR1c0NvZGUgPT09IDQwMCkge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5tZXNzYWdlLmluZGV4T2YoJ2VtYWlsJykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS51c2VyYWRkLmVycm9yLmVtYWlsID0gJ0ludmFsaWQgRW1haWwnO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXNlcmFkZC5lbWFpbCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlcnJvci5tZXNzYWdlLmluZGV4T2YoJ3VzZXJuYW1lJykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS51c2VyYWRkLmVycm9yLnVzZXJuYW1lID0gJ0ludmFsaWQgVXNlcm5hbWUnO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXNlcmFkZC51c2VybmFtZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcnJvcikgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIGNyZWF0ZSB1c2VyLicsIGVycm9yKTtcblxuICAgICAgICAgICAgcmVmcmVzaCgpO1xuICAgICAgICAgICAgJCgnI3VzZXJBZGRNb2RhbCcpLm1vZGFsKCdoaWRlJyk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUuc2hvd1VzZXJSZW1vdmUgPSBmdW5jdGlvbiAodXNlckluZm8pIHtcbiAgICAgICAgJHNjb3BlLnVzZXJyZW1vdmUuZXJyb3IudXNlcm5hbWUgPSBudWxsO1xuICAgICAgICAkc2NvcGUudXNlcnJlbW92ZS5lcnJvci5wYXNzd29yZCA9IG51bGw7XG4gICAgICAgICRzY29wZS51c2VycmVtb3ZlLnVzZXJJbmZvID0gdXNlckluZm87XG4gICAgICAgICQoJyN1c2VyUmVtb3ZlTW9kYWwnKS5tb2RhbCgnc2hvdycpO1xuICAgIH07XG5cbiAgICAkc2NvcGUuZG9Vc2VyUmVtb3ZlID0gZnVuY3Rpb24gKGZvcm0pIHtcbiAgICAgICAgJHNjb3BlLnVzZXJyZW1vdmUuZXJyb3IudXNlcm5hbWUgPSBudWxsO1xuICAgICAgICAkc2NvcGUudXNlcnJlbW92ZS5lcnJvci5wYXNzd29yZCA9IG51bGw7XG5cbiAgICAgICAgaWYgKCRzY29wZS51c2VycmVtb3ZlLnVzZXJuYW1lICE9PSAkc2NvcGUudXNlcnJlbW92ZS51c2VySW5mby51c2VybmFtZSkge1xuICAgICAgICAgICAgJHNjb3BlLnVzZXJyZW1vdmUuZXJyb3IudXNlcm5hbWUgPSAnVXNlcm5hbWUgZG9lcyBub3QgbWF0Y2gnO1xuICAgICAgICAgICAgJHNjb3BlLnVzZXJyZW1vdmUudXNlcm5hbWUgPSAnJztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIENsaWVudC5yZW1vdmVVc2VyKCRzY29wZS51c2VycmVtb3ZlLnVzZXJuYW1lLCAkc2NvcGUudXNlcnJlbW92ZS5wYXNzd29yZCwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgJiYgZXJyb3Iuc3RhdHVzQ29kZSA9PT0gNDAzKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnVzZXJyZW1vdmUuZXJyb3IucGFzc3dvcmQgPSAnSW5jb3JyZWN0IHBhc3N3b3JkJztcbiAgICAgICAgICAgICAgICAkc2NvcGUudXNlcnJlbW92ZS5wYXNzd29yZCA9ICcnO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byBkZWxldGUgdXNlci4nLCBlcnJvcik7XG5cbiAgICAgICAgICAgICRzY29wZS51c2VycmVtb3ZlLnVzZXJJbmZvID0ge307XG4gICAgICAgICAgICAkc2NvcGUudXNlcnJlbW92ZS51c2VybmFtZSA9ICcnO1xuICAgICAgICAgICAgJHNjb3BlLnVzZXJyZW1vdmUucGFzc3dvcmQgPSAnJztcblxuICAgICAgICAgICAgZm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgICAgIGZvcm0uJHNldFVudG91Y2hlZCgpO1xuXG4gICAgICAgICAgICAkKCcjdXNlclJlbW92ZU1vZGFsJykubW9kYWwoJ2hpZGUnKTtcblxuICAgICAgICAgICAgcmVmcmVzaCgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVmcmVzaCgpIHtcbiAgICAgICAgQ2xpZW50Lmxpc3RVc2VycyhmdW5jdGlvbiAoZXJyb3IsIHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm4gY29uc29sZS5lcnJvcignVW5hYmxlIHRvIGdldCB1c2VyIGxpc3RpbmcuJywgZXJyb3IpO1xuXG4gICAgICAgICAgICAkc2NvcGUudXNlcnMgPSByZXN1bHQudXNlcnM7XG4gICAgICAgICAgICAkc2NvcGUucmVhZHkgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZWZyZXNoKCk7XG59XSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpLmNvbnRyb2xsZXIoJ1VzZXJQYXNzd29yZENvbnRyb2xsZXInLCBbJyRzY29wZScsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJywgJ0NsaWVudCcsIGZ1bmN0aW9uICgkc2NvcGUsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uLCBDbGllbnQpIHtcbiAgICBpZiAoIUNsaWVudC5nZXRVc2VySW5mbygpLmFkbWluKSAkbG9jYXRpb24ucGF0aCgnLycpO1xuXG4gICAgJHNjb3BlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICRzY29wZS5jdXJyZW50UGFzc3dvcmQgPSAnJztcbiAgICAkc2NvcGUubmV3UGFzc3dvcmQgPSAnJztcbiAgICAkc2NvcGUucmVwZWF0UGFzc3dvcmQgPSAnJztcbiAgICAkc2NvcGUudmFsaWRhdGlvbkNsYXNzID0ge307XG5cbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkNsYXNzLmN1cnJlbnRQYXNzd29yZCA9ICcnO1xuICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkNsYXNzLm5ld1Bhc3N3b3JkID0gJyc7XG4gICAgICAgICRzY29wZS52YWxpZGF0aW9uQ2xhc3MucmVwZWF0UGFzc3dvcmQgPSAnJztcblxuICAgICAgICBpZiAoJHNjb3BlLm5ld1Bhc3N3b3JkICE9PSAkc2NvcGUucmVwZWF0UGFzc3dvcmQpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dFJlcGVhdFBhc3N3b3JkJykuZm9jdXMoKTtcbiAgICAgICAgICAgICRzY29wZS52YWxpZGF0aW9uQ2xhc3MucmVwZWF0UGFzc3dvcmQgPSAnaGFzLWVycm9yJztcbiAgICAgICAgICAgICRzY29wZS5yZXBlYXRQYXNzd29yZCA9ICcnO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIENsaWVudC5jaGFuZ2VQYXNzd29yZCgkc2NvcGUuY3VycmVudFBhc3N3b3JkLCAkc2NvcGUubmV3UGFzc3dvcmQsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yICYmIGVycm9yLnN0YXR1c0NvZGUgPT09IDQwMykge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dEN1cnJlbnRQYXNzd29yZCcpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnZhbGlkYXRpb25DbGFzcy5jdXJyZW50UGFzc3dvcmQgPSAnaGFzLWVycm9yJztcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3VycmVudFBhc3N3b3JkID0gJyc7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld1Bhc3N3b3JkID0gJyc7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlcGVhdFBhc3N3b3JkID0gJyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIGNoYW5nZSBwYXNzd29yZC4nLCBlcnJvcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHNjb3BlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuICAgIH07XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXRDdXJyZW50UGFzc3dvcmQnKS5mb2N1cygpO1xufV0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9